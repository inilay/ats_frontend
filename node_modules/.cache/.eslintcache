[{"/home/indiora/ATS/frontend/src/index.js":"1","/home/indiora/ATS/frontend/src/App.js":"2","/home/indiora/ATS/frontend/src/components/AppRouter.jsx":"3","/home/indiora/ATS/frontend/src/components/UI/MyNavbar/MyNavbar.jsx":"4","/home/indiora/ATS/frontend/src/components/UI/MyFooter/MyFooter.jsx":"5","/home/indiora/ATS/frontend/src/context/index.js":"6","/home/indiora/ATS/frontend/src/router/index.js":"7","/home/indiora/ATS/frontend/src/components/UI/ThemeSwitcher/ThemeSwitcher.jsx":"8","/home/indiora/ATS/frontend/src/assets/svg/SettingIcon.jsx":"9","/home/indiora/ATS/frontend/src/assets/svg/HomeIcon.jsx":"10","/home/indiora/ATS/frontend/src/components/UI/MyFormGroupInput/MyFormGroupInput.jsx":"11","/home/indiora/ATS/frontend/src/components/UI/MyButton/MyButton.jsx":"12","/home/indiora/ATS/frontend/src/assets/svg/ThemeSwitcherIcon.jsx":"13","/home/indiora/ATS/frontend/src/API/PostService.js":"14","/home/indiora/ATS/frontend/src/utils/pages.js":"15","/home/indiora/ATS/frontend/src/hooks/useFetching.jsx":"16","/home/indiora/ATS/frontend/src/hooks/useObserver.jsx":"17","/home/indiora/ATS/frontend/src/components/UI/Loader/Loader.jsx":"18","/home/indiora/ATS/frontend/src/components/RoundRobin.jsx":"19","/home/indiora/ATS/frontend/src/components/SingleEl.jsx":"20","/home/indiora/ATS/frontend/src/components/Swiss.jsx":"21","/home/indiora/ATS/frontend/src/hooks/useTournaments.jsx":"22","/home/indiora/ATS/frontend/src/components/DoubleEl.jsx":"23","/home/indiora/ATS/frontend/src/assets/svg/ExpImageIcon.jsx":"24","/home/indiora/ATS/frontend/src/assets/svg/SEIcon.jsx":"25","/home/indiora/ATS/frontend/src/assets/svg/TimeManagmentIcon.jsx":"26","/home/indiora/ATS/frontend/src/assets/svg/DEIcon.jsx":"27","/home/indiora/ATS/frontend/src/assets/svg/RRIcon.jsx":"28","/home/indiora/ATS/frontend/src/assets/svg/SWIcon.jsx":"29","/home/indiora/ATS/frontend/src/assets/svg/MLStageIcon.jsx":"30","/home/indiora/ATS/frontend/src/components/UI/UploadButton/UploadButton.jsx":"31","/home/indiora/ATS/frontend/src/components/UI/MyCard/MyCard.jsx":"32","/home/indiora/ATS/frontend/src/assets/svg/DefaultTournamentIcon.jsx":"33","/home/indiora/ATS/frontend/src/components/UI/Pagination/Pagination.jsx":"34","/home/indiora/ATS/frontend/src/components/UI/MySelect/MySelect.jsx":"35","/home/indiora/ATS/frontend/src/components/UI/BracketWrapper/BracketWrapper.jsx":"36","/home/indiora/ATS/frontend/src/components/UI/MyRoundRobinMatch/MyRoundRobinMatch.jsx":"37","/home/indiora/ATS/frontend/src/components/UI/SortebleTable/SortebleTable.jsx":"38","/home/indiora/ATS/frontend/src/components/UI/Round/round.jsx":"39","/home/indiora/ATS/frontend/src/components/UI/Match/Match.jsx":"40","/home/indiora/ATS/frontend/src/assets/svg/DownloadBracketIcon.jsx":"41","/home/indiora/ATS/frontend/src/assets/svg/MatchJudgeIcon.jsx":"42","/home/indiora/ATS/frontend/src/assets/svg/MatchInfoIcon.jsx":"43","/home/indiora/ATS/frontend/src/components/UI/SortebleTable/TableBody.jsx":"44","/home/indiora/ATS/frontend/src/components/UI/SortebleTable/TableHead.jsx":"45","/home/indiora/ATS/frontend/src/components/UI/MyRadioButton/MyRadioButton.jsx":"46","/home/indiora/ATS/frontend/src/components/UI/Seed/seed.jsx":"47","/home/indiora/ATS/frontend/src/API/useAxios.js":"48","/home/indiora/ATS/frontend/src/components/UI/MyModal/MyModal.jsx":"49","/home/indiora/ATS/frontend/src/components/UI/MyDataList/MyDataList.jsx":"50","/home/indiora/ATS/frontend/src/serviceWorkerRegistration.js":"51","/home/indiora/ATS/frontend/src/assets/svg/MobileMenuIcon.jsx":"52","/home/indiora/ATS/frontend/src/pages/Register/Register.jsx":"53","/home/indiora/ATS/frontend/src/pages/Bracket/Bracket.jsx":"54","/home/indiora/ATS/frontend/src/pages/CreateBracket/CreateBracket.jsx":"55","/home/indiora/ATS/frontend/src/pages/CreateTournament/CreateTournament.jsx":"56","/home/indiora/ATS/frontend/src/pages/EditTournament/EditTournament.jsx":"57","/home/indiora/ATS/frontend/src/pages/Home/Home.jsx":"58","/home/indiora/ATS/frontend/src/pages/Tournament/Tournament.jsx":"59","/home/indiora/ATS/frontend/src/pages/Tournaments/Tournaments.jsx":"60","/home/indiora/ATS/frontend/src/pages/Profile/Profile.jsx":"61","/home/indiora/ATS/frontend/src/pages/Login/Login.jsx":"62","/home/indiora/ATS/frontend/src/pages/PasswordReset/PasswordReset.jsx":"63","/home/indiora/ATS/frontend/src/pages/PasswordResetConfirm/PasswordResetConfirm.jsx":"64","/home/indiora/ATS/frontend/src/assets/svg/DefaultTournamnetPoster.jsx":"65","/home/indiora/ATS/frontend/src/components/TournamentList/TournamentList.jsx":"66","/home/indiora/ATS/frontend/src/components/TournamentFilter/TournamentFilter.jsx":"67","/home/indiora/ATS/frontend/src/pages/Feedback/FeedBack.jsx":"68","/home/indiora/ATS/frontend/src/pages/Test/Test.jsx":"69","/home/indiora/ATS/frontend/src/store/store.js":"70","/home/indiora/ATS/frontend/src/store/bracket.js":"71","/home/indiora/ATS/frontend/src/store/tournament.js":"72","/home/indiora/ATS/frontend/src/services/api/bracketApi.js":"73","/home/indiora/ATS/frontend/src/components/Brackets/SE/SingleElimination.jsx":"74","/home/indiora/ATS/frontend/src/components/Brackets/RR/RoundRobin.jsx":"75","/home/indiora/ATS/frontend/src/components/Brackets/SW/Swiss.jsx":"76","/home/indiora/ATS/frontend/src/components/Brackets/Modals/EditModal/EditModal.jsx":"77","/home/indiora/ATS/frontend/src/components/Brackets/Modals/InfoModal/InfoModal.jsx":"78","/home/indiora/ATS/frontend/src/components/Brackets/DE/DoubleElimination.jsx":"79","/home/indiora/ATS/frontend/src/components/BracketController/BracketController.jsx":"80","/home/indiora/ATS/frontend/src/pages/CreateTournament/TournamentInfoInput/TournamentInfoInput.jsx":"81","/home/indiora/ATS/frontend/src/components/ModeratorsSettings/ModeratorSettings.jsx":"82","/home/indiora/ATS/frontend/src/services/api/auxiliaryApi.js":"83","/home/indiora/ATS/frontend/src/services/api/tournamentApi.js":"84","/home/indiora/ATS/frontend/src/services/api/profileApi.js":"85","/home/indiora/ATS/frontend/src/store/user.js":"86","/home/indiora/ATS/frontend/src/components/Brackets/DE/DoubleEliminationLow/DoubleEliminationLow.jsx":"87","/home/indiora/ATS/frontend/src/Variables.js":"88"},{"size":630,"mtime":1739622683331,"results":"89","hashOfConfig":"90"},{"size":603,"mtime":1739622682370,"results":"91","hashOfConfig":"90"},{"size":1074,"mtime":1739622682515,"results":"92","hashOfConfig":"90"},{"size":4061,"mtime":1739622683089,"results":"93","hashOfConfig":"90"},{"size":952,"mtime":1739622683049,"results":"94","hashOfConfig":"90"},{"size":2799,"mtime":1739624667062,"results":"95","hashOfConfig":"90"},{"size":2360,"mtime":1739622683665,"results":"96","hashOfConfig":"90"},{"size":1391,"mtime":1739622683257,"results":"97","hashOfConfig":"90"},{"size":3684,"mtime":1739622682449,"results":"98","hashOfConfig":"90"},{"size":3514,"mtime":1739622682415,"results":"99","hashOfConfig":"90"},{"size":1080,"mtime":1739622683063,"results":"100","hashOfConfig":"90"},{"size":317,"mtime":1739622683004,"results":"101","hashOfConfig":"90"},{"size":1081,"mtime":1739622682494,"results":"102","hashOfConfig":"90"},{"size":2641,"mtime":1738930125762,"results":"103","hashOfConfig":"90"},{"size":314,"mtime":1739622683784,"results":"104","hashOfConfig":"90"},{"size":473,"mtime":1739622683293,"results":"105","hashOfConfig":"90"},{"size":543,"mtime":1739622683299,"results":"106","hashOfConfig":"90"},{"size":162,"mtime":1739622682941,"results":"107","hashOfConfig":"90"},{"size":2005,"mtime":1739622682829,"results":"108","hashOfConfig":"90"},{"size":1314,"mtime":1739622682840,"results":"109","hashOfConfig":"90"},{"size":1973,"mtime":1739622682849,"results":"110","hashOfConfig":"90"},{"size":715,"mtime":1739622683319,"results":"111","hashOfConfig":"90"},{"size":3499,"mtime":1739622682793,"results":"112","hashOfConfig":"90"},{"size":1628,"mtime":1739622682408,"results":"113","hashOfConfig":"90"},{"size":920,"mtime":1739622682443,"results":"114","hashOfConfig":"90"},{"size":505,"mtime":1739622682502,"results":"115","hashOfConfig":"90"},{"size":742,"mtime":1739622682397,"results":"116","hashOfConfig":"90"},{"size":1508,"mtime":1739622682439,"results":"117","hashOfConfig":"90"},{"size":740,"mtime":1739622682491,"results":"118","hashOfConfig":"90"},{"size":1674,"mtime":1739622682429,"results":"119","hashOfConfig":"90"},{"size":1163,"mtime":1739622683266,"results":"120","hashOfConfig":"90"},{"size":333,"mtime":1739622683018,"results":"121","hashOfConfig":"90"},{"size":3542,"mtime":1739622682380,"results":"122","hashOfConfig":"90"},{"size":655,"mtime":1706802668095,"results":"123","hashOfConfig":"90"},{"size":624,"mtime":1706792673332,"results":"124","hashOfConfig":"90"},{"size":5331,"mtime":1739622682919,"results":"125","hashOfConfig":"90"},{"size":11565,"mtime":1739622683159,"results":"126","hashOfConfig":"90"},{"size":2361,"mtime":1739622683227,"results":"127","hashOfConfig":"90"},{"size":780,"mtime":1739622683203,"results":"128","hashOfConfig":"90"},{"size":12914,"mtime":1739622682988,"results":"129","hashOfConfig":"90"},{"size":572,"mtime":1739622682402,"results":"130","hashOfConfig":"90"},{"size":1131,"mtime":1739622682424,"results":"131","hashOfConfig":"90"},{"size":2224,"mtime":1739622682419,"results":"132","hashOfConfig":"90"},{"size":958,"mtime":1739622683237,"results":"133","hashOfConfig":"90"},{"size":1410,"mtime":1739622683245,"results":"134","hashOfConfig":"90"},{"size":1243,"mtime":1739622683115,"results":"135","hashOfConfig":"90"},{"size":3270,"mtime":1739622683213,"results":"136","hashOfConfig":"90"},{"size":1119,"mtime":1739622682361,"results":"137","hashOfConfig":"90"},{"size":454,"mtime":1739622683076,"results":"138","hashOfConfig":"90"},{"size":1675,"mtime":1739622683035,"results":"139","hashOfConfig":"90"},{"size":5851,"mtime":1739622683714,"results":"140","hashOfConfig":"90"},{"size":1602,"mtime":1739622682434,"results":"141","hashOfConfig":"90"},{"size":6403,"mtime":1739622683580,"results":"142","hashOfConfig":"90"},{"size":3037,"mtime":1739622683343,"results":"143","hashOfConfig":"90"},{"size":17188,"mtime":1739622683383,"results":"144","hashOfConfig":"90"},{"size":24375,"mtime":1739622683437,"results":"145","hashOfConfig":"90"},{"size":7486,"mtime":1739622683476,"results":"146","hashOfConfig":"90"},{"size":5629,"mtime":1739622683511,"results":"147","hashOfConfig":"90"},{"size":12464,"mtime":1739702590533,"results":"148","hashOfConfig":"90"},{"size":3316,"mtime":1739622683656,"results":"149","hashOfConfig":"90"},{"size":12751,"mtime":1739622683562,"results":"150","hashOfConfig":"90"},{"size":3647,"mtime":1739622683522,"results":"151","hashOfConfig":"90"},{"size":2196,"mtime":1739622683530,"results":"152","hashOfConfig":"90"},{"size":3645,"mtime":1739622683540,"results":"153","hashOfConfig":"90"},{"size":3513,"mtime":1739622682391,"results":"154","hashOfConfig":"90"},{"size":1433,"mtime":1739622682882,"results":"155","hashOfConfig":"90"},{"size":2305,"mtime":1739622682863,"results":"156","hashOfConfig":"90"},{"size":4045,"mtime":1739622683492,"results":"157","hashOfConfig":"90"},{"size":5663,"mtime":1739622683597,"results":"158","hashOfConfig":"90"},{"size":411,"mtime":1739622683729,"results":"159","hashOfConfig":"90"},{"size":1808,"mtime":1739622683724,"results":"160","hashOfConfig":"90"},{"size":1690,"mtime":1739622683739,"results":"161","hashOfConfig":"90"},{"size":833,"mtime":1739702461142,"results":"162","hashOfConfig":"90"},{"size":6693,"mtime":1739622682740,"results":"163","hashOfConfig":"90"},{"size":7825,"mtime":1739622682696,"results":"164","hashOfConfig":"90"},{"size":7812,"mtime":1739622682773,"results":"165","hashOfConfig":"90"},{"size":5341,"mtime":1739622682624,"results":"166","hashOfConfig":"90"},{"size":2319,"mtime":1739622682652,"results":"167","hashOfConfig":"90"},{"size":2018,"mtime":1739700674128,"results":"168","hashOfConfig":"90"},{"size":3015,"mtime":1739622682545,"results":"169","hashOfConfig":"90"},{"size":4506,"mtime":1739622683454,"results":"170","hashOfConfig":"90"},{"size":3209,"mtime":1739622682809,"results":"171","hashOfConfig":"90"},{"size":560,"mtime":1739702461142,"results":"172","hashOfConfig":"90"},{"size":1203,"mtime":1739702461142,"results":"173","hashOfConfig":"90"},{"size":1489,"mtime":1739702461142,"results":"174","hashOfConfig":"90"},{"size":859,"mtime":1739622683742,"results":"175","hashOfConfig":"90"},{"size":6907,"mtime":1739701157155,"results":"176","hashOfConfig":"90"},{"size":57,"mtime":1739702097922,"results":"177","hashOfConfig":"90"},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},"8cmx1n",{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"181"},{"filePath":"186","messages":"187","suppressedMessages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"181"},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"193","messages":"194","suppressedMessages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"196","messages":"197","suppressedMessages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"181"},{"filePath":"200","messages":"201","suppressedMessages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"203","messages":"204","suppressedMessages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"215","messages":"216","suppressedMessages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"181"},{"filePath":"219","messages":"220","suppressedMessages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"181"},{"filePath":"223","messages":"224","suppressedMessages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"226","messages":"227","suppressedMessages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"229","messages":"230","suppressedMessages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"232","messages":"233","suppressedMessages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"181"},{"filePath":"236","messages":"237","suppressedMessages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"239","messages":"240","suppressedMessages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"242","messages":"243","suppressedMessages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"245","messages":"246","suppressedMessages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"248","messages":"249","suppressedMessages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"251","messages":"252","suppressedMessages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"254","messages":"255","suppressedMessages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"257","messages":"258","suppressedMessages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"260","messages":"261","suppressedMessages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"263","messages":"264","suppressedMessages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"266","messages":"267","suppressedMessages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"269","messages":"270","suppressedMessages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"272","messages":"273","suppressedMessages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"275","messages":"276","suppressedMessages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"278","messages":"279","suppressedMessages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"281","messages":"282","suppressedMessages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"284","messages":"285","suppressedMessages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"288","messages":"289","suppressedMessages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"292"},{"filePath":"293","messages":"294","suppressedMessages":"295","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"296","messages":"297","suppressedMessages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299","usedDeprecatedRules":"181"},{"filePath":"300","messages":"301","suppressedMessages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"181"},{"filePath":"304","messages":"305","suppressedMessages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"307","messages":"308","suppressedMessages":"309","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"310","usedDeprecatedRules":"181"},{"filePath":"311","messages":"312","suppressedMessages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"314","messages":"315","suppressedMessages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"317","messages":"318","suppressedMessages":"319","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"320","messages":"321","suppressedMessages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"181"},{"filePath":"324","messages":"325","suppressedMessages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"327","messages":"328","suppressedMessages":"329","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"330","messages":"331","suppressedMessages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"333","messages":"334","suppressedMessages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"336","messages":"337","suppressedMessages":"338","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"181"},{"filePath":"340","messages":"341","suppressedMessages":"342","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343","usedDeprecatedRules":"181"},{"filePath":"344","messages":"345","suppressedMessages":"346","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"347","messages":"348","suppressedMessages":"349","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"350","messages":"351","suppressedMessages":"352","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"181"},{"filePath":"354","messages":"355","suppressedMessages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"181"},{"filePath":"358","messages":"359","suppressedMessages":"360","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361","usedDeprecatedRules":"181"},{"filePath":"362","messages":"363","suppressedMessages":"364","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"365","usedDeprecatedRules":"181"},{"filePath":"366","messages":"367","suppressedMessages":"368","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"369","usedDeprecatedRules":"181"},{"filePath":"370","messages":"371","suppressedMessages":"372","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"373","usedDeprecatedRules":"181"},{"filePath":"374","messages":"375","suppressedMessages":"376","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"377","messages":"378","suppressedMessages":"379","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"380","usedDeprecatedRules":"181"},{"filePath":"381","messages":"382","suppressedMessages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"384","usedDeprecatedRules":"181"},{"filePath":"385","messages":"386","suppressedMessages":"387","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"388","usedDeprecatedRules":"181"},{"filePath":"389","messages":"390","suppressedMessages":"391","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"392","usedDeprecatedRules":"181"},{"filePath":"393","messages":"394","suppressedMessages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"396","usedDeprecatedRules":"181"},{"filePath":"397","messages":"398","suppressedMessages":"399","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"400","messages":"401","suppressedMessages":"402","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"403","messages":"404","suppressedMessages":"405","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"406","usedDeprecatedRules":"181"},{"filePath":"407","messages":"408","suppressedMessages":"409","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"410","usedDeprecatedRules":"181"},{"filePath":"411","messages":"412","suppressedMessages":"413","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"414","usedDeprecatedRules":"181"},{"filePath":"415","messages":"416","suppressedMessages":"417","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"418","messages":"419","suppressedMessages":"420","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"421","usedDeprecatedRules":"181"},{"filePath":"422","messages":"423","suppressedMessages":"424","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"425","usedDeprecatedRules":"181"},{"filePath":"426","messages":"427","suppressedMessages":"428","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"429","messages":"430","suppressedMessages":"431","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"432","usedDeprecatedRules":"181"},{"filePath":"433","messages":"434","suppressedMessages":"435","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"436","usedDeprecatedRules":"181"},{"filePath":"437","messages":"438","suppressedMessages":"439","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"440","usedDeprecatedRules":"181"},{"filePath":"441","messages":"442","suppressedMessages":"443","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"444","usedDeprecatedRules":"181"},{"filePath":"445","messages":"446","suppressedMessages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"448","usedDeprecatedRules":"181"},{"filePath":"449","messages":"450","suppressedMessages":"451","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"452","messages":"453","suppressedMessages":"454","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"455","usedDeprecatedRules":"181"},{"filePath":"456","messages":"457","suppressedMessages":"458","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"459","usedDeprecatedRules":"181"},{"filePath":"460","messages":"461","suppressedMessages":"462","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"463","usedDeprecatedRules":"181"},{"filePath":"464","messages":"465","suppressedMessages":"466","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"467","messages":"468","suppressedMessages":"469","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"470","messages":"471","suppressedMessages":"472","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"473","messages":"474","suppressedMessages":"475","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"476","usedDeprecatedRules":"181"},{"filePath":"477","messages":"478","suppressedMessages":"479","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"480","messages":"481","suppressedMessages":"482","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/indiora/ATS/frontend/src/index.js",[],[],[],"/home/indiora/ATS/frontend/src/App.js",["483","484","485","486"],[],"import React, { useEffect, useState } from \"react\";\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\nimport MyNavbar from \"./components/UI/MyNavbar/MyNavbar\";\nimport MyFooter from \"./components/UI/MyFooter/MyFooter\";\nimport AppRouter from \"./components/AppRouter\";\nimport \"./styles/App.css\";\nimport { AuthProvider } from \"./context\";\n\nfunction App() {\n    return (\n        <BrowserRouter>\n            <AuthProvider>\n                <MyNavbar />\n                <AppRouter />\n                <MyFooter />\n            </AuthProvider>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","/home/indiora/ATS/frontend/src/components/AppRouter.jsx",["487"],[],"import React, { useContext } from \"react\";\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\nimport { privateRoutes, publicRoutes } from \"../router\";\nimport { AuthContext } from \"../context\";\nimport Login from \"../pages/Login/Login\";\n\nfunction AppRouter() {\n    const { user } = useContext(AuthContext);\n    return user ? (\n        <Routes>\n            {privateRoutes.map((route) => (\n                <Route path={route.path} element={route.element} exact={route.exact} key={route.path} />\n            ))}\n            <Route\n                path=\"*\"\n                element={\n                    <main style={{ padding: \"1rem\" }}>\n                        <p>There's nothing here!</p>\n                    </main>\n                }\n            />\n        </Routes>\n    ) : (\n        <Routes>\n            {publicRoutes.map((route) => (\n                <Route path={route.path} element={route.element} exact={route.exact} key={route.path} />\n            ))}\n            <Route path=\"*\" element={<Login />} />\n        </Routes>\n    );\n}\n\nexport default AppRouter;\n","/home/indiora/ATS/frontend/src/components/UI/MyNavbar/MyNavbar.jsx",[],[],"/home/indiora/ATS/frontend/src/components/UI/MyFooter/MyFooter.jsx",[],[],"/home/indiora/ATS/frontend/src/context/index.js",["488","489"],[],"import { createContext, useState, useEffect } from \"react\";\nimport jwt_decode from \"jwt-decode\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\n\nexport const AuthContext = createContext(null);\n\nexport const ThemeContext = createContext(null);\n\nconst baseURL = \"http://127.0.0.1:8000/api/v1\";\nconst api = axios;\n\nexport const AuthProvider = ({ children }) => {\n    const [authTokens, setAuthTokens] = useState(() =>\n        localStorage.getItem(\"authTokens\") ? JSON.parse(localStorage.getItem(\"authTokens\")) : null,\n    );\n    const [user, setUser] = useState(() =>\n        localStorage.getItem(\"authTokens\") ? jwt_decode(localStorage.getItem(\"authTokens\")) : null,\n    );\n    const [loading, setLoading] = useState(true);\n\n    const navigate = useNavigate();\n\n    const loginUser = async (email, password) => {\n        const response = await fetch(`${baseURL}/token/`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                email,\n                password,\n            }),\n        });\n        const data = await response.json();\n\n        if (response.status === 200) {\n            setAuthTokens(data);\n            setUser(jwt_decode(data.access));\n            localStorage.setItem(\"authTokens\", JSON.stringify(data));\n            navigate(\"/\");\n        } else {\n            // alert(\"Something went wrong!\");\n        }\n    };\n\n    const registerUser = async (username, email, password, password2) => {\n        let body = {\n            username: username,\n            email: email,\n            password: password,\n            password2: password2,\n        };\n        console.log(\"body\", body);\n\n        const response = await axios\n            .post(`${baseURL}/register/`, body, {\n                validateStatus: function (status) {\n                    return status == 201;\n                },\n            })\n            .then((response) => {\n                setTimeout(() => {\n                    loginUser(email, password);\n                }, 3000);\n                // loginUser(email, password)\n            });\n\n        return response;\n    };\n\n    const logoutUser = () => {\n        setAuthTokens(null);\n        setUser(null);\n        localStorage.removeItem(\"authTokens\");\n        navigate(\"/\");\n    };\n\n    const contextData = {\n        user,\n        setUser,\n        authTokens,\n        setAuthTokens,\n        registerUser,\n        loginUser,\n        logoutUser,\n    };\n\n    useEffect(() => {\n        if (authTokens) {\n            setUser(jwt_decode(authTokens.access));\n        }\n        setLoading(false);\n    }, [authTokens, loading]);\n\n    return <AuthContext.Provider value={contextData}>{loading ? null : children}</AuthContext.Provider>;\n};\n","/home/indiora/ATS/frontend/src/router/index.js",[],[],"/home/indiora/ATS/frontend/src/components/UI/ThemeSwitcher/ThemeSwitcher.jsx",[],[],"/home/indiora/ATS/frontend/src/assets/svg/SettingIcon.jsx",[],[],"/home/indiora/ATS/frontend/src/assets/svg/HomeIcon.jsx",[],[],"/home/indiora/ATS/frontend/src/components/UI/MyFormGroupInput/MyFormGroupInput.jsx",[],[],"/home/indiora/ATS/frontend/src/components/UI/MyButton/MyButton.jsx",["490"],[],"import React, { useState } from \"react\";\nimport classes from \"./MyButton.module.css\";\n\nconst MyButton = ({ additionalCl, children, ...props }) => {\n    return (\n        <button {...props} className={`btn ${classes.myBtn} ${additionalCl}`}>\n            {children}\n        </button>\n    );\n};\n\nexport default MyButton;\n","/home/indiora/ATS/frontend/src/assets/svg/ThemeSwitcherIcon.jsx",["491"],[],"import React from \"react\";\nimport classes from \"./Svg.module.css\";\n\nfunction ThemeSwitcherIcon() {\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"16\"\n            height=\"16\"\n            fill=\"currentColor\"\n            className={`${\"bi\"} ${\"bi-brightness-high-fill\"}`}\n            viewBox=\"0 0 16 16\"\n        >\n            <path d=\"M12 8a4 4 0 1 1-8 0 4 4 0 0 1 8 0zM8 0a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 0zm0 13a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 13zm8-5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 .5.5zM3 8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2A.5.5 0 0 1 3 8zm10.657-5.657a.5.5 0 0 1 0 .707l-1.414 1.415a.5.5 0 1 1-.707-.708l1.414-1.414a.5.5 0 0 1 .707 0zm-9.193 9.193a.5.5 0 0 1 0 .707L3.05 13.657a.5.5 0 0 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0zm9.193 2.121a.5.5 0 0 1-.707 0l-1.414-1.414a.5.5 0 0 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .707zM4.464 4.465a.5.5 0 0 1-.707 0L2.343 3.05a.5.5 0 1 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .708z\" />\n        </svg>\n    );\n}\n\nexport default ThemeSwitcherIcon;\n","/home/indiora/ATS/frontend/src/API/PostService.js",["492","493","494"],[],"/home/indiora/ATS/frontend/src/utils/pages.js",[],[],"/home/indiora/ATS/frontend/src/hooks/useFetching.jsx",[],[],"/home/indiora/ATS/frontend/src/hooks/useObserver.jsx",["495"],[],"import { useRef, useEffect } from \"react\";\n\nexport const useObserver = (ref, canLoad, isLoading, callback) => {\n    const observer = useRef();\n    useEffect(() => {\n        if (isLoading) return;\n        if (observer.current) observer.current.disconnect();\n\n        var cb = function (entries, observer) {\n            if (entries[0].isIntersecting && canLoad) {\n                callback();\n            }\n        };\n        observer.current = new IntersectionObserver(cb);\n        observer.current.observe(ref.current);\n    }, [isLoading]);\n};\n","/home/indiora/ATS/frontend/src/components/UI/Loader/Loader.jsx",[],[],"/home/indiora/ATS/frontend/src/components/RoundRobin.jsx",[],[],"/home/indiora/ATS/frontend/src/components/SingleEl.jsx",[],[],"/home/indiora/ATS/frontend/src/components/Swiss.jsx",[],[],"/home/indiora/ATS/frontend/src/hooks/useTournaments.jsx",[],[],"/home/indiora/ATS/frontend/src/components/DoubleEl.jsx",[],[],"/home/indiora/ATS/frontend/src/assets/svg/ExpImageIcon.jsx",[],[],"/home/indiora/ATS/frontend/src/assets/svg/SEIcon.jsx",[],[],"/home/indiora/ATS/frontend/src/assets/svg/TimeManagmentIcon.jsx",[],[],"/home/indiora/ATS/frontend/src/assets/svg/DEIcon.jsx",[],[],"/home/indiora/ATS/frontend/src/assets/svg/RRIcon.jsx",[],[],"/home/indiora/ATS/frontend/src/assets/svg/SWIcon.jsx",[],[],"/home/indiora/ATS/frontend/src/assets/svg/MLStageIcon.jsx",[],[],"/home/indiora/ATS/frontend/src/components/UI/UploadButton/UploadButton.jsx",[],[],"/home/indiora/ATS/frontend/src/components/UI/MyCard/MyCard.jsx",[],[],"/home/indiora/ATS/frontend/src/assets/svg/DefaultTournamentIcon.jsx",[],[],"/home/indiora/ATS/frontend/src/components/UI/Pagination/Pagination.jsx",[],[],[],"/home/indiora/ATS/frontend/src/components/UI/MySelect/MySelect.jsx",["496"],[],"import React, {useState} from \"react\";\n\n\nconst MySelect = ({options, defaultValue, value, onChange}) => { \n\n    return (\n        <select \n            Style=\"background: rgb(33, 37, 41); border-color: #1D8044; color: grey; border-radius: 4px; padding: 8px;\"\n            value={value}\n            onChange={event => onChange(event.target.value)}\n        >\n            <option value='' disabled>{defaultValue}</option>\n            {options.map(option =>\n                     <option key={option.value} value={option.value}>{option.name}</option>\n            )}\n            \n        </select>\n    );\n};\n\nexport default MySelect;",[],"/home/indiora/ATS/frontend/src/components/UI/BracketWrapper/BracketWrapper.jsx",[],[],"/home/indiora/ATS/frontend/src/components/UI/MyRoundRobinMatch/MyRoundRobinMatch.jsx",["497","498","499","500","501","502","503","504","505","506","507","508","509"],[],"import React, { useState, useContext } from \"react\";\nimport classes from \"./MyRoundRobinMatch.module.css\";\nimport MyModal from \"../MyModal/MyModal\";\nimport Modal from \"react-bootstrap/Modal\";\nimport MyButton from \"../MyButton/MyButton\";\nimport useAxios from \"../../../API/useAxios\";\nimport { useForm } from \"react-hook-form\";\nimport MyRadioButton from \"../MyRadioButton/MyRadioButton\";\nimport { AuthContext } from \"../../../context\";\nimport moment from \"moment\";\nimport MatchInfoIcon from \"../../../assets/svg/MatchInfoIcon\";\nimport MatchJudgeIcon from \"../../../assets/svg/MatchJudgeIcon\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nconst MyRoundRobinMatch = ({ id, match, match_id, round_id, onPatch, owner }) => {\n    const [modalShow, setMatchCardModalShow] = useState(false);\n    const [modalEditShow, setEditMatchCardModalShow] = useState(false);\n    const [matchState, setMatchState] = useState(match.state);\n    const [matchTime, setMatchTime] = useState(match.startTime);\n    const [userOne, setUserOne] = useState(match.participants[0].participant);\n    const [userTwo, setuserTwo] = useState(match.participants[1].participant);\n    const tournament = useSelector((state) => state.tournament);\n    const [userOneResult, setUserOneResult] = useState(match.participants[0].score);\n    const [userTwoResult, setUserTwoResult] = useState(match.participants[1].score);\n    const { user } = useContext(AuthContext);\n    const api = useAxios();\n\n    const {\n        register,\n        handleSubmit,\n        formState: { errors },\n        reset,\n    } = useForm({ mode: \"onBlur\" });\n\n    const hoverOnMatch = (id) => {\n        const elements = document.querySelectorAll(`[id=${id}]`);\n        for (let elem of elements) {\n            elem.classList.remove(classes.side);\n            elem.classList.add(classes.hoverSide);\n        }\n    };\n\n    const matchStateHandler = (state) => {\n        setMatchState(state);\n    };\n\n    const matchTimeHandler = (e) => {\n        e.preventDefault();\n        setMatchTime(e.target.value);\n    };\n\n    const inputUserOneHandler = (e) => {\n        e.preventDefault();\n        setUserOne(e.target.value);\n    };\n\n    const inputUserTwoHandler = (e) => {\n        e.preventDefault();\n        setuserTwo(e.target.value);\n    };\n\n    const inputUserOneResultHandler = (e) => {\n        e.preventDefault();\n        setUserOneResult(e.target.value);\n    };\n\n    const inputUserTwoResultHandler = (e) => {\n        e.preventDefault();\n        setUserTwoResult(e.target.value);\n    };\n\n    const hoverOffMatch = (id) => {\n        const elements = document.querySelectorAll(`[id=${id}]`);\n        for (let elem of elements) {\n            elem.classList.remove(classes.hoverSide);\n            elem.classList.add(classes.side);\n        }\n    };\n\n    const onSubmitHandler = () => {\n        const response = api\n            .patch(`/update_bracket/${id}/`, {\n                id: match.id,\n                tournamentRoundText: \"test\",\n                startTime: matchTime,\n                state: matchState,\n                match_id: match_id,\n                round_id: round_id,\n                participants: [\n                    {\n                        id: match.participants[0].id,\n                        isWinner: userOneResult > userTwoResult && matchState == \"PLAYED\" ? true : false,\n                        participant: match.participants[0].participant,\n                        picture: null,\n                        score: userOneResult,\n                    },\n                    {\n                        id: match.participants[1].id,\n                        isWinner: userOneResult < userTwoResult && matchState == \"PLAYED\" ? true : false,\n                        participant: match.participants[1].participant,\n                        picture: null,\n                        score: userTwoResult,\n                    },\n                ],\n            })\n            .then(function (res) {\n                onPatch(res.data.bracket);\n            });\n        setEditMatchCardModalShow(false);\n    };\n\n    return (\n        <div className=\"col-3\">\n            <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n                <div className={classes.topText}>\n                    {moment.parseZone(match.startTime).format(\"Do MMMM h:mm a\") || \"\"}\n                </div>\n            </div>\n            <div className={classes.myMatch}>\n                <div id={`id${match.participants[0].participant}`} className={classes.side}>\n                    <div\n                        className={classes.parName}\n                        onMouseEnter={(e) => {\n                            hoverOnMatch(`id${match.participants[0].participant}`);\n                        }}\n                        onMouseLeave={(e) => {\n                            hoverOffMatch(`id${match.participants[0].participant}`);\n                        }}\n                    >\n                        {match.participants[0].participant}\n                    </div>\n                    <div\n                        onMouseEnter={(e) => {\n                            hoverOnMatch(`id${match.participants[0].participant}`);\n                        }}\n                        onMouseLeave={(e) => {\n                            hoverOffMatch(`id${match.participants[0].participant}`);\n                        }}\n                        className={classes.score}\n                    >\n                        {match.participants[0].score}\n                    </div>\n                </div>\n                <div id={`id${match.participants[1].participant}`} className={classes.side}>\n                    <div\n                        className={classes.parName}\n                        onMouseEnter={(e) => {\n                            hoverOnMatch(`id${match.participants[1].participant}`);\n                        }}\n                        onMouseLeave={(e) => {\n                            hoverOffMatch(`id${match.participants[1].participant}`);\n                        }}\n                    >\n                        {match.participants[1].participant}\n                    </div>\n                    <div\n                        onMouseEnter={(e) => {\n                            hoverOnMatch(`id${match.participants[1].participant}`);\n                        }}\n                        onMouseLeave={(e) => {\n                            hoverOffMatch(`id${match.participants[1].participant}`);\n                        }}\n                        className={classes.score}\n                    >\n                        {match.participants[1].score}\n                    </div>\n                </div>\n            </div>\n            <div className={`${classes.buttonDiv} p-1`}>\n                {user !== null && (owner == user.username || tournament.moderators.includes(user.username)) ? (\n                    <>\n                        <button onClick={() => setMatchCardModalShow(true)} className={classes.iconButton}>\n                            <MatchInfoIcon />\n                        </button>\n                        <button onClick={() => setEditMatchCardModalShow(true)} className={classes.iconButton}>\n                            <MatchJudgeIcon />\n                        </button>\n                    </>\n                ) : (\n                    <button onClick={() => setMatchCardModalShow(true)} className={classes.iconButton}>\n                        <MatchInfoIcon />\n                    </button>\n                )}\n            </div>\n            <MyModal show={modalShow} onHide={() => setMatchCardModalShow(false)}>\n                <Modal.Header closeButton className={classes.myModalHeader}>\n                    <div className={classes.matchTitle}>{match.startTime}</div>\n                </Modal.Header>\n                <Modal.Body className={classes.myModalBody}>\n                    <div className={classes.divVS}>\n                        <div className=\"row align-items-center\">\n                            <div className=\"col\">{match.participants[0].participant}</div>\n                            <div className=\"col\"></div>\n                            <div className=\"col\">{match.participants[1].participant}</div>\n                        </div>\n                        <div className=\"row align-items-center\">\n                            <div className=\"col\">{match.participants[0].score}</div>\n                            <div className=\"col\">\n                                <h4>VS</h4>\n                            </div>\n                            <div className=\"col\">{match.participants[1].score}</div>\n                        </div>\n                    </div>\n                </Modal.Body>\n            </MyModal>\n            <MyModal show={modalEditShow} onHide={() => setEditMatchCardModalShow(false)}>\n                <Modal.Header closeButton className={classes.myModalHeader}>\n                    <div className={classes.matchTitle}>\n                        <input\n                            className={classes.dateInput}\n                            onChange={(e) => matchTimeHandler(e)}\n                            type=\"datetime-local\"\n                            defaultValue={match.startTime}\n                        />\n                    </div>\n                </Modal.Header>\n                <Modal.Body className={classes.myModalBody}>\n                    <div className={classes.divVS}>\n                        <div className=\"row align-items-center\">\n                            <div className={`col`}>{match.participants[0].participant}</div>\n                            <div className=\"col\"></div>\n                            <div className=\"col\">{match.participants[1].participant}</div>\n                        </div>\n                        <div className=\"row align-items-center mb-4\">\n                            <div className={`col`}>\n                                <input\n                                    className={classes.myInput}\n                                    onChange={(e) => inputUserOneResultHandler(e)}\n                                    type=\"number\"\n                                    defaultValue={match.participants[0].score}\n                                />\n                            </div>\n                            <div className=\"col\">\n                                <h4>VS</h4>\n                            </div>\n                            <div className=\"col\">\n                                <input\n                                    className={classes.myInput}\n                                    onChange={(e) => inputUserTwoResultHandler(e)}\n                                    type=\"number\"\n                                    defaultValue={match.participants[1].score}\n                                />\n                            </div>\n                        </div>\n                        <p>Set State</p>\n                        <div>\n                            <MyRadioButton\n                                defValue={matchState}\n                                radios={[\n                                    { name: \"Scheduled\", value: \"SCHEDULED\" },\n                                    { name: \"Played\", value: \"PLAYED\" },\n                                ]}\n                                onChange={matchStateHandler}\n                            />\n                        </div>\n                        <br />\n                        <MyButton onClick={onSubmitHandler}>Submit</MyButton>\n                    </div>\n                </Modal.Body>\n            </MyModal>\n        </div>\n    );\n};\n\nexport default MyRoundRobinMatch;\n","/home/indiora/ATS/frontend/src/components/UI/SortebleTable/SortebleTable.jsx",["510"],[],"import React, { useState, useEffect } from \"react\";\nimport TableBody from \"./TableBody\";\nimport TableHead from \"./TableHead\";\n\nconst MySortebleTable = ({ table, columns }) => {\n    // const data = ([{participant: \"aboba\", match_w_l: [0, 0], win: 1, loose: 1, draw: 1, scores: 4 },\n    //                 { participant: \"ibib\", match_w_l: [1, 2], win: 1, loose: 2, scores: 2 },\n    //                 { participant: \"lulu\", match_w_l: [3, 0], win: 1, loose: 0,  scores: 5 },\n    //               ]);\n\n    // const [tableData, handleSorting] =useSortableTable(table, columns)\n\n    useEffect(() => {\n        setTableData(getDefaultSorting(table, columns));\n    }, [table]);\n\n    const [tableData, setTableData] = useState(getDefaultSorting(table, columns));\n\n    function getDefaultSorting(defaultTableData, columns) {\n        const sorted = [...defaultTableData].sort((a, b) => {\n            const filterColumn = columns.filter((column) => column.sortbyOrder);\n\n            let { accessor = \"id\", sortbyOrder = \"asc\" } = Object.assign({}, ...filterColumn);\n\n            if (a[accessor] === null) return 1;\n            if (b[accessor] === null) return -1;\n            if (a[accessor] === null && b[accessor] === null) return 0;\n\n            const ascending = a[accessor].toString().localeCompare(b[accessor].toString(), \"en\", {\n                numeric: true,\n            });\n\n            return sortbyOrder === \"asc\" ? ascending : -ascending;\n        });\n        return sorted;\n    }\n\n    const handleSorting = (sortField, sortOrder) => {\n        if (sortField) {\n            const sorted = [...tableData].sort((a, b) => {\n                if (a[sortField] === null) return 1;\n                if (b[sortField] === null) return -1;\n                if (a[sortField] === null && b[sortField] === null) return 0;\n                return (\n                    a[sortField].toString().localeCompare(b[sortField].toString(), \"en\", {\n                        numeric: true,\n                    }) * (sortOrder === \"asc\" ? 1 : -1)\n                );\n            });\n            setTableData(sorted);\n        }\n    };\n\n    return (\n        <>\n            <table className=\"table\">\n                <TableHead {...{ columns, handleSorting }} />\n                <TableBody {...{ columns, tableData }} />\n            </table>\n        </>\n    );\n};\n\nexport default MySortebleTable;\n","/home/indiora/ATS/frontend/src/components/UI/Round/round.jsx",[],[],"/home/indiora/ATS/frontend/src/components/UI/Match/Match.jsx",["511","512","513","514","515"],[],"import React, { useState, useContext, useEffect } from \"react\";\nimport { Seed, SeedItem, SeedTeam, SeedTime, SingleLineSeed } from \"../Seed/seed\";\nimport classes from \"./Match.module.css\";\nimport MyModal from \"../MyModal/MyModal\";\nimport Modal from \"react-bootstrap/Modal\";\nimport MyButton from \"../MyButton/MyButton\";\nimport useAxios from \"../../../API/useAxios\";\nimport { AuthContext } from \"../../../context\";\nimport MyRadioButton from \"../MyRadioButton/MyRadioButton\";\nimport moment from \"moment\";\nimport MatchInfoIcon from \"../../../assets/svg/MatchInfoIcon\";\nimport MatchJudgeIcon from \"../../../assets/svg/MatchJudgeIcon\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nconst MyMatch = ({ id, seed, onPatch, match_id, round_id, owner, single = false }) => {\n    const [modalShow, setMatchCardModalShow] = useState(false);\n    const [modalEditShow, setEditMatchCardModalShow] = useState(false);\n    const [matchState, setMatchState] = useState(seed.state);\n    const [matchTime, setMatchTime] = useState(seed.startTime);\n    const [userOneResult, setUserOneResult] = useState(seed.teams[0].score);\n    const [userTwoResult, setUserTwoResult] = useState(seed.teams[1].score);\n    const { user } = useContext(AuthContext);\n    const api = useAxios();\n    const tournament = useSelector((state) => state.tournament);\n\n    useEffect(() => {\n        setMatchState(seed.state);\n        setUserOneResult(seed.teams[0].score);\n        setUserTwoResult(seed.teams[1].score);\n        setMatchTime(seed.startTime);\n    }, [seed]);\n\n    const hoverOnMatch = (id) => {\n        const elements = document.querySelectorAll(`[id=${id}]`);\n        for (let elem of elements) {\n            elem.classList.remove(classes.side);\n            elem.classList.add(classes.hoverSide);\n        }\n    };\n\n    const hoverOffMatch = (id) => {\n        const elements = document.querySelectorAll(`[id=${id}]`);\n        for (let elem of elements) {\n            elem.classList.remove(classes.hoverSide);\n            elem.classList.add(classes.side);\n        }\n    };\n\n    const matchStateHandler = (state) => {\n        setMatchState(state);\n    };\n\n    const matchTimeHandler = (e) => {\n        e.preventDefault();\n        setMatchTime(e.target.value);\n    };\n\n    const inputUserOneResultHandler = (e) => {\n        e.preventDefault();\n        setUserOneResult(e.target.value);\n    };\n\n    const inputUserTwoResultHandler = (e) => {\n        e.preventDefault();\n        setUserTwoResult(e.target.value);\n    };\n\n    const onSubmitHandler = () => {\n        const response = api\n            .patch(`/update_bracket/${id}/`, {\n                id: seed.id,\n                startTime: matchTime,\n                state: matchState,\n                match_id: match_id,\n                round_id: round_id,\n                teams: [\n                    {\n                        id: seed.teams[0].id,\n                        participant: seed.teams[0].participant,\n                        score: userOneResult,\n                    },\n                    {\n                        id: seed.teams[1].id,\n                        participant: seed.teams[1].participant,\n                        score: userTwoResult,\n                    },\n                ],\n            })\n            .then(function (res) {\n                onPatch(res.data.bracket);\n            });\n        setEditMatchCardModalShow(false);\n    };\n\n    return (\n        <>\n            {single ? (\n                <SingleLineSeed mobileBreakpoint={992} style={{ fontSize: 14 }}>\n                    <div>{moment.parseZone(seed.startTime).format(\"Do MMMM h:mm a\") || \"\"}</div>\n                    <SeedItem>\n                        <div\n                            id={`id${seed.teams[0]?.id}`}\n                            className={classes.side}\n                            onMouseEnter={(e) => {\n                                hoverOnMatch(`id${seed.teams[0]?.id}`);\n                            }}\n                            onMouseLeave={(e) => {\n                                hoverOffMatch(`id${seed.teams[0]?.id}`);\n                            }}\n                        >\n                            <SeedTeam>\n                                {seed.teams[0]?.participant || \"NO TEAM \"}\n                                <span>{seed.teams[0].score}</span>\n                            </SeedTeam>\n                        </div>\n                        <div\n                            id={`id${seed.teams[1]?.id}`}\n                            className={classes.side}\n                            onMouseEnter={(e) => {\n                                hoverOnMatch(`id${seed.teams[1]?.id}`);\n                            }}\n                            onMouseLeave={(e) => {\n                                hoverOffMatch(`id${seed.teams[1]?.id}`);\n                            }}\n                        >\n                            <SeedTeam>\n                                {seed.teams[1]?.participant || \"NO TEAM \"}\n                                <span>{seed.teams[1].score}</span>\n                            </SeedTeam>\n                        </div>\n                    </SeedItem>\n                    <div className={`${classes.buttonDiv} p-1`}>\n                        {user !== null && (owner == user.username || tournament.moderators.includes(user.username)) ? (\n                            <>\n                                <button onClick={() => setMatchCardModalShow(true)} className={classes.iconButton}>\n                                    <MatchInfoIcon />\n                                </button>\n                                <button onClick={() => setEditMatchCardModalShow(true)} className={classes.iconButton}>\n                                    <MatchJudgeIcon />\n                                </button>\n                            </>\n                        ) : (\n                            <button onClick={() => setMatchCardModalShow(true)} className={classes.iconButton}>\n                                <MatchInfoIcon />\n                            </button>\n                        )}\n                    </div>\n                </SingleLineSeed>\n            ) : (\n                <Seed mobileBreakpoint={992} style={{ fontSize: 14 }}>\n                    <div>{moment.parseZone(seed.startTime).format(\"Do MMMM h:mm a\") || \"\"}</div>\n                    <SeedItem>\n                        <div\n                            id={`id${seed.teams[0]?.id}`}\n                            className={classes.side}\n                            onMouseEnter={(e) => {\n                                hoverOnMatch(`id${seed.teams[0]?.id}`);\n                            }}\n                            onMouseLeave={(e) => {\n                                hoverOffMatch(`id${seed.teams[0]?.id}`);\n                            }}\n                        >\n                            <SeedTeam>\n                                {seed.teams[0]?.participant || \"NO TEAM \"}\n                                <span>{seed.teams[0].score}</span>\n                            </SeedTeam>\n                        </div>\n                        <div\n                            id={`id${seed.teams[1]?.id}`}\n                            className={classes.side}\n                            onMouseEnter={(e) => {\n                                hoverOnMatch(`id${seed.teams[1]?.id}`);\n                            }}\n                            onMouseLeave={(e) => {\n                                hoverOffMatch(`id${seed.teams[1]?.id}`);\n                            }}\n                        >\n                            <SeedTeam>\n                                {seed.teams[1]?.participant || \"NO TEAM \"}\n                                <span>{seed.teams[1].score}</span>\n                            </SeedTeam>\n                        </div>\n                    </SeedItem>\n                    <div className={`${classes.buttonDiv} p-1`}>\n                        {user !== null && (owner == user.username || tournament.moderators.includes(user.username)) ? (\n                            <>\n                                <button onClick={() => setMatchCardModalShow(true)} className={classes.iconButton}>\n                                    <MatchInfoIcon />\n                                </button>\n                                <button onClick={() => setEditMatchCardModalShow(true)} className={classes.iconButton}>\n                                    <MatchJudgeIcon />\n                                </button>\n                            </>\n                        ) : (\n                            <button onClick={() => setMatchCardModalShow(true)} className={classes.iconButton}>\n                                <MatchInfoIcon />\n                            </button>\n                        )}\n                    </div>\n                </Seed>\n            )}\n            <MyModal show={modalShow} onHide={() => setMatchCardModalShow(false)}>\n                <Modal.Header closeButton className={classes.myModalHeader}>\n                    <div className={classes.matchTitle}>{moment(seed.startTime).format(\"dddd HH:mm\") || \"\"}</div>\n                </Modal.Header>\n                <Modal.Body className={classes.myModalBody}>\n                    <div className={classes.divVS}>\n                        <div className=\"row align-items-center\">\n                            <div className=\"col\">{seed.teams[0]?.participant || \"NO TEAM \"}</div>\n                            <div className=\"col\"></div>\n                            <div className=\"col\">{seed.teams[1]?.participant || \"NO TEAM \"}</div>\n                        </div>\n                        <div className=\"row align-items-center\">\n                            <div className=\"col\">{seed.teams[0].score}</div>\n                            <div className=\"col\">\n                                <h4>VS</h4>\n                            </div>\n                            <div className=\"col\">{seed.teams[1].score}</div>\n                        </div>\n                    </div>\n                </Modal.Body>\n            </MyModal>\n            <MyModal show={modalEditShow} onHide={() => setEditMatchCardModalShow(false)}>\n                <Modal.Header closeButton className={classes.myModalHeader}>\n                    <div className={classes.matchTitle}>\n                        <input\n                            className={classes.dateInput}\n                            onChange={(e) => matchTimeHandler(e)}\n                            type=\"datetime-local\"\n                            defaultValue={seed.startTime}\n                        />\n                    </div>\n                </Modal.Header>\n                <Modal.Body className={classes.myModalBody}>\n                    <div className={classes.divVS}>\n                        <div className=\"row align-items-center\">\n                            <div className={`col`}>{seed.teams[0]?.participant || \"NO TEAM \"}</div>\n                            <div className=\"col\"></div>\n                            <div className=\"col\">{seed.teams[1]?.participant || \"NO TEAM \"}</div>\n                        </div>\n                        <div className=\"row align-items-center mb-4\">\n                            <div className={`col`}>\n                                <input\n                                    className={classes.myInput}\n                                    onChange={(e) => inputUserOneResultHandler(e)}\n                                    type=\"text\"\n                                    defaultValue={userOneResult}\n                                />\n                            </div>\n                            <div className=\"col\">\n                                <h4>VS</h4>\n                            </div>\n                            <div className=\"col\">\n                                <input\n                                    className={classes.myInput}\n                                    onChange={(e) => inputUserTwoResultHandler(e)}\n                                    type=\"text\"\n                                    defaultValue={userTwoResult}\n                                />\n                            </div>\n                        </div>\n                        <p>Set State</p>\n                        <div>\n                            <MyRadioButton\n                                defValue={matchState}\n                                radios={[\n                                    { name: \"Scheduled\", value: \"SCHEDULED\" },\n                                    { name: \"Played\", value: \"PLAYED\" },\n                                ]}\n                                onChange={matchStateHandler}\n                            />\n                        </div>\n                        <br />\n                        <MyButton onClick={onSubmitHandler}>Submit</MyButton>\n                    </div>\n                </Modal.Body>\n            </MyModal>\n        </>\n    );\n};\n\nexport default MyMatch;\n","/home/indiora/ATS/frontend/src/assets/svg/DownloadBracketIcon.jsx",[],[],"/home/indiora/ATS/frontend/src/assets/svg/MatchJudgeIcon.jsx",[],[],"/home/indiora/ATS/frontend/src/assets/svg/MatchInfoIcon.jsx",[],[],"/home/indiora/ATS/frontend/src/components/UI/SortebleTable/TableBody.jsx",["516","517","518"],[],"import classes from \"./SortebleTable.module.css\";\nimport React, { useState, useEffect } from \"react\";\n\nconst TableBody = ({ tableData, columns }) => {\n    const [table, setTable] = useState(tableData);\n\n    console.log(tableData);\n    return (\n        <tbody className={classes.tableBody}>\n            {tableData.map((data) => {\n                return (\n                    <tr key={data.participant}>\n                        {columns.map(({ accessor }) => {\n                            const tData = data[accessor] ? data[accessor] : \"0\";\n                            return (\n                                <td style={{ paddingLeft: \"2rem\" }} key={accessor}>\n                                    {Array.isArray(tData) ? tData.join(\"/\") : tData}\n                                </td>\n                            );\n                        })}\n                    </tr>\n                );\n            })}\n        </tbody>\n    );\n};\n\nexport default TableBody;\n","/home/indiora/ATS/frontend/src/components/UI/SortebleTable/TableHead.jsx",[],[],"/home/indiora/ATS/frontend/src/components/UI/MyRadioButton/MyRadioButton.jsx",[],[],"/home/indiora/ATS/frontend/src/components/UI/Seed/seed.jsx",[],[],"/home/indiora/ATS/frontend/src/API/useAxios.js",[],[],"/home/indiora/ATS/frontend/src/components/UI/MyModal/MyModal.jsx",["519"],[],"import Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport classes from \"./MyModal.module.css\";\n\nfunction MyModal({ children, ...props }) {\n    return (\n        <Modal\n            {...props}\n            className={classes.myModal}\n            size=\"lg\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n        >\n            {children}\n        </Modal>\n    );\n}\n\nexport default MyModal;\n","/home/indiora/ATS/frontend/src/components/UI/MyDataList/MyDataList.jsx",["520","521","522","523"],[],"import React, { useState, useMemo, useEffect } from \"react\";\nimport classes from \"./MyDataList.module.css\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\n\nconst data = [\n    { value: \"1\", label: \"Amazon\" },\n    { value: \"2\", label: \"Apple\" },\n    { value: \"3\", label: \"Facebook\" },\n    { value: \"4\", label: \"Google\" },\n    { value: \"5\", label: \"Instagram\" },\n    { value: \"6\", label: \"Microsoft\" },\n    { value: \"7\", label: \"Twitter\" },\n    { value: \"8\", label: \"YouTube\" },\n];\n\nconst MyDataList = ({ filter, setFilter, gamesFilter }) => {\n    console.log(\"gamesFilter\", gamesFilter);\n\n    const onChange = (event) => {\n        setFilter({ game: event.target.value, title: filter.title });\n        console.log(event.target.value);\n    };\n\n    const disabled = useMemo(() => {\n        return !data.some((d) => d.label === filter.game);\n    }, [filter.game]);\n\n    return (\n        <div className=\"d-flex\">\n            <div>\n                <input\n                    className={`${classes.myInput} shadow-none`}\n                    type=\"search\"\n                    list=\"list\"\n                    autoComplete=\"on\"\n                    value={filter.game}\n                    onChange={(e) => onChange(e)}\n                />\n                <datalist className={classes.myDL} id=\"list\">\n                    {gamesFilter.map((game) => (\n                        <option className={classes.myDLOpt} key={game} value={game} />\n                    ))}\n                </datalist>\n            </div>\n            {/* <div>\n          <button className=\"btn btn-primary btn-sm\" disabled={disabled}>OK</button>\n        </div> */}\n        </div>\n    );\n};\n\nexport default MyDataList;\n","/home/indiora/ATS/frontend/src/serviceWorkerRegistration.js",[],[],"/home/indiora/ATS/frontend/src/assets/svg/MobileMenuIcon.jsx",[],[],"/home/indiora/ATS/frontend/src/pages/Register/Register.jsx",["524"],[],"import { useState, useContext } from \"react\";\nimport { AuthContext } from \"../../context\";\nimport { useForm } from \"react-hook-form\";\nimport { useNavigate } from \"react-router-dom\";\nimport Form from \"react-bootstrap/Form\";\nimport MyButton from \"../../components/UI/MyButton/MyButton\";\nimport MyFormGroupInput from \"../../components/UI/MyFormGroupInput/MyFormGroupInput\";\nimport MyModal from \"../../components/UI/MyModal/MyModal\";\nimport Modal from \"react-bootstrap/Modal\";\nimport MyCard from \"../../components/UI/MyCard/MyCard\";\nimport Card from \"react-bootstrap/Card\";\nimport classes from \"./Register.module.css\";\n\nconst Register = () => {\n    const [state, setState] = useState({\n        username: \"\",\n        email: \"\",\n        password: \"\",\n        password2: \"\",\n    });\n    const [error, setError] = useState(\"\");\n    const { registerUser } = useContext(AuthContext);\n    const [modalShow, setModalShow] = useState(false);\n\n    const handleRegisterSubmit = async () => {\n        setError(\"\");\n        registerUser(state.username, state.email, state.password, state.password2)\n            .then((response) => {\n                setModalShow(true);\n            })\n            .catch((error) => {\n                console.log(\"cath\", error);\n                setError(error?.response?.data?.detail?.error);\n            });\n    };\n\n    const closeModal = () => {\n        setModalShow(false);\n        navigate(\"/\");\n    };\n\n    const inputChangeHandler = (inputValue) => {\n        const { name, value } = inputValue;\n        setState({ ...state, [name]: value });\n        setValue(name, value);\n    };\n\n    const {\n        register,\n        handleSubmit,\n        getValues,\n        setValue,\n        formState: { errors },\n    } = useForm({ mode: \"onBlur\" });\n\n    const navigate = useNavigate();\n\n    return (\n        <section>\n            <MyModal show={modalShow} onHide={() => closeModal()}>\n                <Modal.Header closeButton className=\"center-block\">\n                    <h2>Confirm registration</h2>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className=\"center-block\">\n                        <p>We have sent you an email to confirm your registration.</p>\n                        <p>You will automatically log into your account after 3 seconds.</p>\n                    </div>\n                </Modal.Body>\n            </MyModal>\n            <div className={`${classes.reregistration_form}`}>\n                <Form onSubmit={handleSubmit(handleRegisterSubmit)}>\n                    <MyCard>\n                        <Card.Header className=\"card-header-text\">Sign up </Card.Header>\n                        <Card.Body>\n                            <MyFormGroupInput\n                                label=\"Username\"\n                                name=\"username\"\n                                errors={errors}\n                                register={register}\n                                validationSchema={{\n                                    required: \"⚠ This input is required.\",\n                                }}\n                                onChange={inputChangeHandler}\n                            ></MyFormGroupInput>\n                            <MyFormGroupInput\n                                label=\"Email\"\n                                name=\"email\"\n                                errors={errors}\n                                register={register}\n                                validationSchema={{\n                                    required: \"⚠ This input is required.\",\n                                    pattern: {\n                                        value: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n                                        message: \"⚠ Invalid email.\",\n                                    },\n                                }}\n                                onChange={inputChangeHandler}\n                            ></MyFormGroupInput>\n                            <MyFormGroupInput\n                                label=\"Password\"\n                                type=\"password\"\n                                name=\"password\"\n                                errors={errors}\n                                register={register}\n                                validationSchema={{\n                                    required: \"⚠ This input is required.\",\n                                    minLength: {\n                                        value: 8,\n                                        message: \"Must be at least 8 characters\",\n                                    },\n                                }}\n                                onChange={inputChangeHandler}\n                            ></MyFormGroupInput>\n                            <MyFormGroupInput\n                                label=\"Repeat password\"\n                                type=\"password\"\n                                name=\"password2\"\n                                errors={errors}\n                                register={register}\n                                validationSchema={{\n                                    // minLength: {\n                                    //   value: 8,\n                                    //   message: \"Must be at least 8 characters\",\n                                    // },\n                                    required: \"⚠ This input is required.\",\n                                    validate: (value) => {\n                                        const { password } = getValues();\n                                        return password === value || \"⚠ Passwords should match!\";\n                                    },\n                                }}\n                                onChange={inputChangeHandler}\n                            ></MyFormGroupInput>\n                        </Card.Body>\n                    </MyCard>\n                    {error != \"\" && <div className={`${classes.error_container}`}>{`⚠ ${error}`}</div>}\n                    <div className=\"mt-3\">\n                        <MyButton additionalCl={\"btn-md\"} type=\"submit\">\n                            Sign up\n                        </MyButton>\n                    </div>\n                </Form>\n            </div>\n        </section>\n    );\n};\n\nexport default Register;\n","/home/indiora/ATS/frontend/src/pages/Bracket/Bracket.jsx",["525","526","527","528","529","530","531","532","533"],[],"import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useFetching } from \"../../hooks/useFetching\";\nimport Loader from \"../../components/UI/Loader/Loader\";\nimport RoundRobin from \"../../components/RoundRobin\";\nimport SingleEl from \"../../components/SingleEl\";\nimport DoubleEl from \"../../components/DoubleEl\";\nimport Swiss from \"../../components/Swiss\";\nimport bracketApi from \"../../services/api/bracketApi\";\nimport axios from \"axios\";\nimport BracketController from \"../../components/BracketController/BracketController.jsx\";\nimport { setBracket, setAnonymous, clearBracket } from \"../../store/bracket\";\nimport { useDispatch } from \"react-redux\";\nimport classes from \"./Bracket.module.css\";\nimport MyButton from \"../../components/UI/MyButton/MyButton.jsx\";\n\nconst Bracket = () => {\n    const params = useParams();\n    const api = axios;\n    const dispatch = useDispatch();\n\n    const [fetchBrackets, isBraLoadind, braError] = useFetching(async (link) => {\n        const response = await bracketApi.getBracket(api, link).then((response) => {\n            dispatch(setBracket({ brackets: [response.data] }));\n            dispatch(setAnonymous({ anonymous: true }));\n        });\n    });\n\n    useEffect(() => {\n        fetchBrackets(params.link);\n    }, []);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearBracket());\n        };\n    }, []);\n\n    const copyToClipboard = () => {\n        const currentUrl = window.location.href;\n\n        if (navigator.clipboard) {\n            navigator.clipboard\n                .writeText(currentUrl)\n                .then(() => {})\n                .catch((err) => {});\n        } else {\n            // Fallback для старых браузеров\n            const textArea = document.createElement(\"textarea\");\n            textArea.value = currentUrl;\n            document.body.appendChild(textArea);\n            textArea.select();\n            try {\n                document.execCommand(\"copy\");\n            } catch (err) {}\n            document.body.removeChild(textArea);\n        }\n    };\n\n    return (\n        <section className={`${classes.bracket_container}`}>\n            {isBraLoadind ? (\n                <div className=\"loader\">\n                    <Loader />\n                </div>\n            ) : (\n                <div className=\"container\">\n                    <BracketController />\n                </div>\n            )}\n            <div className={`${classes.bracket_control_container}`}>\n                <MyButton\n                    onClick={() => {\n                        copyToClipboard();\n                    }}\n                    additionalCl={`${classes.copy_button}`}\n                >\n                    Copy link\n                </MyButton>\n                <div className={`${classes.bracket_warning}`}>\n                    This bracket will be deleted over time to save the bracket create a tournament.\n                </div>\n            </div>\n        </section>\n    );\n};\n\nexport default Bracket;\n","/home/indiora/ATS/frontend/src/pages/CreateBracket/CreateBracket.jsx",["534","535","536","537","538","539","540","541","542","543","544"],[],"import React, { useState, Fragment } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport Form from \"react-bootstrap/Form\";\nimport Card from \"react-bootstrap/Card\";\n\nimport { useForm } from \"react-hook-form\";\nimport MyFormGroupInput from \"../../components/UI/MyFormGroupInput/MyFormGroupInput\";\nimport MyButton from \"../../components/UI/MyButton/MyButton\";\nimport MyCard from \"../../components/UI/MyCard/MyCard\";\nimport classes from \"./CreateBracket.module.css\";\nimport bracketApi from \"../../services/api/bracketApi\";\nimport axios from \"axios\";\n\nconst CreateBracket = () => {\n    const navigate = useNavigate();\n    const api = axios;\n    const [participants, setParticipants] = useState(\"\");\n    const [responseBody, setResponseBody] = useState({\n        bracket_type: 1,\n        advances_to_next: 1,\n        participant_in_match: 2,\n\n        points_loss: 0,\n        points_draw: 0,\n        points_victory: 1,\n    });\n\n    const SeParticipantOptions = [\"2\", \"3\", \"4\", \"5\", \"6\"];\n    const SWParticipantOptions = [\"2\", \"3\", \"4\", \"5\", \"6\"];\n    const DeParticipantOptions = [\"2\", \"4\", \"6\"];\n\n    const SeAdvanceOptions = {\n        2: [\"1\"],\n        3: [\"1\"],\n        4: [\"1\", \"2\"],\n        5: [\"1\"],\n        6: [\"1\", \"2\", \"3\"],\n    };\n\n    const participantsHandler = (e) => {\n        setParticipants(e.value);\n        setValue(\"participants\", e.value);\n    };\n\n    const countNonEmptyRows = () => {\n        const text = participants;\n        const lines = text.split(\"\\n\");\n        const nonEmptyLines = lines.filter((line) => line.trim() !== \"\");\n        const count = nonEmptyLines.length;\n\n        let maxNumber = (responseBody?.bracket_type == 3 ? 20 : 256) || 256;\n        let minNumber = responseBody?.participant_in_match * 2 || 2;\n\n        if (count < minNumber) {\n            return `⚠ Minimum number of participants ${minNumber}.`;\n        } else if (count > maxNumber) {\n            return `⚠ Maximum number of participants ${maxNumber}.`;\n        }\n    };\n\n    const inputChangeHandler = (inputValue) => {\n        const { name, value } = inputValue;\n        setResponseBody({ ...responseBody, [name]: value });\n        setValue(name, value);\n    };\n\n    const inputSelectChangeHandler = (event) => {\n        const { name, value } = event.target;\n        setResponseBody({ ...responseBody, [name]: value });\n    };\n\n    const inputCheckBoxChangeHandler = (e) => {\n        const { target } = e;\n        const value = target.type === \"checkbox\" ? target.checked : target.value;\n        const { name } = target;\n        setResponseBody({ ...responseBody, [name]: value });\n    };\n\n    const {\n        register,\n        handleSubmit,\n        setValue,\n        formState: { errors },\n    } = useForm({ mode: \"onBlur\" });\n\n    const onSubmitHandler = () => {\n        console.log(\"send\");\n        let data = { ...responseBody, participants: participants };\n\n        const response = bracketApi.createBracket(api, data).then(function (response) {\n            if (response.status == 201) {\n                navigate(`/bracket/${response.data.link}`);\n            }\n        });\n    };\n\n    return (\n        <section>\n            <div className={`${classes.create_bracket_form}`}>\n                <Form onSubmit={handleSubmit(onSubmitHandler)}>\n                    <div className=\"my-4\">\n                        <MyCard>\n                            <Card.Header className=\"card-header-text\">Bracket Info</Card.Header>\n                            <Card.Body>\n                                {/* One stage */}\n                                <Form.Group className=\"mb-3\">\n                                    <Form.Label className={`${classes.myFormLabel}`}>Bracket type</Form.Label>\n                                    <Form.Select\n                                        className=\"shadow-none select-input\"\n                                        name=\"bracket_type\"\n                                        onChange={(e) => inputSelectChangeHandler(e)}\n                                    >\n                                        <option value=\"1\">Single Elimination</option>\n                                        <option value=\"2\">Double Elimination</option>\n                                        <option value=\"3\">Round Robin</option>\n                                        <option value=\"4\">Swiss</option>\n                                    </Form.Select>\n                                </Form.Group>\n                                {/* Additional settings */}\n                                <div class=\"accordion mb-3\" id=\"accordionExtend\">\n                                    <div class=\"accordion-item\">\n                                        <h2 class=\"accordion-header\">\n                                            <MyButton\n                                                additionalCl={classes.editional_settings_btn}\n                                                type=\"button\"\n                                                data-bs-toggle=\"collapse\"\n                                                data-bs-target=\"#collapseOne\"\n                                                aria-expanded=\"true\"\n                                                aria-controls=\"collapseOne\"\n                                            >\n                                                Additional settings\n                                            </MyButton>\n                                        </h2>\n                                        <div\n                                            id=\"collapseOne\"\n                                            class=\"accordion-collapse collapse\"\n                                            data-bs-parent=\"#accordionExtend\"\n                                        >\n                                            {/* SE and DE bracket */}\n                                            {responseBody.bracket_type == 1 || responseBody.bracket_type == 2 ? (\n                                                <div className=\"row\">\n                                                    <div className=\"col\">\n                                                        <Form.Label className={`${classes.myFormLabel}`}>\n                                                            Participant in match\n                                                        </Form.Label>\n                                                        <Form.Select\n                                                            className=\"shadow-none select-input\"\n                                                            name=\"participant_in_match\"\n                                                            onChange={(e) => inputSelectChangeHandler(e)}\n                                                        >\n                                                            {responseBody.bracket_type == 1 &&\n                                                                SeParticipantOptions.map((value) => (\n                                                                    <option value={value}>{value}</option>\n                                                                ))}\n                                                            {responseBody.bracket_type == 2 &&\n                                                                DeParticipantOptions.map((value) => (\n                                                                    <option value={value}>{value}</option>\n                                                                ))}\n                                                        </Form.Select>\n                                                    </div>\n                                                    <div className=\"col\">\n                                                        {responseBody.bracket_type == 1 && (\n                                                            <Fragment>\n                                                                <Form.Label className={`${classes.myFormLabel}`}>\n                                                                    Advances to next match\n                                                                </Form.Label>\n                                                                <Form.Select\n                                                                    className=\"shadow-none select-input\"\n                                                                    name=\"advances_to_next\"\n                                                                    onChange={(e) => inputSelectChangeHandler(e)}\n                                                                >\n                                                                    {responseBody.bracket_type == 1 &&\n                                                                        SeAdvanceOptions[\n                                                                            responseBody?.participant_in_match\n                                                                        ].map((value) => (\n                                                                            <option value={value}>{value}</option>\n                                                                        ))}\n                                                                </Form.Select>\n                                                            </Fragment>\n                                                        )}\n                                                    </div>\n                                                </div>\n                                            ) : (\n                                                // For SW and RR brackets\n                                                <Fragment>\n                                                    {/* Only for SW */}\n                                                    {responseBody.bracket_type == 4 && (\n                                                        <div className=\"row\">\n                                                            <div className=\"col\">\n                                                                <Form.Label className={`${classes.myFormLabel}`}>\n                                                                    Participant in match\n                                                                </Form.Label>\n                                                                <Form.Select\n                                                                    className=\"shadow-none select-input\"\n                                                                    name=\"participant_in_match\"\n                                                                    onChange={(e) => inputSelectChangeHandler(e)}\n                                                                >\n                                                                    {SWParticipantOptions.map((value) => (\n                                                                        <option value={value}>{value}</option>\n                                                                    ))}\n                                                                </Form.Select>\n                                                            </div>\n                                                            <div className=\"col\">\n                                                                <MyFormGroupInput\n                                                                    label=\"Number of rounds, blank will be calculated automatically\"\n                                                                    name=\"number_of_rounds\"\n                                                                    defaultValue={null}\n                                                                    errors={errors}\n                                                                    register={register}\n                                                                    onChange={inputChangeHandler}\n                                                                ></MyFormGroupInput>\n                                                            </div>\n                                                        </div>\n                                                    )}\n                                                    <div className=\"row\">\n                                                        <div className=\"col\">\n                                                            <MyFormGroupInput\n                                                                label=\"Points for victory\"\n                                                                name=\"points_victory\"\n                                                                errors={errors}\n                                                                defaultValue={1}\n                                                                register={register}\n                                                                validationSchema={{\n                                                                    required: \"⚠ This input is required.\",\n                                                                }}\n                                                                onChange={inputChangeHandler}\n                                                            ></MyFormGroupInput>\n                                                        </div>\n                                                        <div className=\"col\">\n                                                            <MyFormGroupInput\n                                                                label=\"Points for draw\"\n                                                                name=\"points_draw\"\n                                                                errors={errors}\n                                                                defaultValue={0}\n                                                                register={register}\n                                                                validationSchema={{\n                                                                    required: \"⚠ This input is required.\",\n                                                                }}\n                                                                onChange={inputChangeHandler}\n                                                            ></MyFormGroupInput>\n                                                        </div>\n                                                        <div className=\"col\">\n                                                            <MyFormGroupInput\n                                                                label=\"Points for loss\"\n                                                                name=\"points_loss\"\n                                                                defaultValue={0}\n                                                                errors={errors}\n                                                                register={register}\n                                                                validationSchema={{\n                                                                    required: \"⚠ This input is required.\",\n                                                                }}\n                                                                onChange={inputChangeHandler}\n                                                            ></MyFormGroupInput>\n                                                        </div>\n                                                    </div>\n                                                </Fragment>\n                                            )}\n                                        </div>\n                                    </div>\n                                </div>\n                                <MyFormGroupInput\n                                    label=\"Participants\"\n                                    name=\"participants\"\n                                    defaultValue={participants}\n                                    as=\"textarea\"\n                                    errors={errors}\n                                    register={register}\n                                    validationSchema={{\n                                        validate: {\n                                            checkAvailability: () => {\n                                                return countNonEmptyRows();\n                                            },\n                                        },\n                                    }}\n                                    onChange={(e) => {\n                                        participantsHandler(e);\n                                    }}\n                                ></MyFormGroupInput>\n                            </Card.Body>\n                        </MyCard>\n                    </div>\n                    <div className=\"mt-3\">\n                        <MyButton additionalCl={\"btn-md\"} type=\"submit\">\n                            Create Bracket\n                        </MyButton>\n                    </div>\n                </Form>\n            </div>\n        </section>\n    );\n};\n\nexport default CreateBracket;\n","/home/indiora/ATS/frontend/src/pages/CreateTournament/CreateTournament.jsx",["545","546","547","548","549","550","551","552","553","554","555","556","557","558","559","560","561","562","563"],[],"import React, { useState, useContext, Fragment, useEffect } from \"react\";\nimport \"../../styles/App.css\";\nimport Form from \"react-bootstrap/Form\";\nimport Card from \"react-bootstrap/Card\";\nimport { useNavigate } from \"react-router-dom\";\nimport { AuthContext } from \"../../context\";\nimport useAxios from \"../../API/useAxios\";\nimport { useForm } from \"react-hook-form\";\nimport MyFormGroupInput from \"../../components/UI/MyFormGroupInput/MyFormGroupInput\";\nimport MyButton from \"../../components/UI/MyButton/MyButton\";\nimport MyCard from \"../../components/UI/MyCard/MyCard\";\nimport classes from \"./CreateTournament.module.css\";\nimport TournamentInfoInput from \"./TournamentInfoInput/TournamentInfoInput.jsx\";\nimport tournamentApi from \"../../services/api/tournamentApi.js\";\n\nconst CreateTournament = () => {\n    const api = useAxios();\n    const [inputFile, setInputFile] = useState(null);\n    const [tournamentType, setTournamentType] = useState(\"0\");\n    const [privateTournament, setPrivateTournamnet] = useState(false);\n    const [error, setError] = useState(\"\");\n\n    const [participants, setParticipants] = useState(\"\");\n    // const [advancesNext, setAdvancesNext] = useState(1);\n    // const [participantInMatch, setParticipantInMatch] = useState(\"\");\n\n    const SeParticipantOptions = [\"2\", \"3\", \"4\", \"5\", \"6\"];\n    const SWParticipantOptions = [\"2\", \"3\", \"4\", \"5\", \"6\"];\n    const DeParticipantOptions = [\"2\", \"4\", \"6\"];\n\n    const SeAdvanceOptions = {\n        2: [\"1\"],\n        3: [\"1\"],\n        4: [\"1\", \"2\"],\n        5: [\"1\"],\n        6: [\"1\", \"2\", \"3\"],\n    };\n\n    const [responseBody, setResponseBody] = useState({\n        bracket_type: 1,\n        advances_to_next: 1,\n        participant_in_match: 2,\n\n        points_loss: 0,\n        points_draw: 0,\n        points_victory: 1,\n\n        tournament_type: tournamentType,\n\n        group_type: 5,\n        participant_in_group: 4,\n        advance_from_group: 2,\n    });\n\n    const inputChangeHandler = (inputValue) => {\n        const { name, value } = inputValue;\n        setResponseBody({ ...responseBody, [name]: value });\n        setValue(name, value);\n    };\n\n    const inputSelectChangeHandler = (event) => {\n        const { name, value } = event.target;\n\n        if (\n            (name == \"participant_in_match\" &&\n                !SeAdvanceOptions[value].includes(parseInt(responseBody.advances_to_next))) ||\n            name == \"bracket_type\"\n        ) {\n            setResponseBody({ ...responseBody, advances_to_next: 1, [name]: parseInt(value) });\n        } else {\n            setResponseBody({ ...responseBody, [name]: parseInt(value) });\n        }\n    };\n\n    const inputRadioChangeHandler = (event) => {\n        const { name, value } = event.target;\n        setTournamentType(event.target.value);\n\n        setResponseBody({ ...responseBody, [name]: event.target.value });\n    };\n\n    const inputCheckBoxChangeHandler = (e) => {\n        const { target } = e;\n        const value = target.type === \"checkbox\" ? target.checked : target.value;\n        const { name } = target;\n        setResponseBody({ ...responseBody, [name]: value });\n    };\n\n    const participantsHandler = (e) => {\n        setParticipants(e.value);\n        setValue(\"participants\", e.value);\n    };\n\n    const countNonEmptyRows = () => {\n        const text = participants;\n        const lines = text.split(\"\\n\");\n        const nonEmptyLines = lines.filter((line) => line.trim() !== \"\");\n        const count = nonEmptyLines.length;\n\n        let maxNumber = (responseBody?.bracket_type == 3 ? 20 : 256) || 256;\n        let minNumber = responseBody?.participant_in_match * 2 || 2;\n\n        if (count < minNumber) {\n            return `⚠ Minimum number of participants ${minNumber}.`;\n        } else if (count > maxNumber) {\n            return `⚠ Maximum number of participants ${maxNumber}.`;\n        }\n    };\n\n    const {\n        register,\n        handleSubmit,\n        setValue,\n        formState: { errors },\n    } = useForm({ mode: \"onBlur\" });\n\n    const onSubmitHandler = () => {\n        setError(\"\");\n        setResponseBody({ ...responseBody, poster: inputFile });\n        console.log({ ...responseBody, poster: inputFile });\n        let data = { ...responseBody, poster: inputFile, participants: participants, private: privateTournament };\n        const response = tournamentApi\n            .createTournament(api, data)\n            .then(function (response) {\n                if (response.status == 201) {\n                    // navigate(`/tournament/${responseBody.title.toLowerCase().replace(/ /g, '-').replace(/[^\\w-]+/g, '')}`)\n                }\n            })\n            .catch((error) => {\n                setError(error?.response?.data?.detail?.error);\n            });\n    };\n\n    useEffect(() => {\n        setResponseBody({ ...responseBody, participant_in_match: 2 });\n    }, [responseBody.bracket_type]);\n\n    return (\n        <section>\n            <div className={`${classes.create_tournament_form}`}>\n                <Form onSubmit={handleSubmit(onSubmitHandler)}>\n                    <TournamentInfoInput\n                        errors={errors}\n                        register={register}\n                        inputChangeHandler={inputChangeHandler}\n                        setInputFile={setInputFile}\n                        inputRadioChangeHandler={inputRadioChangeHandler}\n                        tournamentType={tournamentType}\n                        privateTournament={privateTournament}\n                        setPrivateTournamnet={setPrivateTournamnet}\n                    />\n                    <div className=\"my-4\">\n                        <MyCard>\n                            <Card.Header className=\"card-header-text\">Bracket Info</Card.Header>\n                            <Card.Body>\n                                {tournamentType === \"1\" ? (\n                                    <>\n                                        <div>\n                                            <p>Group stage</p>\n                                            <Form.Group className=\"mb-3\">\n                                                <Form.Label>Bracket type</Form.Label>\n                                                <Form.Select\n                                                    className=\"shadow-none select-input\"\n                                                    name=\"group_type\"\n                                                    onChange={(e) => inputSelectChangeHandler(e)}\n                                                >\n                                                    <option value=\"5\">Single Elimination</option>\n                                                    <option value=\"6\">Double Elimination</option>\n                                                    <option value=\"7\">Round Robin</option>\n                                                    <option value=\"8\">Swiss</option>\n                                                </Form.Select>\n                                            </Form.Group>\n                                            <div className=\"row\">\n                                                <div className=\"col\">\n                                                    <MyFormGroupInput\n                                                        label=\"Compete in each group\"\n                                                        name=\"participant_in_group\"\n                                                        errors={errors}\n                                                        defaultValue={4}\n                                                        register={register}\n                                                        validationSchema={{\n                                                            required: \"⚠ This input is required.\",\n                                                        }}\n                                                        onChange={inputChangeHandler}\n                                                    ></MyFormGroupInput>\n                                                </div>\n                                                <div className=\"col\">\n                                                    <MyFormGroupInput\n                                                        label=\"Advance from each group — power of 2 for single & double\"\n                                                        name=\"advance_from_group\"\n                                                        errors={errors}\n                                                        defaultValue={2}\n                                                        register={register}\n                                                        validationSchema={{\n                                                            required: \"⚠ This input is required.\",\n                                                        }}\n                                                        onChange={inputChangeHandler}\n                                                    ></MyFormGroupInput>\n                                                </div>\n                                            </div>\n                                        </div>\n                                        <p>Final stage</p>\n                                    </>\n                                ) : (\n                                    <></>\n                                )}\n                                {/* One stage */}\n                                <Form.Group className=\"mb-3\">\n                                    <Form.Label className={`${classes.myFormLabel}`}>Bracket type</Form.Label>\n                                    <Form.Select\n                                        className=\"shadow-none select-input\"\n                                        name=\"bracket_type\"\n                                        onChange={(e) => inputSelectChangeHandler(e)}\n                                    >\n                                        <option value=\"1\">Single Elimination</option>\n                                        <option value=\"2\">Double Elimination</option>\n                                        <option value=\"3\">Round Robin</option>\n                                        <option value=\"4\">Swiss</option>\n                                    </Form.Select>\n                                </Form.Group>\n                                {/* Additional settings */}\n                                {tournamentType === \"0\" && (\n                                    <div class=\"accordion mb-3\" id=\"accordionExtend\">\n                                        <div class=\"accordion-item\">\n                                            <h2 class=\"accordion-header\">\n                                                <MyButton\n                                                    additionalCl={classes.editional_settings_btn}\n                                                    type=\"button\"\n                                                    data-bs-toggle=\"collapse\"\n                                                    data-bs-target=\"#collapseOne\"\n                                                    aria-expanded=\"true\"\n                                                    aria-controls=\"collapseOne\"\n                                                >\n                                                    Additional settings\n                                                </MyButton>\n                                            </h2>\n                                            <div\n                                                id=\"collapseOne\"\n                                                class=\"accordion-collapse collapse\"\n                                                data-bs-parent=\"#accordionExtend\"\n                                            >\n                                                {/* SE and DE bracket */}\n                                                {responseBody.bracket_type == 1 || responseBody.bracket_type == 2 ? (\n                                                    <div className=\"row\">\n                                                        <div className=\"col\">\n                                                            <Form.Label className={`${classes.myFormLabel}`}>\n                                                                Participant in match\n                                                            </Form.Label>\n                                                            <Form.Select\n                                                                className=\"shadow-none select-input\"\n                                                                name=\"participant_in_match\"\n                                                                onChange={(e) => inputSelectChangeHandler(e)}\n                                                            >\n                                                                {responseBody.bracket_type == 1 &&\n                                                                    SeParticipantOptions.map((value) => (\n                                                                        <option value={value}>{value}</option>\n                                                                    ))}\n                                                                {responseBody.bracket_type == 2 &&\n                                                                    DeParticipantOptions.map((value) => (\n                                                                        <option value={value}>{value}</option>\n                                                                    ))}\n                                                            </Form.Select>\n                                                        </div>\n                                                        <div className=\"col\">\n                                                            {responseBody.bracket_type == 1 && (\n                                                                <Fragment>\n                                                                    <Form.Label className={`${classes.myFormLabel}`}>\n                                                                        Advances to next match\n                                                                    </Form.Label>\n                                                                    <Form.Select\n                                                                        className=\"shadow-none select-input\"\n                                                                        name=\"advances_to_next\"\n                                                                        onChange={(e) => inputSelectChangeHandler(e)}\n                                                                    >\n                                                                        {responseBody.bracket_type == 1 &&\n                                                                            SeAdvanceOptions[\n                                                                                responseBody?.participant_in_match\n                                                                            ].map((value) => (\n                                                                                <option value={value}>{value}</option>\n                                                                            ))}\n                                                                    </Form.Select>\n                                                                    {/* <MyFormGroupInput\n                                  label=\"Advances to next match\"\n                                  name=\"advances_to_next\"\n                                  defaultValue={1}\n                                  errors={errors}\n                                  register={register}\n                                  onChange={inputChangeHandler}\n                                >\n                                </MyFormGroupInput> */}\n                                                                </Fragment>\n                                                            )}\n                                                        </div>\n                                                    </div>\n                                                ) : (\n                                                    // For SW and RR brackets\n                                                    <Fragment>\n                                                        {/* Only for SW */}\n                                                        {responseBody.bracket_type == 4 && (\n                                                            <div className=\"row\">\n                                                                <div className=\"col\">\n                                                                    <Form.Label className={`${classes.myFormLabel}`}>\n                                                                        Participant in match\n                                                                    </Form.Label>\n                                                                    <Form.Select\n                                                                        className=\"shadow-none select-input\"\n                                                                        name=\"participant_in_match\"\n                                                                        onChange={(e) => inputSelectChangeHandler(e)}\n                                                                    >\n                                                                        {SWParticipantOptions.map((value) => (\n                                                                            <option value={value}>{value}</option>\n                                                                        ))}\n                                                                    </Form.Select>\n                                                                </div>\n                                                                <div className=\"col\">\n                                                                    <MyFormGroupInput\n                                                                        label=\"Number of rounds, blank will be calculated automatically\"\n                                                                        name=\"number_of_rounds\"\n                                                                        defaultValue={null}\n                                                                        errors={errors}\n                                                                        register={register}\n                                                                        onChange={inputChangeHandler}\n                                                                    ></MyFormGroupInput>\n                                                                </div>\n                                                            </div>\n                                                        )}\n                                                        <div className=\"row\">\n                                                            <div className=\"col\">\n                                                                <MyFormGroupInput\n                                                                    label=\"Points for victory\"\n                                                                    name=\"points_victory\"\n                                                                    errors={errors}\n                                                                    defaultValue={1}\n                                                                    register={register}\n                                                                    validationSchema={{\n                                                                        required: \"⚠ This input is required.\",\n                                                                    }}\n                                                                    onChange={inputChangeHandler}\n                                                                ></MyFormGroupInput>\n                                                            </div>\n                                                            <div className=\"col\">\n                                                                <MyFormGroupInput\n                                                                    label=\"Points for draw\"\n                                                                    name=\"points_draw\"\n                                                                    errors={errors}\n                                                                    defaultValue={0}\n                                                                    register={register}\n                                                                    validationSchema={{\n                                                                        required: \"⚠ This input is required.\",\n                                                                    }}\n                                                                    onChange={inputChangeHandler}\n                                                                ></MyFormGroupInput>\n                                                            </div>\n                                                            <div className=\"col\">\n                                                                <MyFormGroupInput\n                                                                    label=\"Points for loss\"\n                                                                    name=\"points_loss\"\n                                                                    defaultValue={0}\n                                                                    errors={errors}\n                                                                    register={register}\n                                                                    validationSchema={{\n                                                                        required: \"⚠ This input is required.\",\n                                                                    }}\n                                                                    onChange={inputChangeHandler}\n                                                                ></MyFormGroupInput>\n                                                            </div>\n                                                        </div>\n                                                    </Fragment>\n                                                )}\n                                            </div>\n                                        </div>\n                                    </div>\n                                )}\n                                <MyFormGroupInput\n                                    label=\"Participants\"\n                                    name=\"participants\"\n                                    defaultValue={participants}\n                                    as=\"textarea\"\n                                    errors={errors}\n                                    register={register}\n                                    validationSchema={{\n                                        validate: {\n                                            checkAvailability: () => {\n                                                return countNonEmptyRows();\n                                            },\n                                        },\n                                    }}\n                                    onChange={(e) => {\n                                        participantsHandler(e);\n                                    }}\n                                ></MyFormGroupInput>\n                            </Card.Body>\n                        </MyCard>\n                        {error != \"\" && <div className={`${classes.error_container}`}>{`⚠ ${error}`}</div>}\n                    </div>\n                    <div className=\"pb-4\">\n                        <MyButton additionalCl={\"btn-md\"} type=\"submit\">\n                            Create Tournament\n                        </MyButton>\n                    </div>\n                </Form>\n            </div>\n        </section>\n    );\n};\n\nexport default CreateTournament;\n","/home/indiora/ATS/frontend/src/pages/EditTournament/EditTournament.jsx",["564","565","566","567","568"],[],"import React, { useState, useContext, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useFetching } from \"../../hooks/useFetching\";\nimport \"../../styles/App.css\";\nimport Form from \"react-bootstrap/Form\";\nimport Card from \"react-bootstrap/Card\";\nimport { useNavigate } from \"react-router-dom\";\nimport { AuthContext } from \"../../context\";\nimport useAxios from \"../../API/useAxios\";\nimport UploadButton from \"../../components/UI/UploadButton/UploadButton\";\nimport MyFormGroupInput from \"../../components/UI/MyFormGroupInput/MyFormGroupInput\";\nimport { useForm } from \"react-hook-form\";\nimport MyButton from \"../../components/UI/MyButton/MyButton\";\nimport MyCard from \"../../components/UI/MyCard/MyCard\";\nimport classes from \"./EditTournament.module.css\";\nimport tournamentApi from \"../../services/api/tournamentApi\";\nimport axios from \"axios\";\n\nconst EditTournament = () => {\n    const api = useAxios();\n    const public_api = axios;\n    const navigate = useNavigate();\n    const params = useParams();\n    const { user } = useContext(AuthContext);\n    const [fetchTournament, isLoading, error] = useFetching(async (link) => {\n        const response = await tournamentApi.getTournamentBySlug(public_api, link);\n        setResponseBody({\n            title: response.data.title,\n            content: response.data.content,\n            // participants: response.data.participants,\n            game: response.data.game,\n            start_time: response.data.start_time,\n            // type: response.data.type,\n            creater_email: user.email,\n        });\n        reset(response.data);\n    });\n\n    const [responseBody, setResponseBody] = useState({\n        title: \"\",\n        content: \"\",\n        start_time: \"\",\n        // participants: \"\",\n        game: \"\",\n        // type: \"\",\n        creater_email: user.email,\n    });\n    const [inputFile, setInputFile] = useState(null);\n\n    useEffect(() => {\n        fetchTournament(params.link);\n    }, []);\n\n    const inputChangeHandler = (inputValue) => {\n        const { name, value } = inputValue;\n        setResponseBody({ ...responseBody, [name]: value });\n        setValue(name, value);\n    };\n\n    const onSubmitHandler = () => {\n        const response = api\n            .patch(\n                `/edit_tournament/${params.link}/`,\n                { ...responseBody, poster: inputFile },\n                {\n                    headers: {\n                        \"Content-Type\": \"multipart/form-data\",\n                    },\n                },\n            )\n            .then(function (response) {\n                if (response.status == 200) {\n                    navigate(`/tournament/${response.data.link}`);\n                }\n            });\n    };\n\n    const {\n        register,\n        handleSubmit,\n        setValue,\n        formState: { errors },\n        reset,\n    } = useForm({ mode: \"onBlur\" });\n\n    return (\n        <section className=\"section_without_div pt-4\">\n            <div className={`${classes.edit_tournament_form}`}>\n                <Form onSubmit={handleSubmit(onSubmitHandler)}>\n                    <MyCard>\n                        <Card.Header className=\"tournament_text\">Basic Info</Card.Header>\n                        <Card.Body>\n                            <MyFormGroupInput\n                                label=\"Title\"\n                                name=\"title\"\n                                type=\"text\"\n                                errors={errors}\n                                register={register}\n                                validationSchema={{\n                                    required: \"⚠ This input is required.\",\n                                }}\n                                onChange={inputChangeHandler}\n                            ></MyFormGroupInput>\n                            <MyFormGroupInput\n                                label=\"Description\"\n                                name=\"content\"\n                                as=\"textarea\"\n                                errors={errors}\n                                register={register}\n                                validationSchema={{\n                                    required: \"⚠ This input is required.\",\n                                }}\n                                onChange={inputChangeHandler}\n                            ></MyFormGroupInput>\n\n                            <MyFormGroupInput\n                                label=\"Game\"\n                                name=\"game\"\n                                errors={errors}\n                                register={register}\n                                validationSchema={{\n                                    required: \"⚠ This input is required.\",\n                                }}\n                                onChange={inputChangeHandler}\n                            ></MyFormGroupInput>\n                            <MyFormGroupInput\n                                label=\"Start of the tournament\"\n                                name=\"start_time\"\n                                type=\"datetime-local\"\n                                errors={errors}\n                                register={register}\n                                validationSchema={{\n                                    required: \"⚠ This input is required.\",\n                                }}\n                                onChange={inputChangeHandler}\n                            ></MyFormGroupInput>\n                            <Form.Group className=\"mb-3\">\n                                <Form.Label>Poster</Form.Label>\n                                <UploadButton setInputFileValue={setInputFile} />\n                            </Form.Group>\n                        </Card.Body>\n                    </MyCard>\n                    {/* <div className=\"my-4\">\n            <MyCard>\n              <Card.Header className=\"tournament_text\">Bracket Info</Card.Header>\n              <Card.Body>\n                <MyFormGroupInput\n                  label=\"Participants\"\n                  name=\"participants\"\n                  as=\"textarea\"\n                  errors={errors}\n                  register={register}\n                  validationSchema={{\n                    required: \"⚠ This input is required.\",\n                    pattern: {\n                      value: /^.+\\s+./i,\n                      message: \"⚠ Minimum two participants.\",\n                    },\n                  }}\n                  onChange={inputChangeHandler}\n                ></MyFormGroupInput>\n                <Form.Group className=\"mb-3\">\n                  <Form.Label>Bracket type</Form.Label>\n                  <Form.Select\n                    className=\"shadow-none my_input\"\n                    name=\"type\"\n                    onChange={(e) => inputChangeHandler(e)}\n                  >\n                    <option value=\"SE\">Single Elimination</option>\n                    <option value=\"DE\">Double Elimination</option>\n                    <option value=\"RR\">Round Robin</option>\n                  </Form.Select>\n                </Form.Group>\n              </Card.Body>\n            </MyCard>\n          </div> */}\n                    <div className=\"pb-4 pt-4\">\n                        <MyButton additionalCl={\"btn-md\"} type=\"submit\">\n                            Edit Tournament\n                        </MyButton>\n                    </div>\n                </Form>\n            </div>\n        </section>\n    );\n};\n\nexport default EditTournament;\n","/home/indiora/ATS/frontend/src/pages/Home/Home.jsx",["569"],[],"import React, { useContext } from \"react\";\nimport { AuthContext } from \"../../context\";\nimport MyButton from \"../../components/UI/MyButton/MyButton\";\nimport \"../../styles/App.css\";\nimport MLStageIcon from \"../../assets/svg/MLStageIcon\";\nimport ExpImageIcon from \"../../assets/svg/ExpImageIcon\";\nimport TimeManagmentIcon from \"../../assets/svg/TimeManagmentIcon\";\nimport SEIcon from \"../../assets/svg/SEIcon\";\nimport RRIcon from \"../../assets/svg/RRIcon\";\nimport DEIcon from \"../../assets/svg/DEIcon\";\nimport SWIcon from \"../../assets/svg/SWIcon\";\nimport { Link } from \"react-router-dom\";\n\nconst Home = () => {\n    const { user, logoutUser } = useContext(AuthContext);\n\n    return (\n        <section className=\"\">\n            <div className=\"container-fluid home-div\">\n                <div className=\"row \">\n                    <div className=\"col-lg-2\"></div>\n                    <div className=\"col-lg-8 col-md-12\">\n                        <div className=\"row\">\n                            <div className=\"col position-absolute top-50 start-0 translate-middle-y\">\n                                <Link to=\"/create_tournament\" className=\"main-link\">\n                                    <p>Create Tournament</p>\n                                </Link>\n                                <Link to=\"/create_bracket\" className=\"main-link\">\n                                    <p>Try Bracket Generator</p>\n                                </Link>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col-lg-2\"></div>\n                </div>\n            </div>\n            <div className=\"container text-center mb-5\">\n                <h2 className=\"mb-5 pt-5\">Enjoy your game, we'll handle the rest</h2>\n                <div className=\"row pb-5\">\n                    <div className=\"col-lg-4 col-md-6\">\n                        <div className=\"card\">\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">Unique bracket constructor</h5>\n                                <MLStageIcon />\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col-lg-4 col-md-6\">\n                        <div className=\"card\">\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">Private Tournament</h5>\n                                <ExpImageIcon />\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col-lg-4 col-md-6\">\n                        <div className=\"card\">\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">Notification system</h5>\n                                <TimeManagmentIcon />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div className=\"container text-center\">\n                <h2 className=\"mb-5\">Support various types of tournaments</h2>\n                <div className=\"row pb-5\">\n                    <div className=\"col\"></div>\n                    <div className=\"col-lg-3 col-md-6\">\n                        <div className=\"card\">\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">Single Elimination</h5>\n                                <SEIcon />\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col-lg-3 col-md-6\">\n                        <div className=\"card\">\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">Round Robin</h5>\n                                <RRIcon />\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col-lg-3 col-md-6\">\n                        <div className=\"card\">\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">Double Elimination</h5>\n                                <DEIcon />\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col\"></div>\n                </div>\n            </div>\n            <div className=\"container text-center mb-5\">\n                <div className=\"row pb-5\">\n                    <div className=\"col\"></div>\n                    <div className=\"col-lg-3 col-md-6\">\n                        <div className=\"card\">\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">Swiss</h5>\n                                <SWIcon />\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col\"></div>\n                </div>\n            </div>\n\n            {!user && (\n                <div className=\"container text-center my-5\">\n                    <h2>Providing the right tools for the gaming community</h2>\n                    <p>We aim to keep things simple, but there's plenty more to explore in your website.</p>\n                    <MyButton className=\"btn pb-5\">\n                        <a href=\"/register\">\n                            <h5>Sign up</h5>\n                        </a>\n                    </MyButton>\n                </div>\n            )}\n        </section>\n    );\n};\n\nexport default Home;\n","/home/indiora/ATS/frontend/src/pages/Tournament/Tournament.jsx",["570","571","572","573","574","575","576","577","578","579","580","581","582"],[],"/home/indiora/ATS/frontend/src/pages/Tournaments/Tournaments.jsx",["583","584","585","586"],[],"import React, { useEffect, useRef, useState } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { useFetching } from \"../../hooks/useFetching\";\nimport { getPageCount } from \"../../utils/pages\";\nimport Loader from \"../../components/UI/Loader/Loader\";\nimport TournamentList from \"../../components/TournamentList/TournamentList.jsx\";\nimport TournamentFilter from \"../../components/TournamentFilter/TournamentFilter.jsx\";\nimport { useObserver } from \"../../hooks/useObserver\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport \"../../styles/App.css\";\nimport tournamentApi from \"../../services/api/tournamentApi.js\";\nimport axios from \"axios\";\n\nfunction Tournaments() {\n    const [tournaments, setTournaments] = useState([]);\n    const [filter, setFilter] = useState({ game: null, title: null });\n    const [totalPages, setTotalPages] = useState(0);\n    const [limit, setLimit] = useState(12);\n    const [page, setPage] = useState(1);\n    const lastElement = useRef();\n    const [searchParams, setSearchParams] = useSearchParams();\n    const public_api = axios;\n\n    const [fetchPosts, isPostLoadind, postError] = useFetching(async (limit, page, title = \"\", game = \"\") => {\n        const response = await tournamentApi.getAllTournaments(public_api, limit, page, title, game);\n        if (page === 1) {\n            setTournaments([...response.data.results]);\n        } else {\n            setTournaments([...tournaments, ...response.data.results]);\n        }\n        setTotalPages(getPageCount(response.data.count, limit));\n    });\n\n    useObserver(lastElement, page < totalPages, isPostLoadind, () => {\n        setPage(page + 1);\n    });\n\n    useEffect(() => {\n        const timeOutId = setTimeout(() => {\n            // setSearchParams({ \"title\": filter.title, \"game\": filter.game });\n            console.log(\"filter\", filter);\n\n            if (filter.title !== null || filter.game !== null) {\n                // setTournaments([]);\n                setPage(1);\n                fetchPosts(limit, page, filter.title, filter.game);\n                setSearchParams({ title: filter.title, game: filter.game });\n            }\n        }, 600);\n\n        return () => {\n            clearTimeout(timeOutId);\n        };\n    }, [filter.title, filter.game]);\n\n    useEffect(() => {\n        console.log(\"page\");\n        if (searchParams !== 0) {\n            fetchPosts(\n                limit,\n                page,\n                searchParams.get(\"title\") === \"null\" ? \"\" : searchParams.get(\"title\"),\n                searchParams.get(\"game\") === \"null\" ? \"\" : searchParams.get(\"game\"),\n            );\n        } else {\n            fetchPosts(limit, page);\n        }\n    }, [page, limit]);\n\n    return (\n        <section className=\"container tournaments_section pb-5\">\n            <TournamentFilter filter={filter} setFilter={setFilter} />\n\n            <Row>\n                <Col lg={12}>\n                    <TournamentList tournaments={tournaments} title=\"title\" />\n                </Col>\n            </Row>\n\n            {isPostLoadind && (\n                <div className=\"loader\">\n                    <Loader />\n                </div>\n            )}\n            <div ref={lastElement} className=\"invisible-div\"></div>\n        </section>\n    );\n}\n\nexport default Tournaments;\n","/home/indiora/ATS/frontend/src/pages/Profile/Profile.jsx",["587","588","589","590","591","592"],[],"import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useFetching } from \"../../hooks/useFetching\";\nimport { useTournaments } from \"../../hooks/useTournaments\";\nimport TournamentList from \"../../components/TournamentList/TournamentList.jsx\";\nimport Form from \"react-bootstrap/Form\";\nimport Card from \"react-bootstrap/Card\";\nimport Collapse from \"react-bootstrap/Collapse\";\nimport \"../../styles/App.css\";\nimport useAxios from \"../../API/useAxios\";\nimport UploadButton from \"../../components/UI/UploadButton/UploadButton\";\nimport MyFormGroupInput from \"../../components/UI/MyFormGroupInput/MyFormGroupInput\";\nimport { useForm } from \"react-hook-form\";\nimport MyButton from \"../../components/UI/MyButton/MyButton\";\nimport moment from \"moment\";\nimport MyCard from \"../../components/UI/MyCard/MyCard\";\nimport classes from \"./Profile.module.css\";\nimport profileApi from \"../../services/api/profileApi.js\";\nimport axios from \"axios\";\n\nconst Profile = () => {\n    const api = useAxios();\n    const public_api = axios;\n    const params = useParams();\n    const [filter, setFilter] = useState({ sort: \"\", query: \"\" });\n    const [profile, setProfile] = useState({ user: {}, tournaments: [] });\n    const sortedAndSearchedTournaments = useTournaments(profile.tournaments, filter.sort, filter.query);\n    const sortedAndSearchedFollowedTournaments = useTournaments(profile.subscriptions, filter.sort, filter.query);\n    const [openTournaments, setOpenTournaments] = useState(false);\n    const [openFollowedTournaments, setOpenFollowedTournaments] = useState(false);\n    const [openPasswordChange, setOpenPasswordChange] = useState(false);\n    const [openProfileChange, setOpenProfileChange] = useState(false);\n    const [state, setState] = useState({\n        old_password: \"\",\n        new_password: \"\",\n        re_new_password: \"\",\n    });\n    const [inputFile, setInputFile] = useState(null);\n\n    const {\n        register,\n        getValues,\n        setValue,\n        formState: { errors },\n    } = useForm({ mode: \"onBlur\" });\n\n    const handlePasswordChangeSubmit = (e) => {\n        e.preventDefault();\n        const response = profileApi.changePassword(api, state);\n    };\n\n    const inputChangeHandler = (inputValue) => {\n        const { name, value } = inputValue;\n        setState({ ...state, [name]: value });\n        setValue(name, value);\n    };\n\n    const handleImageChangeSubmit = (e) => {\n        e.preventDefault();\n        console.log(inputFile);\n        let data = { slug: params.slug, user_icon: inputFile };\n        const response = profileApi.updateProfiIcon(api, params.slug, data);\n    };\n\n    const [fetchPostById, isLoadind, error] = useFetching(async (slug) => {\n        const response = await profileApi.getProfileBySlug(public_api, slug);\n        setProfile(response.data);\n    });\n\n    useEffect(() => {\n        fetchPostById(params.slug);\n    }, []);\n\n    return (\n        <section className=\"container\">\n            <div className=\"row align-items-center\">\n                <div className=\"col-lg-12 col-md-12\">\n                    <div className=\"profile-container my-5\">\n                        <div style={{ textAlign: \"center\" }}>\n                            {profile.user_icon && (\n                                <img src={profile.user_icon} alt=\"user profile\" className=\"profile-icon mb-3\" />\n                            )}\n                            <h4>{profile.user.username}</h4>\n                            <p></p>\n                            <p>With us since {moment(profile.user.date_joined).format(\"MMMM Do YYYY\") || \"\"}</p>\n                        </div>\n                    </div>\n                    <div className=\"mb-3\">\n                        <div className=\"d-grid\">\n                            <button\n                                onClick={() => setOpenTournaments(!openTournaments)}\n                                aria-controls=\"example-collapse-text\"\n                                aria-expanded={openTournaments}\n                                style={{\n                                    margin: \"auto\",\n                                    fontSize: \"1.5rem\",\n                                    cursor: \"pointer\",\n                                    background: \"inherit\",\n                                    color: \"inherit\",\n                                    border: \"0px\",\n                                }}\n                            >\n                                Tournaments\n                            </button>\n                        </div>\n                        <Collapse in={openTournaments}>\n                            <div id=\"example-collapse-text\">\n                                <TournamentList tournaments={sortedAndSearchedTournaments} title=\"Список\" />\n                            </div>\n                        </Collapse>\n                    </div>\n                    <div className=\"mb-3\">\n                        <div className=\"d-grid\">\n                            <button\n                                onClick={() => setOpenFollowedTournaments(!openFollowedTournaments)}\n                                aria-controls=\"example-collapse-text\"\n                                aria-expanded={openFollowedTournaments}\n                                style={{\n                                    margin: \"auto\",\n                                    fontSize: \"1.5rem\",\n                                    cursor: \"pointer\",\n                                    background: \"inherit\",\n                                    color: \"inherit\",\n                                    border: \"0px\",\n                                }}\n                            >\n                                Followed Tournaments\n                            </button>\n                        </div>\n                        <Collapse in={openFollowedTournaments}>\n                            <div id=\"example-collapse-text\">\n                                <TournamentList tournaments={sortedAndSearchedFollowedTournaments} title=\"Список\" />\n                            </div>\n                        </Collapse>\n                    </div>\n                    <div className=\"mb-3\">\n                        <div className=\"d-grid\">\n                            <button\n                                onClick={() => setOpenProfileChange(!openProfileChange)}\n                                aria-controls=\"example-collapse-text\"\n                                aria-expanded={openProfileChange}\n                                style={{\n                                    margin: \"auto\",\n                                    fontSize: \"1.5rem\",\n                                    cursor: \"pointer\",\n                                    background: \"inherit\",\n                                    color: \"inherit\",\n                                    border: \"0px\",\n                                }}\n                            >\n                                Profile settings\n                            </button>\n                        </div>\n                        <Collapse in={openProfileChange} className=\"mt-2\">\n                            <div id=\"example-collapse-text\" className={classes.profile_setting_form}>\n                                <Form onSubmit={handleImageChangeSubmit} className=\"my-4\">\n                                    <MyCard border=\"success\">\n                                        <Card.Header className=\"card-header-text\">Avatar</Card.Header>\n                                        <Card.Body>\n                                            <Form.Group className=\"mb-3\">\n                                                <UploadButton setInputFileValue={setInputFile} />\n                                            </Form.Group>\n                                            <MyButton additionalCl={\"btn-md\"} type=\"submit\">\n                                                Save\n                                            </MyButton>\n                                        </Card.Body>\n                                    </MyCard>\n                                </Form>\n                            </div>\n                        </Collapse>\n                    </div>\n                    <div className=\"mb-3\">\n                        <div className=\"d-grid\">\n                            <button\n                                onClick={() => setOpenPasswordChange(!openPasswordChange)}\n                                aria-controls=\"example-collapse-text\"\n                                aria-expanded={openPasswordChange}\n                                style={{\n                                    margin: \"auto\",\n                                    fontSize: \"1.5rem\",\n                                    cursor: \"pointer\",\n                                    background: \"inherit\",\n                                    color: \"inherit\",\n                                    border: \"0px\",\n                                }}\n                            >\n                                Security Settings\n                            </button>\n                        </div>\n                        <Collapse in={openPasswordChange} className=\"mt-2\">\n                            <div id=\"example-collapse-text\" className={classes.security_setting_form}>\n                                <Form onSubmit={handlePasswordChangeSubmit} className=\"my-4\">\n                                    <MyCard>\n                                        <Card.Header className=\"card-header-text\">Change password</Card.Header>\n                                        <Card.Body>\n                                            <MyFormGroupInput\n                                                label=\"Old password\"\n                                                type=\"password\"\n                                                name=\"old_password\"\n                                                errors={errors}\n                                                register={register}\n                                                validationSchema={{\n                                                    required: \"⚠ This input is required.\",\n                                                }}\n                                                onChange={inputChangeHandler}\n                                            ></MyFormGroupInput>\n                                            <MyFormGroupInput\n                                                label=\"New password\"\n                                                type=\"password\"\n                                                name=\"new_password\"\n                                                errors={errors}\n                                                register={register}\n                                                validationSchema={{\n                                                    required: \"⚠ This input is required.\",\n                                                }}\n                                                onChange={inputChangeHandler}\n                                            ></MyFormGroupInput>\n                                            <MyFormGroupInput\n                                                label=\"Repeat new password\"\n                                                type=\"password\"\n                                                name=\"re_new_password\"\n                                                errors={errors}\n                                                register={register}\n                                                validationSchema={{\n                                                    required: \"⚠ This input is required.\",\n                                                    validate: (value) => {\n                                                        const { new_password } = getValues();\n                                                        return new_password === value || \"⚠ Passwords should match!\";\n                                                    },\n                                                }}\n                                                onChange={inputChangeHandler}\n                                            ></MyFormGroupInput>\n                                            <MyButton additionalCl={\"btn-md\"} type=\"submit\">\n                                                Save\n                                            </MyButton>\n                                        </Card.Body>\n                                    </MyCard>\n                                </Form>\n                            </div>\n                        </Collapse>\n                    </div>\n                </div>\n            </div>\n        </section>\n    );\n};\n\nexport default Profile;\n","/home/indiora/ATS/frontend/src/pages/Login/Login.jsx",["593"],[],"import React, { useContext } from \"react\";\nimport { AuthContext } from \"../../context\";\nimport Form from \"react-bootstrap/Form\";\nimport { useState } from \"react\";\nimport MyFormGroupInput from \"../../components/UI/MyFormGroupInput/MyFormGroupInput\";\nimport { useForm, set } from \"react-hook-form\";\nimport MyButton from \"../../components/UI/MyButton/MyButton\";\nimport MyCard from \"../../components/UI/MyCard/MyCard\";\nimport Card from \"react-bootstrap/Card\";\nimport classes from \"./Login.module.css\";\n\nconst Login = () => {\n    const { loginUser } = useContext(AuthContext);\n    const [state, setState] = useState({ email: \"\", password: \"\" });\n\n    const handleLoginSubmit = () => {\n        loginUser(state.email, state.password);\n    };\n\n    const inputChangeHandler = (inputValue) => {\n        const { name, value } = inputValue;\n        setState({ ...state, [name]: value });\n        setValue(name, value);\n    };\n\n    const {\n        register,\n        handleSubmit,\n        setValue,\n        formState: { errors },\n    } = useForm({ mode: \"onBlur\" });\n\n    return (\n        <section>\n            <div>\n                <div className={`${classes.login_form}`}>\n                    <Form onSubmit={handleSubmit(handleLoginSubmit)}>\n                        <MyCard>\n                            <Card.Header className=\"card-header-text\">Log in</Card.Header>\n                            <Card.Body>\n                                <MyFormGroupInput\n                                    label=\"Email\"\n                                    name=\"email\"\n                                    defaultValue={state.email}\n                                    errors={errors}\n                                    register={register}\n                                    validationSchema={{\n                                        required: \"⚠ This input is required.\",\n                                        pattern: {\n                                            value: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n                                            message: \"⚠ Invalid email.\",\n                                        },\n                                    }}\n                                    onChange={inputChangeHandler}\n                                ></MyFormGroupInput>\n                                <MyFormGroupInput\n                                    label=\"Password\"\n                                    type=\"password\"\n                                    name=\"password\"\n                                    defaultValue={state.password}\n                                    errors={errors}\n                                    register={register}\n                                    validationSchema={{\n                                        required: \"⚠ This input is required.\",\n                                    }}\n                                    onChange={inputChangeHandler}\n                                ></MyFormGroupInput>\n                                <p>\n                                    <a href=\"/password_reset\">Forgot password ?</a>\n                                </p>\n                            </Card.Body>\n                        </MyCard>\n                        <div className=\"mt-3\">\n                            <MyButton additionalCl={\"btn-md\"} type=\"submit\">\n                                Log in\n                            </MyButton>\n                        </div>\n                    </Form>\n                </div>\n            </div>\n        </section>\n    );\n};\n\nexport default Login;\n","/home/indiora/ATS/frontend/src/pages/PasswordReset/PasswordReset.jsx",["594"],[],"import React, { useState } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport { useForm } from \"react-hook-form\";\nimport MyFormGroupInput from \"../../components/UI/MyFormGroupInput/MyFormGroupInput\";\nimport MyButton from \"../../components/UI/MyButton/MyButton\";\nimport profileApi from \"../../services/api/profileApi\";\nimport axios from \"axios\";\n\nconst PasswordReset = () => {\n    const api = axios();\n    const handleResetSubmit = () => {\n        const response = profileApi.resetPassword(api, email);\n    };\n\n    const [email, setEmail] = useState({ email: \"\" });\n\n    const inputChangeHandler = (inputValue) => {\n        const { name, value } = inputValue;\n        setEmail({ [name]: value });\n        setValue(name, value);\n    };\n\n    const {\n        register,\n        handleSubmit,\n        setValue,\n        formState: { errors },\n    } = useForm({ mode: \"onBlur\" });\n\n    return (\n        <section>\n            <div>\n                <div className=\"log_div position-absolute top-50 start-50 translate-middle\">\n                    <Form onSubmit={handleSubmit(handleResetSubmit)}>\n                        <MyFormGroupInput\n                            label=\"Email\"\n                            name=\"email\"\n                            errors={errors}\n                            register={register}\n                            validationSchema={{\n                                required: \"⚠ This input is required.\",\n                                pattern: {\n                                    value: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n                                    message: \"⚠ Invalid email.\",\n                                },\n                            }}\n                            onChange={inputChangeHandler}\n                        ></MyFormGroupInput>\n                        <MyButton additionalCl={\"btn-md\"} type=\"submit\">\n                            Отправить\n                        </MyButton>\n                    </Form>\n                </div>\n            </div>\n        </section>\n    );\n};\n\nexport default PasswordReset;\n","/home/indiora/ATS/frontend/src/pages/PasswordResetConfirm/PasswordResetConfirm.jsx",["595"],[],"import React, { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Form from \"react-bootstrap/Form\";\nimport { useForm } from \"react-hook-form\";\nimport MyButton from \"../../components/UI/MyButton/MyButton\";\nimport axios from \"axios\";\nimport profileApi from \"../../services/api/profileApi\";\n\nconst PasswordResetConfirm = () => {\n    const params = useParams();\n    const api = axios();\n    const [new_password, setPassword] = useState(\"\");\n    const [re_new_password, setRePassword] = useState(\"\");\n\n    const handlePasswordResetSubmit = (e) => {\n        e.preventDefault();\n        console.log({\n            uid: params.uid,\n            token: params.token,\n            new_password: new_password,\n            re_new_password: re_new_password,\n        });\n        const response = profileApi.resetPasswordConfirm(api, {\n            uid: params.uid,\n            token: params.token,\n            new_password: new_password,\n            re_new_password: re_new_password,\n        });\n    };\n\n    const newPasswordHandler = (e) => {\n        setPassword(e.target.value);\n        setValue(\"new_password\", e.target.value);\n    };\n\n    const newRePasswordHandler = (e) => {\n        setRePassword(e.target.value);\n        setValue(\"re_new_password\", e.target.value);\n    };\n\n    const {\n        register,\n        handleSubmit,\n        getValues,\n        setValue,\n        formState: { errors },\n    } = useForm({ mode: \"onBlur\" });\n\n    return (\n        <section>\n            <div>\n                <div className=\"log_div position-absolute top-50 start-50 translate-middle\">\n                    <Form onSubmit={handleSubmit(handlePasswordResetSubmit)}>\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                {...register(\"new_password\", {\n                                    required: \"⚠ This input is required.\",\n                                })}\n                                className=\"shadow-none my_log_input\"\n                                onChange={(e) => newPasswordHandler(e)}\n                            />\n                            {errors.new_password && <p role=\"alert\">{errors.new_password?.message}</p>}\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>Confirm password</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                {...register(\"re_new_password\", {\n                                    required: \"⚠ This input is required.\",\n                                    validate: (value) => {\n                                        const { new_password } = getValues();\n                                        return new_password === value || \"⚠ Passwords should match!\";\n                                    },\n                                })}\n                                className=\"shadow-none my_log_input\"\n                                onChange={(e) => newRePasswordHandler(e)}\n                            />\n                            {errors.re_new_password && <p role=\"alert\">{errors.re_new_password?.message}</p>}\n                        </Form.Group>\n                        <MyButton additionalCl={\"btn-md\"} type=\"submit\">\n                            Отправить\n                        </MyButton>\n                    </Form>\n                </div>\n            </div>\n        </section>\n    );\n};\n\nexport default PasswordResetConfirm;\n","/home/indiora/ATS/frontend/src/assets/svg/DefaultTournamnetPoster.jsx",[],[],"/home/indiora/ATS/frontend/src/components/TournamentList/TournamentList.jsx",[],[],"/home/indiora/ATS/frontend/src/components/TournamentFilter/TournamentFilter.jsx",["596","597","598","599","600","601","602"],[],"import React, { useState, useEffect } from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport MyDataList from \"../UI/MyDataList/MyDataList\";\nimport MyButton from \"../UI/MyButton/MyButton\";\nimport classes from \"./TournamentFilter.module.css\";\nimport auxiliaryApi from \"../../services/api/auxiliaryApi\";\nimport axios from \"axios\";\n\nconst TournamentFilter = ({ filter, setFilter }) => {\n    const [gamesFilter, setGamesFilter] = useState([]);\n    const [openFilter, setOpenFilter] = useState(false);\n    const [temporaryFilter, setTemporaryFilter] = useState(\"\");\n    const api = axios;\n\n    useEffect(() => {\n        console.log(\"useEffect\");\n\n        const response = auxiliaryApi.getAllGames(api).then((response) => {\n            setGamesFilter(response.data);\n            console.log(response.data);\n        });\n    }, []);\n\n    const onChange = (event) => {\n        setFilter({ game: event.target.value, title: filter.title });\n        console.log(event.target.value);\n    };\n\n    const filterHandler = () => {\n        if (!openFilter) {\n            setOpenFilter(!openFilter);\n        } else {\n            setOpenFilter(!openFilter);\n            setFilter({ game: \"\", title: filter.title });\n\n            console.log(\"filter\", filter);\n        }\n    };\n\n    return (\n        <div className={`${classes.filter_container}`}>\n            <input\n                value={filter.title}\n                onChange={(e) => setFilter({ game: filter.game, title: e.target.value })}\n                placeholder=\"Search\"\n                className={`${classes.filter_ul} search-input shadow-none`}\n            />\n            <div className={`${classes.game_filter_container}`}>\n                {openFilter && (\n                    <div className={`${classes.filter_ul}`}>\n                        <MyDataList filter={filter} setFilter={setFilter} gamesFilter={gamesFilter} />\n                    </div>\n                )}\n                <MyButton additionalCl={`${classes.filter_btn}`} onClick={() => filterHandler()}>\n                    {!openFilter ? \"Game\" : \"Clear\"}\n                    {/* {filter.game === '' && <input onChange={e => setFilter(e)}></input>} */}\n                </MyButton>\n            </div>\n        </div>\n    );\n};\n\nexport default TournamentFilter;\n","/home/indiora/ATS/frontend/src/pages/Feedback/FeedBack.jsx",["603","604","605"],[],"import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport Form from \"react-bootstrap/Form\";\nimport Card from \"react-bootstrap/Card\";\n\nimport { useForm } from \"react-hook-form\";\nimport MyFormGroupInput from \"../../components/UI/MyFormGroupInput/MyFormGroupInput\";\nimport MyButton from \"../../components/UI/MyButton/MyButton\";\nimport MyCard from \"../../components/UI/MyCard/MyCard\";\nimport classes from \"./FeedBack.module.css\";\nimport auxiliaryApi from \"../../services/api/auxiliaryApi\";\nimport axios from \"axios\";\n\nconst FeedBack = () => {\n    const navigate = useNavigate();\n\n    const [responseBody, setResponseBody] = useState({\n        participants: \"\",\n        type: \"SE\",\n        points_loss: \"0\",\n        points_draw: \"0\",\n        points_victory: \"1\",\n        secod_final: false,\n    });\n    const api = axios();\n\n    const inputChangeHandler = (inputValue) => {\n        const { name, value } = inputValue;\n        setResponseBody({ ...responseBody, [name]: value });\n        setValue(name, value);\n    };\n\n    const inputSelectChangeHandler = (event) => {\n        const { name, value } = event.target;\n        setResponseBody({ ...responseBody, [name]: value });\n    };\n\n    const inputCheckBoxChangeHandler = (e) => {\n        const { target } = e;\n        const value = target.type === \"checkbox\" ? target.checked : target.value;\n        const { name } = target;\n        setResponseBody({ ...responseBody, [name]: value });\n    };\n\n    const {\n        register,\n        handleSubmit,\n        setValue,\n        formState: { errors },\n    } = useForm({ mode: \"onBlur\" });\n\n    const onSubmitHandler = () => {\n        const response = auxiliaryApi.sendFeedback(api, responseBody).then(function (response) {\n            if (response.status == 201) {\n                navigate(`/`);\n            }\n        });\n    };\n\n    return (\n        <section>\n            <div className={`${classes.feedback_form}`}>\n                <Form onSubmit={handleSubmit(onSubmitHandler)}>\n                    <div className=\"my-4\">\n                        <MyCard border=\"success\">\n                            <Card.Header className=\"card-header-text\">Feedback</Card.Header>\n                            <Card.Body>\n                                <Form.Group className=\"mb-3\">\n                                    <Form.Label className={`${classes.myFormLabel}`}>Type</Form.Label>\n                                    <Form.Select\n                                        className=\"shadow-none select-input\"\n                                        name=\"type\"\n                                        onChange={(e) => inputSelectChangeHandler(e)}\n                                    >\n                                        <option value=\"BUG\">Bug</option>\n                                        <option value=\"PROPOSAL\">Proposal</option>\n                                        <option value=\"OTHER\">Other</option>\n                                    </Form.Select>\n                                </Form.Group>\n                                <MyFormGroupInput\n                                    label=\"Description\"\n                                    name=\"content\"\n                                    as=\"textarea\"\n                                    errors={errors}\n                                    register={register}\n                                    validationSchema={{\n                                        required: \"⚠ This input is required.\",\n                                    }}\n                                    onChange={inputChangeHandler}\n                                />\n                            </Card.Body>\n                        </MyCard>\n                    </div>\n                    <div className=\"mt-3\">\n                        <MyButton additionalCl={\"btn-md\"} type=\"submit\">\n                            Send Feedback\n                        </MyButton>\n                    </div>\n                </Form>\n            </div>\n        </section>\n    );\n};\n\nexport default FeedBack;\n","/home/indiora/ATS/frontend/src/pages/Test/Test.jsx",["606","607","608","609"],[],"import { useState, useContext, Fragment } from \"react\";\nimport { AuthContext } from \"../../context\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport classes from \"./Test.module.css\";\n\nconst Test = () => {\n    // bracket [\n    //   round [\n    //     match [\n\n    //     ]\n    //   ]\n    // ]\n    // const [bracket, setBracket] = useState([ [ [{'name': 'Bill'}, {'name': 'Tom'}, ], [{'name': 'Gin'}, {'name': 'Add'}], [{'name': 'Bill'}, {'name': 'Tom'}], [{'name': 'Gin'}, {'name': 'Add'}], [{'name': 'Bill'}, {'name': 'Tom'}, ], [{'name': 'Gin'}, {'name': 'Add'}], [{'name': 'Bill'}, {'name': 'Tom'}], [{'name': 'Gin'}, {'name': 'Add'}] ],\n    //                                          [ [{'name': 'Bill'}, {'name': 'Tom'}, ], [{'name': 'Gin'}, {'name': 'Add'}]],\n    //                                         //  [ [{'name': 'Bill'}, {'name': 'Add'}], [{'name': 'Bill'}, {'name': 'Add'}] ],\n    //                                          [ [{'name': 'Bill'}, {'name': 'Add'}] ]\n    //                                         ]);\n\n    // const [bracket, setBracket] = useState([\n    //   [ [{'name': 'Bill'}, {'name': 'Tom'}, {'name': 'Bill'}, {'name': 'Tom'}, ], [{'name': 'Gin'}, {'name': 'Add'}, {'name': 'Bill'}, {'name': 'Tom'}, ], [{'name': 'Bill'}, {'name': 'Tom'}, {'name': 'Bill'}, {'name': 'Tom'},], [{'name': 'Gin'}, {'name': 'Add'}, {'name': 'Bill'}, {'name': 'Tom'},],[{'name': 'Bill'}, {'name': 'Tom'}, {'name': 'Bill'}, {'name': 'Tom'}, ], [{'name': 'Gin'}, {'name': 'Add'}, {'name': 'Bill'}, {'name': 'Tom'}, ], [{'name': 'Bill'}, {'name': 'Tom'}, {'name': 'Bill'}, {'name': 'Tom'},], [{'name': 'Gin'}, {'name': 'Add'}, {'name': 'Bill'}, {'name': 'Tom'},] ],\n    //   [ [{'name': 'Bill'}, {'name': 'Tom'}, {'name': 'Bill'}, {'name': 'Tom'}, ], [{'name': 'Gin'}, {'name': 'Add'}, {'name': 'Bill'}, {'name': 'Tom'}, ], [{'name': 'Bill'}, {'name': 'Tom'}, {'name': 'Bill'}, {'name': 'Tom'},], [{'name': 'Gin'}, {'name': 'Add'}, {'name': 'Bill'}, {'name': 'Tom'},] ],\n    //   [ [{'name': 'Bill'}, {'name': 'Add'}, {'name': 'Bill'}, {'name': 'Tom'},], [{'name': 'Bill'}, {'name': 'Add'}, {'name': 'Bill'}, {'name': 'Tom'},] ],\n    //   [ [{'name': 'Bill'}, {'name': 'Add'}, {'name': 'Bill'}, {'name': 'Add'}] ]\n    //  ]);\n\n    const t = 4;\n\n    const [bracket, setBracket] = useState([\n        [\n            [{ name: \"Bill\" }, { name: \"Tom\" }, { name: \"Bill\" }, { name: \"Tom\" }],\n            [{ name: \"Gin\" }, { name: \"Add\" }, { name: \"Bill\" }, { name: \"Tom\" }],\n            [{ name: \"Bill\" }, { name: \"Tom\" }, { name: \"Bill\" }, { name: \"Tom\" }],\n            [{ name: \"Gin\" }, { name: \"Add\" }, { name: \"Bill\" }, { name: \"Tom\" }],\n            [{ name: \"Bill\" }, { name: \"Tom\" }, { name: \"Bill\" }, { name: \"Tom\" }],\n            [{ name: \"Gin\" }, { name: \"Add\" }, { name: \"Bill\" }, { name: \"Tom\" }],\n            [{ name: \"Bill\" }, { name: \"Tom\" }, { name: \"Bill\" }, { name: \"Tom\" }],\n            [{ name: \"Gin\" }, { name: \"Add\" }, { name: \"Bill\" }, { name: \"Tom\" }],\n        ],\n        // [ [{'name': 'Bill'}, {'name': 'Tom'}, {'name': 'Bill'}, {'name': 'Tom'}, ], [{'name': 'Gin'}, {'name': 'Add'}, {'name': 'Bill'}, {'name': 'Tom'}, ], [{'name': 'Bill'}, {'name': 'Tom'}, {'name': 'Bill'}, {'name': 'Tom'},], [{'name': 'Gin'}, {'name': 'Add'}, {'name': 'Bill'}, {'name': 'Tom'},] ],\n        [\n            [{ name: \"Bill\" }, { name: \"Add\" }, { name: \"Bill\" }, { name: \"Tom\" }],\n            [{ name: \"Bill\" }, { name: \"Add\" }, { name: \"Bill\" }, { name: \"Tom\" }],\n        ],\n        [[{ name: \"Bill\" }, { name: \"Add\" }, { name: \"Bill\" }, { name: \"Add\" }]],\n    ]);\n\n    console.log(\"bracket\", bracket);\n\n    return (\n        <section>\n            <div className={`${classes.bracket}`}>\n                {bracket.map((round) => (\n                    <Fragment>\n                        <div className={`${classes.column}`}>\n                            {round.map((match) => (\n                                <div className={`${classes.match}`}>\n                                    {match.map((team) => (\n                                        <div className={`${classes.team}`}>\n                                            <span className={`${classes.name}`}>{team.name}</span>\n                                            <span className={`${classes.score}`}>0</span>\n                                        </div>\n                                    ))}\n                                    <div className={`${classes.match_lines}`}>\n                                        <div className={`${classes.line} ${classes.one}`}></div>\n                                    </div>\n                                    <div className={`${classes.match_lines} ${classes.alt}`}>\n                                        <div className={`${classes.line} ${classes.one}`}></div>\n                                    </div>\n                                </div>\n                            ))}\n                        </div>\n                        {round.length >= 2 && (\n                            <div className={`${classes.column_lines_wrapper}`}>\n                                {[...Array.from(Array(round.length).keys())].map((num, i) => (\n                                    <div\n                                        className={`${round.length > 2 && (i % t === 0 || i % t === t - 1) ? (i % t === 0 ? classes.column_lines_first : classes.column_lines_last) : classes.column_lines}`}\n                                    ></div>\n                                ))}\n                            </div>\n                        )}\n                    </Fragment>\n                ))}\n            </div>\n        </section>\n    );\n};\n\nexport default Test;\n","/home/indiora/ATS/frontend/src/store/store.js",[],[],"/home/indiora/ATS/frontend/src/store/bracket.js",["610"],[],"import { createSlice } from \"@reduxjs/toolkit\";\n\nconst bracketSlice = createSlice({\n    name: \"bracket\",\n    initialState: {\n        brackets: [],\n        anonymous: false,\n        currentMatch: null,\n        currentBracketId: null,\n    },\n    reducers: {\n        setBracket(state, action) {\n            state.brackets = action.payload.brackets;\n        },\n        setAnonymous(state, action) {\n            state.anonymous = action.payload.anonymous;\n        },\n        changeBracket(state, action) {\n            state.brackets = state.brackets.map((bracket) =>\n                bracket.id === action.payload.bracket.id\n                    ? { ...bracket, rounds: action.payload.bracket.rounds }\n                    : bracket,\n            );\n        },\n        setCurrentMatch(state, action) {\n            state.currentMatch = action.payload.currentMatch;\n        },\n        changeCurrentMatchInfo(state, action) {\n            let _info = state.currentMatch.info;\n            _info.find((item) => {\n                if (item.id === action.payload.id) {\n                    item.participant_score = action.payload.participant_score;\n                    return true;\n                }\n            });\n            state.currentMatch.info = _info;\n        },\n        setCurrentBracketId(state, action) {\n            state.currentBracketId = action.payload.currentBracketId;\n        },\n        clearBracket(state) {\n            state.brackets = [];\n            state.currentBracketId = null;\n            state.currentMatch = null;\n            state.anonymous = false;\n        },\n    },\n});\n\nexport const {\n    setBracket,\n    setAnonymous,\n    clearBracket,\n    setCurrentMatch,\n    setCurrentBracketId,\n    changeCurrentMatchInfo,\n    changeBracket,\n} = bracketSlice.actions;\n\nexport default bracketSlice.reducer;\n","/home/indiora/ATS/frontend/src/store/tournament.js",["611"],[],"import { createSlice } from \"@reduxjs/toolkit\";\n\nconst tournamentSlice = createSlice({\n    name: \"tournament\",\n    initialState: {\n        id: \"\",\n        link: \"\",\n        title: \"\",\n        content: \"\",\n        owner: \"\",\n        startTime: \"\",\n        poster: \"\",\n        game: \"\",\n        moderators: [],\n    },\n    reducers: {\n        setTournament(state, action) {\n            state.id = action.payload.id;\n            state.link = action.payload.link;\n            state.title = action.payload.title;\n            state.content = action.payload.content;\n            state.owner = action.payload.owner;\n            state.startTime = action.payload.startTime;\n            state.poster = action.payload.poster;\n            state.game = action.payload.game;\n            state.moderators = action.payload.moderators;\n        },\n\n        addModerator(state, action) {\n            if (!state.moderators.includes(action.payload.moderator)) {\n                state.moderators = [...state.moderators, action.payload.moderator];\n            }\n        },\n\n        deleteModerator(state, action) {\n            state.moderators = state.moderators.filter((username) => username != action.payload.moderator);\n        },\n\n        clearTournament(state) {\n            state.id = \"\";\n            state.link = \"\";\n            state.title = \"\";\n            state.content = \"\";\n            state.owner = \"\";\n            state.startTime = \"\";\n            state.poster = \"\";\n            state.game = \"\";\n            state.moderators = [];\n        },\n    },\n});\n\nexport const { setTournament, addModerator, deleteModerator, clearTournament } = tournamentSlice.actions;\n\nexport default tournamentSlice.reducer;\n","/home/indiora/ATS/frontend/src/services/api/bracketApi.js",["612"],[],"/home/indiora/ATS/frontend/src/components/Brackets/SE/SingleElimination.jsx",["613","614"],[],"import { useState, useContext, Fragment } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { AuthContext } from \"../../../context/index.js\";\nimport MatchInfoIcon from \"../../../assets/svg/MatchInfoIcon\";\nimport MatchJudgeIcon from \"../../../assets/svg/MatchJudgeIcon\";\nimport classes from \"./SingleElimination.module.css\";\nimport InfoModal from \"../Modals/InfoModal/InfoModal.jsx\";\nimport EditModal from \"../Modals/EditModal/EditModal.jsx\";\nimport { setCurrentMatch, setCurrentBracketId } from \"../../../store/bracket.js\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport moment from \"moment\";\n\nconst SingleElimination = ({ bracket, bracketId }) => {\n    const dispatch = useDispatch();\n    const [modalShow, setMatchCardModalShow] = useState(false);\n    const [modalEditShow, setEditMatchCardModalShow] = useState(false);\n    const participantsInMatch = bracket[0]?.matches[0]?.info.length;\n\n    const { user } = useContext(AuthContext);\n    const anonymous = useSelector((state) => state.bracket.anonymous);\n    const tournament = useSelector((state) => state.tournament);\n\n    const openInfoModal = (match) => {\n        setMatchCardModalShow(true);\n        dispatch(setCurrentMatch({ currentMatch: match }));\n    };\n\n    const openEditModal = (match) => {\n        setEditMatchCardModalShow(true);\n        dispatch(setCurrentMatch({ currentMatch: match }));\n        dispatch(setCurrentBracketId({ currentBracketId: bracketId }));\n    };\n\n    return (\n        <div>\n            <div className={`${classes.bracket}`}>\n                {bracket.map((round) => (\n                    <Fragment>\n                        <div className={`${classes.column}`}>\n                            {round.matches.map((match) => (\n                                <div className={`${classes.match}`}>\n                                    <div className={classes.button_container}>\n                                        {match?.startTime && (\n                                            <span>\n                                                {moment.parseZone(match?.startTime).format(\"DD.MM h:mm a\") || \"\"}\n                                            </span>\n                                        )}\n                                    </div>\n                                    {match.info.map((team) => (\n                                        <div className={`${classes.team}`}>\n                                            <div className={`${classes.name}`}>{team.participant}</div>\n                                            <div className={`${classes.score}`}>{team.participant_score}</div>\n                                        </div>\n                                    ))}\n                                    <div className={`${classes.match_lines}`}>\n                                        <div className={`${classes.line} ${classes.one}`}></div>\n                                    </div>\n                                    <div className={`${classes.match_lines} ${classes.alt}`}>\n                                        <div className={`${classes.line} ${classes.one}`}></div>\n                                    </div>\n                                    <div className={classes.button_container}>\n                                        {(user !== null &&\n                                            (tournament.owner == user.username ||\n                                                tournament.moderators.includes(user.username))) ||\n                                        anonymous ? (\n                                            <Fragment>\n                                                <button\n                                                    className={classes.icon_button}\n                                                    onClick={() => openInfoModal(match)}\n                                                >\n                                                    <MatchInfoIcon />\n                                                </button>\n                                                <button\n                                                    className={classes.icon_button}\n                                                    onClick={() => openEditModal(match)}\n                                                >\n                                                    <MatchJudgeIcon />\n                                                </button>\n                                            </Fragment>\n                                        ) : (\n                                            <button\n                                                className={classes.icon_button}\n                                                onClick={() => openInfoModal(match)}\n                                            >\n                                                <MatchInfoIcon />\n                                            </button>\n                                        )}\n                                    </div>\n                                </div>\n                            ))}\n                        </div>\n\n                        {round.matches.length >= 2 && (\n                            <div className={`${classes.column_lines_wrapper}`}>\n                                {[...Array.from(Array(round.matches.length).keys())].map((num, i) =>\n                                    participantsInMatch % 2 === 1 ? (\n                                        <div\n                                            className={`${round.matches.length > 2 && (i % participantsInMatch === 0 || i % participantsInMatch === participantsInMatch - 1) ? (i % participantsInMatch === 0 ? classes.column_lines_first_odd : classes.column_lines_last_odd) : classes.column_lines_odd}`}\n                                        ></div>\n                                    ) : (\n                                        <div\n                                            className={`${round.matches.length > 2 && (i % participantsInMatch === 0 || i % participantsInMatch === participantsInMatch - 1) ? (i % participantsInMatch === 0 ? classes.column_lines_first : classes.column_lines_last) : classes.column_lines}`}\n                                        ></div>\n                                    ),\n                                )}\n                            </div>\n                        )}\n                    </Fragment>\n                ))}\n            </div>\n            <EditModal modalEditShow={modalEditShow} setEditMatchCardModalShow={setEditMatchCardModalShow} match={{}} />\n            <InfoModal modalShow={modalShow} setMatchCardModalShow={setMatchCardModalShow} match={{}} />\n        </div>\n    );\n};\n\nexport default SingleElimination;\n","/home/indiora/ATS/frontend/src/components/Brackets/RR/RoundRobin.jsx",["615","616","617","618","619","620","621","622","623","624","625","626","627","628","629","630"],[],"import { useState, useContext, Fragment, useEffect } from \"react\";\nimport { AuthContext } from \"../../../context/index.js\";\nimport MatchInfoIcon from \"../../../assets/svg/MatchInfoIcon\";\nimport MatchJudgeIcon from \"../../../assets/svg/MatchJudgeIcon\";\nimport classes from \"./RoundRobin.module.css\";\nimport InfoModal from \"../Modals/InfoModal/InfoModal.jsx\";\nimport EditModal from \"../Modals/EditModal/EditModal.jsx\";\nimport { setCurrentMatch, setCurrentBracketId } from \"../../../store/bracket.js\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport MySortebleTable from \"../../UI/SortebleTable/SortebleTable.jsx\";\n\nconst RoundRobin = ({ bracket, bracketId }) => {\n    const dispatch = useDispatch();\n    const [modalShow, setMatchCardModalShow] = useState(false);\n    const [modalEditShow, setEditMatchCardModalShow] = useState(false);\n    const [table, setTable] = useState([]);\n\n    const { user } = useContext(AuthContext);\n    const tournament = useSelector((state) => state.tournament);\n    const anonymous = useSelector((state) => state.bracket.anonymous);\n\n    const openInfoModal = (match) => {\n        setMatchCardModalShow(true);\n        dispatch(setCurrentMatch({ currentMatch: match }));\n    };\n\n    const openEditModal = (match) => {\n        setEditMatchCardModalShow(true);\n        dispatch(setCurrentMatch({ currentMatch: match }));\n        dispatch(setCurrentBracketId({ currentBracketId: bracketId }));\n    };\n\n    const createTable = (bracket) => {\n        let table = [];\n        console.log(\"bracket\", bracket);\n        bracket[0]?.matches.map((match) => {\n            let draw = false;\n            let max_score = Math.max(...match.info.map((participant) => participant.participant_score));\n            if (\n                match.info.filter((participant) => participant.participant_score == max_score).length > 1 &&\n                match.state == \"PLAYED\"\n            ) {\n                draw = true;\n            }\n\n            match.info.map((i) => {\n                let win_cnt = 0;\n                let loose_cnt = 0;\n\n                if (match.state == \"PLAYED\" && draw == false) {\n                    if (i.participant_score == max_score) {\n                        win_cnt = 1;\n                    } else {\n                        loose_cnt = 1;\n                    }\n                }\n                table.push({\n                    participant: i.participant,\n                    win: win_cnt,\n                    loose: loose_cnt,\n                    draw: draw ? 1 : 0,\n                    scores: 0,\n                });\n            });\n        });\n\n        for (let round of bracket.slice(1)) {\n            round?.matches?.map((match) => {\n                let draw = false;\n                let max_score = Math.max(...match.info.map((participant) => participant.participant_score));\n                if (\n                    match.info.filter((participant) => participant.participant_score == max_score).length > 1 &&\n                    match.state == \"PLAYED\"\n                ) {\n                    draw = true;\n                }\n                console.log(\"heeree\");\n\n                match.info.map((i) => {\n                    let win_cnt = 0;\n                    let loose_cnt = 0;\n\n                    if (match.state == \"PLAYED\" && draw == false) {\n                        if (i.participant_score == max_score) {\n                            win_cnt = 1;\n                        } else {\n                            loose_cnt = 1;\n                        }\n                    }\n                    let row = table.filter((row) => row.participant == i.participant)[0];\n\n                    if (row !== undefined) {\n                        row.win += win_cnt;\n                        row.loose += loose_cnt;\n                        row.draw += draw ? 1 : 0;\n                        row.scores += 0 * win_cnt + 0 * loose_cnt + 0 * draw ? 1 : 0;\n                        console.log(i.participant);\n                    }\n                });\n            });\n        }\n\n        return table;\n    };\n\n    const columns = [\n        { label: \"Participant\", accessor: \"participant\", sortable: true },\n        // { label: \"Match W-L\", accessor: \"match_w_l\", sortable: false },\n        { label: \"Set win\", accessor: \"win\", sortable: true },\n        { label: \"Set loose\", accessor: \"loose\", sortable: true },\n        { label: \"Set draw\", accessor: \"draw\", sortable: true },\n        // { label: \"Berger\", accessor: \"berger\", sortable: true },\n        {\n            label: \"Scores\",\n            accessor: \"scores\",\n            sortable: true,\n            sortbyOrder: \"desc\",\n        },\n    ];\n\n    useEffect(() => {\n        setTable(createTable(bracket));\n    }, [bracket]);\n\n    return (\n        <div>\n            <div className={`${classes.bracket}`}>\n                {bracket.map((round) => (\n                    <Fragment>\n                        <div className={`${classes.row}`}>\n                            {round.matches.map((match) => (\n                                <div className={`${classes.match}`}>\n                                    {match.info.map((team) => (\n                                        <div className={`${classes.team}`}>\n                                            <div className={`${classes.name}`}>{team.participant}</div>\n                                            <div className={`${classes.score}`}>{team.participant_score}</div>\n                                        </div>\n                                    ))}\n                                    <div className={classes.button_container}>\n                                        {(user !== null &&\n                                            (tournament.owner == user.username ||\n                                                tournament.moderators.includes(user.username))) ||\n                                        anonymous ? (\n                                            <Fragment>\n                                                <button\n                                                    className={classes.icon_button}\n                                                    onClick={() => openInfoModal(match)}\n                                                >\n                                                    <MatchInfoIcon />\n                                                </button>\n                                                <button\n                                                    className={classes.icon_button}\n                                                    onClick={() => openEditModal(match)}\n                                                >\n                                                    <MatchJudgeIcon />\n                                                </button>\n                                            </Fragment>\n                                        ) : (\n                                            <button\n                                                className={classes.icon_button}\n                                                onClick={() => openInfoModal(match)}\n                                            >\n                                                <MatchInfoIcon />\n                                            </button>\n                                        )}\n                                    </div>\n                                </div>\n                            ))}\n                        </div>\n                    </Fragment>\n                ))}\n            </div>\n            <MySortebleTable table={table} columns={columns} />\n            <EditModal modalEditShow={modalEditShow} setEditMatchCardModalShow={setEditMatchCardModalShow} match={{}} />\n            <InfoModal modalShow={modalShow} setMatchCardModalShow={setMatchCardModalShow} match={{}} />\n        </div>\n    );\n};\n\nexport default RoundRobin;\n","/home/indiora/ATS/frontend/src/components/Brackets/SW/Swiss.jsx",["631","632","633","634","635","636","637","638","639","640","641","642","643","644","645","646"],[],"import { useState, useContext, useEffect, Fragment } from \"react\";\nimport classes from \"./Swiss.module.css\";\nimport MatchInfoIcon from \"../../../assets/svg/MatchInfoIcon\";\nimport MatchJudgeIcon from \"../../../assets/svg/MatchJudgeIcon\";\nimport InfoModal from \"../Modals/InfoModal/InfoModal.jsx\";\nimport EditModal from \"../Modals/EditModal/EditModal.jsx\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setCurrentMatch, setCurrentBracketId } from \"../../../store/bracket.js\";\nimport MySortebleTable from \"../../UI/SortebleTable/SortebleTable.jsx\";\nimport { AuthContext } from \"../../../context/index.js\";\n\nconst Swiss = ({ bracket, bracketId }) => {\n    const dispatch = useDispatch();\n    const [modalShow, setMatchCardModalShow] = useState(false);\n    const [modalEditShow, setEditMatchCardModalShow] = useState(false);\n    const [table, setTable] = useState([]);\n    const { user } = useContext(AuthContext);\n    const tournament = useSelector((state) => state.tournament);\n    const anonymous = useSelector((state) => state.bracket.anonymous);\n\n    const openInfoModal = (match) => {\n        setMatchCardModalShow(true);\n        dispatch(setCurrentMatch({ currentMatch: match }));\n    };\n\n    const openEditModal = (match) => {\n        setEditMatchCardModalShow(true);\n        dispatch(setCurrentMatch({ currentMatch: match }));\n        dispatch(setCurrentBracketId({ currentBracketId: bracketId }));\n    };\n\n    const createTable = (bracket) => {\n        let table = [];\n        bracket[0]?.matches.map((match) => {\n            let draw = false;\n            let max_score = Math.max(...match.info.map((participant) => participant.participant_score));\n            if (\n                match.info.filter((participant) => participant.participant_score == max_score).length > 1 &&\n                match.state == \"PLAYED\"\n            ) {\n                draw = true;\n            }\n\n            match.info.map((i) => {\n                let win_cnt = 0;\n                let loose_cnt = 0;\n\n                if (match.state == \"PLAYED\" && draw == false) {\n                    if (i.participant_score == max_score) {\n                        win_cnt = 1;\n                    } else {\n                        loose_cnt = 1;\n                    }\n                }\n                table.push({\n                    participant: i.participant,\n                    win: win_cnt,\n                    loose: loose_cnt,\n                    draw: draw ? 1 : 0,\n                    scores: 0 * win_cnt + 0 * loose_cnt + 0 * draw ? 1 : 0,\n                });\n            });\n        });\n\n        for (let round of bracket.slice(1)) {\n            round?.matches?.map((match) => {\n                let draw = false;\n                let max_score = Math.max(...match.info.map((participant) => participant.participant_score));\n                if (\n                    match.info.filter((participant) => participant.participant_score == max_score).length > 1 &&\n                    match.state == \"PLAYED\"\n                ) {\n                    draw = true;\n                }\n                console.log(\"heeree\");\n\n                match.info.map((i) => {\n                    let win_cnt = 0;\n                    let loose_cnt = 0;\n\n                    if (match.state == \"PLAYED\" && draw == false) {\n                        if (i.participant_score == max_score) {\n                            win_cnt = 1;\n                        } else {\n                            loose_cnt = 1;\n                        }\n                    }\n                    let row = table.filter((row) => row.participant == i.participant)[0];\n                    if (row !== undefined) {\n                        row.win += win_cnt;\n                        row.loose += loose_cnt;\n                        row.draw += draw ? 1 : 0;\n                        row.scores += 0 * win_cnt + 0 * loose_cnt + 0 * draw ? 1 : 0;\n                        console.log(i.participant);\n                    }\n                });\n            });\n        }\n\n        return table;\n    };\n\n    const columns = [\n        { label: \"Participant\", accessor: \"participant\", sortable: true },\n        // { label: \"Match W-L\", accessor: \"match_w_l\", sortable: false },\n        { label: \"Set win\", accessor: \"win\", sortable: true },\n        { label: \"Set loose\", accessor: \"loose\", sortable: true },\n        { label: \"Set draw\", accessor: \"draw\", sortable: true },\n        // { label: \"Berger\", accessor: \"berger\", sortable: true },\n        {\n            label: \"Scores\",\n            accessor: \"scores\",\n            sortable: true,\n            sortbyOrder: \"desc\",\n        },\n    ];\n\n    useEffect(() => {\n        setTable(createTable(bracket));\n    }, [bracket]);\n\n    return (\n        <div>\n            <div className={`${classes.bracket}`}>\n                {bracket.map((round) => (\n                    <Fragment>\n                        <div className={`${classes.row}`}>\n                            {round.matches.map((match) => (\n                                <div className={`${classes.match}`}>\n                                    {match.info.map((team) => (\n                                        <div className={`${classes.team}`}>\n                                            <div className={`${classes.name}`}>{team.participant}</div>\n                                            <div className={`${classes.score}`}>{team.participant_score}</div>\n                                        </div>\n                                    ))}\n                                    <div className={classes.button_container}>\n                                        {(user !== null &&\n                                            (tournament.owner == user.username ||\n                                                tournament.moderators.includes(user.username))) ||\n                                        anonymous ? (\n                                            <Fragment>\n                                                <button\n                                                    className={classes.icon_button}\n                                                    onClick={() => openInfoModal(match)}\n                                                >\n                                                    <MatchInfoIcon />\n                                                </button>\n                                                <button\n                                                    className={classes.icon_button}\n                                                    onClick={() => openEditModal(match)}\n                                                >\n                                                    <MatchJudgeIcon />\n                                                </button>\n                                            </Fragment>\n                                        ) : (\n                                            <button\n                                                className={classes.icon_button}\n                                                onClick={() => openInfoModal(match)}\n                                            >\n                                                <MatchInfoIcon />\n                                            </button>\n                                        )}\n                                    </div>\n                                </div>\n                            ))}\n                        </div>\n                    </Fragment>\n                ))}\n            </div>\n            <MySortebleTable table={table} columns={columns} />\n            <EditModal modalEditShow={modalEditShow} setEditMatchCardModalShow={setEditMatchCardModalShow} match={{}} />\n            <InfoModal modalShow={modalShow} setMatchCardModalShow={setMatchCardModalShow} match={{}} />\n        </div>\n    );\n};\n\nexport default Swiss;\n","/home/indiora/ATS/frontend/src/components/Brackets/Modals/EditModal/EditModal.jsx",["647","648","649","650","651","652"],[],"import Modal from \"react-bootstrap/Modal\";\nimport MyButton from \"../../../UI/MyButton/MyButton\";\nimport MyModal from \"../../../UI/MyModal/MyModal\";\nimport MyRadioButton from \"../../../UI/MyRadioButton/MyRadioButton\";\nimport classes from \"./EditModal.module.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport React, { useState } from \"react\";\nimport bracketApi from \"../../../../services/api/bracketApi\";\nimport { changeCurrentMatchInfo, changeBracket } from \"../../../../store/bracket\";\nimport useAxios from \"../../../../API/useAxios\";\nimport axios from \"axios\";\n\nconst EditModal = ({ modalEditShow, setEditMatchCardModalShow }) => {\n    const bracket = useSelector((state) => state.bracket);\n    const match = useSelector((state) => state.bracket.currentMatch);\n    const participantCount = match?.info.length;\n\n    const [matchState, setMatchState] = useState(match?.state);\n    const [matchTime, setMatchTime] = useState(match?.start_time);\n    const [matchResults, setMatchResults] = useState([]);\n    const dispatch = useDispatch();\n    const api = useAxios();\n    const publick_api = axios;\n\n    const matchStateHandler = (state) => {\n        setMatchState(state);\n    };\n\n    const matchTimeHandler = (e) => {\n        e.preventDefault();\n        setMatchTime(e.target.value);\n    };\n\n    const matchResultsHandler = (e, id) => {\n        e.preventDefault();\n        let _matchResults = matchResults;\n        dispatch(changeCurrentMatchInfo({ id: id, participant_score: e.target.value }));\n    };\n\n    const onSubmitHandler = () => {\n        let data = {\n            bracket_id: bracket.currentBracketId,\n            match_id: match.id,\n            start_time: matchTime,\n            state: matchState || match?.state,\n            match_results: match.info?.reduce(\n                (res, cur) => ({ ...res, [cur.id]: { score: cur.participant_score, participant: cur.participant } }),\n                {},\n            ),\n        };\n        if (bracket.anonymous) {\n            const response = bracketApi.updateAnonymousBracket(publick_api, data).then((response) => {\n                dispatch(changeBracket({ bracket: response.data }));\n                setEditMatchCardModalShow(false);\n            });\n        } else {\n            const response = bracketApi.updateBracket(api, data).then((response) => {\n                dispatch(changeBracket({ bracket: response.data }));\n                setEditMatchCardModalShow(false);\n            });\n        }\n    };\n\n    return (\n        <MyModal show={modalEditShow} onHide={() => setEditMatchCardModalShow(false)}>\n            <Modal.Header closeButton className={classes.myModalHeader}>\n                <div className={classes.matchTitle}>\n                    <input\n                        className={classes.dateInput}\n                        onChange={(e) => matchTimeHandler(e)}\n                        type=\"datetime-local\"\n                        defaultValue={match?.start_time?.slice(0, -4)}\n                    />\n                </div>\n            </Modal.Header>\n            <Modal.Body className={classes.myModalBody}>\n                <div className={classes.divVS}>\n                    <div className=\"row align-items-center\">\n                        <div className=\"col mb-4\">\n                            <h4>Participant</h4>\n                        </div>\n                        <div className=\"col mb-4\">\n                            <h4>Score</h4>\n                        </div>\n                    </div>\n                    {match?.info.map((p, i) => (\n                        <div className=\"mb-2\">\n                            <div className=\"row align-items-center\">\n                                <div className=\"col\">{p?.participant || \"NO TEAM \"}</div>\n                                <div className=\"col\">\n                                    <input\n                                        name={p?.participant}\n                                        className={classes.myInput}\n                                        onChange={(e) => matchResultsHandler(e, p.id)}\n                                        defaultValue={p?.participant_score}\n                                        type=\"text\"\n                                    />\n                                </div>\n                            </div>\n                            {i != participantCount - 1 && (\n                                <div className=\"row\">\n                                    <h4>VS</h4>\n                                </div>\n                            )}\n                            {i != participantCount - 1 && <div></div>}\n                        </div>\n                    ))}\n                    <p>Set State</p>\n                    <div>\n                        <MyRadioButton\n                            defValue={match?.state}\n                            radios={[\n                                { name: \"Scheduled\", value: \"SCHEDULED\" },\n                                { name: \"Played\", value: \"PLAYED\" },\n                            ]}\n                            onChange={matchStateHandler}\n                        />\n                    </div>\n                    <br />\n                    <MyButton onClick={onSubmitHandler}>Submit</MyButton>\n                </div>\n            </Modal.Body>\n        </MyModal>\n    );\n};\n\nexport default EditModal;\n","/home/indiora/ATS/frontend/src/components/Brackets/Modals/InfoModal/InfoModal.jsx",["653","654","655"],[],"import MyModal from \"../../../UI/MyModal/MyModal\";\nimport Modal from \"react-bootstrap/Modal\";\nimport classes from \"./InfoModal.module.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport moment from \"moment\";\nimport { Fragment } from \"react\";\n\nconst InfoModal = ({ modalShow, setMatchCardModalShow }) => {\n    const match = useSelector((state) => state.bracket.currentMatch);\n    const participantCount = match?.info.length;\n    return (\n        <MyModal show={modalShow} onHide={() => setMatchCardModalShow(false)}>\n            <Modal.Header closeButton className={classes.myModalHeader}>\n                <div className={classes.matchTitle}>\n                    {match?.start_time && (\n                        <span>{moment.parseZone(match?.start_time).format(\"DD.MM.YY h:mm a\") || \"\"}</span>\n                    )}\n                </div>\n            </Modal.Header>\n            <Modal.Body className={classes.myModalBody}>\n                <div className={classes.divVS}>\n                    <div className=\"row \">\n                        <div className=\"row align-items-center\">\n                            <div className=\"col mb-4\">\n                                <h4>Participant</h4>\n                            </div>\n                            <div className=\"col mb-4\">\n                                <h4>Score</h4>\n                            </div>\n                        </div>\n                        {match?.info.map((p, i) => (\n                            <Fragment>\n                                <div className=\"row align-items-center\">\n                                    <div className=\"col\">{p?.participant || \"NO TEAM \"}</div>\n                                    <div className=\"col\">{p?.participant_score}</div>\n                                </div>\n                                {i != participantCount - 1 && (\n                                    <div className=\"row\">\n                                        <h4>VS</h4>\n                                    </div>\n                                )}\n                                {i != participantCount - 1 && <div></div>}\n                            </Fragment>\n                        ))}\n                    </div>\n                </div>\n            </Modal.Body>\n        </MyModal>\n    );\n};\n\nexport default InfoModal;\n","/home/indiora/ATS/frontend/src/components/Brackets/DE/DoubleElimination.jsx",["656","657","658","659","660","661","662","663","664","665","666","667","668","669"],[],"/home/indiora/ATS/frontend/src/components/BracketController/BracketController.jsx",["670","671","672","673","674","675","676","677","678"],[],"import { useState, useContext, Fragment } from \"react\";\nimport classes from \"./BracketController.module.css\";\nimport SingleElimination from \"../Brackets/SE/SingleElimination\";\nimport DoubleElimination from \"../Brackets/DE/DoubleElimination\";\nimport RoundRobin from \"../Brackets/RR/RoundRobin\";\nimport Swiss from \"../Brackets/SW/Swiss\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nconst BracketController = () => {\n    const final_bracket = useSelector((state) => state.bracket.brackets).filter((br) => [1, 2, 3, 4].includes(br.type));\n    const group_brackets = useSelector((state) => state.bracket.brackets).filter((br) =>\n        [5, 6, 7, 8].includes(br.type),\n    );\n\n    return (\n        <Fragment>\n            {group_brackets.map((br, i) => {\n                if ((br.type === 1) | (br.type === 5)) {\n                    return (\n                        <Fragment>\n                            <div className={`${classes.stage}`}>Group {i + 1}</div>\n                            <SingleElimination bracket={br.rounds} bracketId={br.id} />\n                        </Fragment>\n                    );\n                } else if ((br.type === 2) | (br.type === 6)) {\n                    return (\n                        <Fragment>\n                            <div className={`${classes.stage}`}>Group {i + 1}</div>\n                            <DoubleElimination bracket={br.rounds} bracketId={br.id} />\n                        </Fragment>\n                    );\n                } else if ((br.type == 3) | (br.type === 7)) {\n                    return (\n                        <Fragment>\n                            <div className={`${classes.stage}`}>Group {i + 1}</div>\n                            <RoundRobin bracket={br.rounds} bracketId={br.id} />\n                        </Fragment>\n                    );\n                } else if ((br.type == 4) | (br.type === 8)) {\n                    return (\n                        <Fragment>\n                            <div className={`${classes.stage}`}>Group {i + 1}</div>\n                            <Swiss bracket={br.rounds} bracketId={br.id} />\n                        </Fragment>\n                    );\n                }\n            })}\n            {group_brackets.length > 0 && <div className={`${classes.stage}`}>Final</div>}\n            {final_bracket.map((br) => {\n                if ((br.type === 1) | (br.type === 5)) {\n                    return <SingleElimination bracket={br.rounds} bracketId={br.id} />;\n                } else if ((br.type === 2) | (br.type === 6)) {\n                    return <DoubleElimination bracket={br.rounds} bracketId={br.id} />;\n                } else if ((br.type == 3) | (br.type === 7)) {\n                    return <RoundRobin bracket={br.rounds} bracketId={br.id} />;\n                } else if ((br.type == 4) | (br.type === 8)) {\n                    return <Swiss bracket={br.rounds} bracketId={br.id} />;\n                }\n            })}\n        </Fragment>\n    );\n};\n\nexport default BracketController;\n","/home/indiora/ATS/frontend/src/pages/CreateTournament/TournamentInfoInput/TournamentInfoInput.jsx",["679","680","681"],[],"import React, { useState, useContext, Fragment } from \"react\";\nimport \"../../../styles/App.css\";\nimport Form from \"react-bootstrap/Form\";\nimport Card from \"react-bootstrap/Card\";\nimport UploadButton from \"../../../components/UI/UploadButton/UploadButton\";\nimport MyFormGroupInput from \"../../../components/UI/MyFormGroupInput/MyFormGroupInput\";\nimport MyCard from \"../../../components/UI/MyCard/MyCard\";\nimport classes from \"./TournamentInfoInput.module.css\";\n\nconst TournamentInfoInput = ({\n    errors,\n    register,\n    inputChangeHandler,\n    setInputFile,\n    inputRadioChangeHandler,\n    tournamentType,\n    privateTournament,\n    setPrivateTournamnet,\n}) => {\n    return (\n        <MyCard>\n            <Card.Header className=\"card-header-text\">Basic Info</Card.Header>\n            <Card.Body>\n                <MyFormGroupInput\n                    label=\"Title\"\n                    name=\"title\"\n                    type=\"text\"\n                    errors={errors}\n                    register={register}\n                    validationSchema={{\n                        required: \"⚠ This input is required.\",\n                    }}\n                    onChange={inputChangeHandler}\n                ></MyFormGroupInput>\n                <MyFormGroupInput\n                    label=\"Description\"\n                    name=\"content\"\n                    as=\"textarea\"\n                    errors={errors}\n                    register={register}\n                    validationSchema={{}}\n                    onChange={inputChangeHandler}\n                ></MyFormGroupInput>\n                <MyFormGroupInput\n                    label=\"Game\"\n                    name=\"game\"\n                    errors={errors}\n                    register={register}\n                    validationSchema={{\n                        required: \"⚠ This input is required.\",\n                    }}\n                    onChange={inputChangeHandler}\n                ></MyFormGroupInput>\n                <MyFormGroupInput\n                    label=\"Start of the tournament\"\n                    name=\"start_time\"\n                    type=\"datetime-local\"\n                    errors={errors}\n                    register={register}\n                    validationSchema={{\n                        required: \"⚠ This input is required.\",\n                    }}\n                    onChange={inputChangeHandler}\n                ></MyFormGroupInput>\n                <Form.Group className=\"mb-3\">\n                    <Form.Label className={`${classes.myFormLabel}`}>Poster</Form.Label>\n                    <UploadButton setInputFileValue={setInputFile} />\n                </Form.Group>\n                <p>\n                    Tournament type (private tournaments are not visible in the general list and can be accessed only\n                    via a link)\n                </p>\n                <div className=\"mb-3\">\n                    <Form.Check\n                        inline\n                        label=\"public\"\n                        type=\"radio\"\n                        value=\"0\"\n                        checked={privateTournament === false}\n                        onChange={() => {\n                            setPrivateTournamnet(false);\n                        }}\n                    ></Form.Check>\n                    <Form.Check\n                        inline\n                        label=\"private\"\n                        type=\"radio\"\n                        value=\"1\"\n                        checked={privateTournament === true}\n                        onChange={() => {\n                            setPrivateTournamnet(true);\n                        }}\n                    ></Form.Check>\n                </div>\n                {/* <p>Tournament type</p>\n      <div className=\"mb-3\">\n        <Form.Check\n          inline\n          label=\"One stage\"\n          name=\"tournament_type\"\n          type=\"radio\"\n          value=\"0\"\n          checked={tournamentType === \"0\" ? true : false}\n          onChange={(event) => {\n            inputRadioChangeHandler(event);\n          }}\n        ></Form.Check>\n        <Form.Check\n          inline\n          label=\"Group two stage\"\n          name=\"tournament_type\"\n          type=\"radio\"\n          value=\"1\"\n          checked={tournamentType === \"1\" ? true : false}\n          onChange={(event) => {\n            inputRadioChangeHandler(event);\n          }}\n        ></Form.Check>\n      </div> */}\n            </Card.Body>\n        </MyCard>\n    );\n};\n\nexport default TournamentInfoInput;\n","/home/indiora/ATS/frontend/src/components/ModeratorsSettings/ModeratorSettings.jsx",["682","683","684"],[],"import React, { useState, useEffect, Fragment } from \"react\";\nimport classes from \"./ModeratorSettings.module.css\";\nimport tournamentApi from \"../../services/api/tournamentApi\";\nimport useAxios from \"../../API/useAxios\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addModerator, deleteModerator } from \"../../store/tournament\";\nimport MyButton from \"../UI/MyButton/MyButton\";\n\nconst ModeratorSettings = () => {\n    const api = useAxios();\n    const [username, setUserName] = useState(\"\");\n    const tournament = useSelector((state) => state.tournament);\n    const dispatch = useDispatch();\n\n    const deleteModeratorHandler = (username) => {\n        let data = {\n            tournament_id: tournament.id,\n            username: username,\n        };\n\n        const reponse = tournamentApi.deleteModerator(api, { headers: {}, data: data }).then(() => {\n            dispatch(deleteModerator({ moderator: username }));\n        });\n    };\n\n    const addModeratorHandler = () => {\n        let data = {\n            tournament_id: tournament.id,\n            username: username,\n        };\n\n        const reponse = tournamentApi.createModerator(api, data).then(() => {\n            dispatch(addModerator({ moderator: username }));\n        });\n    };\n\n    return (\n        <div className={`${classes.modaretor_container} row`}>\n            {tournament.moderators.length > 0 && (\n                <Fragment>\n                    <h5>Moderator list</h5>\n                    <ul className={`${classes.moderators_container} list-group list-group-flush mb-4`}>\n                        {tournament.moderators?.map((username) => (\n                            <li\n                                className={`${classes.moderators_container} list-group-item d-flex justify-content-between align-items-start`}\n                            >\n                                <div class=\"me-auto\">{username}</div>\n                                <div\n                                    onClick={() => {\n                                        deleteModeratorHandler(username);\n                                    }}\n                                    className={`${classes.close} row`}\n                                ></div>\n                            </li>\n                        ))}\n                    </ul>\n                </Fragment>\n            )}\n            <h5>Add moderator</h5>\n            <div className={`${classes.add_moderator_container}`}>\n                <input\n                    type=\"text\"\n                    className={`${classes.add_moderator_input}`}\n                    placeholder=\"Username\"\n                    aria-label=\"Recipient's username with two button addons\"\n                    value={username}\n                    onChange={(e) => {\n                        setUserName(e.target.value);\n                    }}\n                ></input>\n                <MyButton\n                    onClick={(e) => addModeratorHandler(e)}\n                    additionalCl={`${classes.add_moderator_button}`}\n                    type=\"button\"\n                >\n                    Add\n                </MyButton>\n            </div>\n        </div>\n    );\n};\n\nexport default ModeratorSettings;\n","/home/indiora/ATS/frontend/src/services/api/auxiliaryApi.js",["685"],[],"/home/indiora/ATS/frontend/src/services/api/tournamentApi.js",["686"],[],"/home/indiora/ATS/frontend/src/services/api/profileApi.js",[],[],"/home/indiora/ATS/frontend/src/store/user.js",["687"],[],"import { createSlice } from \"@reduxjs/toolkit\";\n\nconst userSlice = createSlice({\n    name: \"user\",\n    initialState: {\n        subscriptions: [],\n    },\n    reducers: {\n        setUser(state, action) {},\n\n        setTournamnetSubscriptions(state, action) {\n            state.subscriptions = [...action.payload.subscriptions];\n        },\n\n        followTournament(state, action) {\n            state.subscriptions = [...state.subscriptions, action.payload.subscriptions];\n        },\n\n        unFollowTournament(state, action) {\n            state.subscriptions = state.subscriptions.filter((username) => username != action.payload.subscriptions);\n        },\n\n        clearUser(state) {},\n    },\n});\n\nexport const { setUser, setTournamnetSubscriptions, followTournament, unFollowTournament, clearUser } =\n    userSlice.actions;\n\nexport default userSlice.reducer;\n","/home/indiora/ATS/frontend/src/components/Brackets/DE/DoubleEliminationLow/DoubleEliminationLow.jsx",["688","689"],[],"/home/indiora/ATS/frontend/src/Variables.js",[],[],{"ruleId":"690","severity":1,"message":"691","line":1,"column":17,"nodeType":"692","messageId":"693","endLine":1,"endColumn":26},{"ruleId":"690","severity":1,"message":"694","line":1,"column":28,"nodeType":"692","messageId":"693","endLine":1,"endColumn":36},{"ruleId":"690","severity":1,"message":"695","line":2,"column":25,"nodeType":"692","messageId":"693","endLine":2,"endColumn":30},{"ruleId":"690","severity":1,"message":"696","line":2,"column":32,"nodeType":"692","messageId":"693","endLine":2,"endColumn":38},{"ruleId":"690","severity":1,"message":"697","line":2,"column":10,"nodeType":"692","messageId":"693","endLine":2,"endColumn":23},{"ruleId":"690","severity":1,"message":"698","line":11,"column":7,"nodeType":"692","messageId":"693","endLine":11,"endColumn":10},{"ruleId":"699","severity":1,"message":"700","line":59,"column":35,"nodeType":"701","messageId":"702","endLine":59,"endColumn":37},{"ruleId":"690","severity":1,"message":"694","line":1,"column":17,"nodeType":"692","messageId":"693","endLine":1,"endColumn":25},{"ruleId":"690","severity":1,"message":"703","line":2,"column":8,"nodeType":"692","messageId":"693","endLine":2,"endColumn":15},{"ruleId":"690","severity":1,"message":"704","line":1,"column":8,"nodeType":"692","messageId":"693","endLine":1,"endColumn":16},{"ruleId":"690","severity":1,"message":"705","line":2,"column":8,"nodeType":"692","messageId":"693","endLine":2,"endColumn":13},{"ruleId":"690","severity":1,"message":"706","line":3,"column":7,"nodeType":"692","messageId":"693","endLine":3,"endColumn":14},{"ruleId":"707","severity":1,"message":"708","line":16,"column":8,"nodeType":"709","endLine":16,"endColumn":19,"suggestions":"710"},{"ruleId":"690","severity":1,"message":"694","line":1,"column":16,"nodeType":"692","messageId":"693","endLine":1,"endColumn":24},{"ruleId":"690","severity":1,"message":"711","line":13,"column":23,"nodeType":"692","messageId":"693","endLine":13,"endColumn":34},{"ruleId":"690","severity":1,"message":"712","line":20,"column":12,"nodeType":"692","messageId":"693","endLine":20,"endColumn":19},{"ruleId":"690","severity":1,"message":"713","line":21,"column":12,"nodeType":"692","messageId":"693","endLine":21,"endColumn":19},{"ruleId":"690","severity":1,"message":"714","line":29,"column":9,"nodeType":"692","messageId":"693","endLine":29,"endColumn":17},{"ruleId":"690","severity":1,"message":"715","line":30,"column":9,"nodeType":"692","messageId":"693","endLine":30,"endColumn":21},{"ruleId":"690","severity":1,"message":"716","line":31,"column":22,"nodeType":"692","messageId":"693","endLine":31,"endColumn":28},{"ruleId":"690","severity":1,"message":"717","line":32,"column":9,"nodeType":"692","messageId":"693","endLine":32,"endColumn":14},{"ruleId":"690","severity":1,"message":"718","line":52,"column":11,"nodeType":"692","messageId":"693","endLine":52,"endColumn":30},{"ruleId":"690","severity":1,"message":"719","line":57,"column":11,"nodeType":"692","messageId":"693","endLine":57,"endColumn":30},{"ruleId":"690","severity":1,"message":"720","line":81,"column":15,"nodeType":"692","messageId":"693","endLine":81,"endColumn":23},{"ruleId":"699","severity":1,"message":"700","line":92,"column":79,"nodeType":"701","messageId":"702","endLine":92,"endColumn":81},{"ruleId":"699","severity":1,"message":"700","line":99,"column":79,"nodeType":"701","messageId":"702","endLine":99,"endColumn":81},{"ruleId":"699","severity":1,"message":"700","line":170,"column":42,"nodeType":"701","messageId":"702","endLine":170,"endColumn":44},{"ruleId":"707","severity":1,"message":"721","line":15,"column":8,"nodeType":"709","endLine":15,"endColumn":15,"suggestions":"722"},{"ruleId":"690","severity":1,"message":"723","line":2,"column":36,"nodeType":"692","messageId":"693","endLine":2,"endColumn":44},{"ruleId":"690","severity":1,"message":"711","line":13,"column":23,"nodeType":"692","messageId":"693","endLine":13,"endColumn":34},{"ruleId":"690","severity":1,"message":"720","line":69,"column":15,"nodeType":"692","messageId":"693","endLine":69,"endColumn":23},{"ruleId":"699","severity":1,"message":"700","line":133,"column":50,"nodeType":"701","messageId":"702","endLine":133,"endColumn":52},{"ruleId":"699","severity":1,"message":"700","line":185,"column":50,"nodeType":"701","messageId":"702","endLine":185,"endColumn":52},{"ruleId":"690","severity":1,"message":"691","line":2,"column":27,"nodeType":"692","messageId":"693","endLine":2,"endColumn":36},{"ruleId":"690","severity":1,"message":"724","line":5,"column":12,"nodeType":"692","messageId":"693","endLine":5,"endColumn":17},{"ruleId":"690","severity":1,"message":"725","line":5,"column":19,"nodeType":"692","messageId":"693","endLine":5,"endColumn":27},{"ruleId":"690","severity":1,"message":"726","line":1,"column":8,"nodeType":"692","messageId":"693","endLine":1,"endColumn":14},{"ruleId":"690","severity":1,"message":"694","line":1,"column":17,"nodeType":"692","messageId":"693","endLine":1,"endColumn":25},{"ruleId":"690","severity":1,"message":"691","line":1,"column":36,"nodeType":"692","messageId":"693","endLine":1,"endColumn":45},{"ruleId":"690","severity":1,"message":"727","line":3,"column":8,"nodeType":"692","messageId":"693","endLine":3,"endColumn":16},{"ruleId":"690","severity":1,"message":"728","line":24,"column":11,"nodeType":"692","messageId":"693","endLine":24,"endColumn":19},{"ruleId":"699","severity":1,"message":"729","line":139,"column":18,"nodeType":"701","messageId":"702","endLine":139,"endColumn":20},{"ruleId":"690","severity":1,"message":"694","line":1,"column":28,"nodeType":"692","messageId":"693","endLine":1,"endColumn":36},{"ruleId":"690","severity":1,"message":"730","line":5,"column":8,"nodeType":"692","messageId":"693","endLine":5,"endColumn":18},{"ruleId":"690","severity":1,"message":"731","line":6,"column":8,"nodeType":"692","messageId":"693","endLine":6,"endColumn":16},{"ruleId":"690","severity":1,"message":"732","line":7,"column":8,"nodeType":"692","messageId":"693","endLine":7,"endColumn":16},{"ruleId":"690","severity":1,"message":"733","line":8,"column":8,"nodeType":"692","messageId":"693","endLine":8,"endColumn":13},{"ruleId":"690","severity":1,"message":"734","line":22,"column":41,"nodeType":"692","messageId":"693","endLine":22,"endColumn":49},{"ruleId":"690","severity":1,"message":"720","line":23,"column":15,"nodeType":"692","messageId":"693","endLine":23,"endColumn":23},{"ruleId":"707","severity":1,"message":"735","line":31,"column":8,"nodeType":"709","endLine":31,"endColumn":10,"suggestions":"736"},{"ruleId":"707","severity":1,"message":"737","line":37,"column":8,"nodeType":"709","endLine":37,"endColumn":10,"suggestions":"738"},{"ruleId":"699","severity":1,"message":"700","line":51,"column":53,"nodeType":"701","messageId":"702","endLine":51,"endColumn":55},{"ruleId":"690","severity":1,"message":"739","line":72,"column":11,"nodeType":"692","messageId":"693","endLine":72,"endColumn":37},{"ruleId":"690","severity":1,"message":"720","line":90,"column":15,"nodeType":"692","messageId":"693","endLine":90,"endColumn":23},{"ruleId":"699","severity":1,"message":"700","line":91,"column":33,"nodeType":"701","messageId":"702","endLine":91,"endColumn":35},{"ruleId":"699","severity":1,"message":"700","line":140,"column":72,"nodeType":"701","messageId":"702","endLine":140,"endColumn":74},{"ruleId":"699","severity":1,"message":"700","line":140,"column":106,"nodeType":"701","messageId":"702","endLine":140,"endColumn":108},{"ruleId":"699","severity":1,"message":"700","line":151,"column":88,"nodeType":"701","messageId":"702","endLine":151,"endColumn":90},{"ruleId":"699","severity":1,"message":"700","line":155,"column":88,"nodeType":"701","messageId":"702","endLine":155,"endColumn":90},{"ruleId":"699","severity":1,"message":"700","line":162,"column":84,"nodeType":"701","messageId":"702","endLine":162,"endColumn":86},{"ruleId":"699","severity":1,"message":"700","line":172,"column":96,"nodeType":"701","messageId":"702","endLine":172,"endColumn":98},{"ruleId":"699","severity":1,"message":"700","line":187,"column":80,"nodeType":"701","messageId":"702","endLine":187,"endColumn":82},{"ruleId":"690","severity":1,"message":"740","line":1,"column":27,"nodeType":"692","messageId":"693","endLine":1,"endColumn":37},{"ruleId":"690","severity":1,"message":"741","line":5,"column":10,"nodeType":"692","messageId":"693","endLine":5,"endColumn":21},{"ruleId":"690","severity":1,"message":"742","line":6,"column":10,"nodeType":"692","messageId":"693","endLine":6,"endColumn":21},{"ruleId":"699","severity":1,"message":"700","line":65,"column":19,"nodeType":"701","messageId":"702","endLine":65,"endColumn":21},{"ruleId":"699","severity":1,"message":"700","line":67,"column":18,"nodeType":"701","messageId":"702","endLine":67,"endColumn":20},{"ruleId":"690","severity":1,"message":"743","line":76,"column":23,"nodeType":"692","messageId":"693","endLine":76,"endColumn":28},{"ruleId":"690","severity":1,"message":"739","line":82,"column":11,"nodeType":"692","messageId":"693","endLine":82,"endColumn":37},{"ruleId":"699","severity":1,"message":"700","line":100,"column":53,"nodeType":"701","messageId":"702","endLine":100,"endColumn":55},{"ruleId":"690","severity":1,"message":"720","line":122,"column":15,"nodeType":"692","messageId":"693","endLine":122,"endColumn":23},{"ruleId":"699","severity":1,"message":"700","line":125,"column":37,"nodeType":"701","messageId":"702","endLine":125,"endColumn":39},{"ruleId":"707","severity":1,"message":"744","line":136,"column":8,"nodeType":"709","endLine":136,"endColumn":35,"suggestions":"745"},{"ruleId":"699","severity":1,"message":"700","line":243,"column":76,"nodeType":"701","messageId":"702","endLine":243,"endColumn":78},{"ruleId":"699","severity":1,"message":"700","line":243,"column":110,"nodeType":"701","messageId":"702","endLine":243,"endColumn":112},{"ruleId":"699","severity":1,"message":"700","line":254,"column":92,"nodeType":"701","messageId":"702","endLine":254,"endColumn":94},{"ruleId":"699","severity":1,"message":"700","line":258,"column":92,"nodeType":"701","messageId":"702","endLine":258,"endColumn":94},{"ruleId":"699","severity":1,"message":"700","line":265,"column":88,"nodeType":"701","messageId":"702","endLine":265,"endColumn":90},{"ruleId":"699","severity":1,"message":"700","line":275,"column":100,"nodeType":"701","messageId":"702","endLine":275,"endColumn":102},{"ruleId":"699","severity":1,"message":"700","line":299,"column":84,"nodeType":"701","messageId":"702","endLine":299,"endColumn":86},{"ruleId":"699","severity":1,"message":"729","line":394,"column":32,"nodeType":"701","messageId":"702","endLine":394,"endColumn":34},{"ruleId":"690","severity":1,"message":"746","line":25,"column":29,"nodeType":"692","messageId":"693","endLine":25,"endColumn":38},{"ruleId":"690","severity":1,"message":"747","line":25,"column":40,"nodeType":"692","messageId":"693","endLine":25,"endColumn":45},{"ruleId":"707","severity":1,"message":"748","line":52,"column":8,"nodeType":"709","endLine":52,"endColumn":10,"suggestions":"749"},{"ruleId":"690","severity":1,"message":"720","line":61,"column":15,"nodeType":"692","messageId":"693","endLine":61,"endColumn":23},{"ruleId":"699","severity":1,"message":"700","line":72,"column":37,"nodeType":"701","messageId":"702","endLine":72,"endColumn":39},{"ruleId":"690","severity":1,"message":"750","line":15,"column":19,"nodeType":"692","messageId":"693","endLine":15,"endColumn":29},{"ruleId":"690","severity":1,"message":"751","line":33,"column":12,"nodeType":"692","messageId":"693","endLine":33,"endColumn":14},{"ruleId":"690","severity":1,"message":"752","line":33,"column":16,"nodeType":"692","messageId":"693","endLine":33,"endColumn":21},{"ruleId":"690","severity":1,"message":"753","line":34,"column":12,"nodeType":"692","messageId":"693","endLine":34,"endColumn":17},{"ruleId":"690","severity":1,"message":"754","line":34,"column":19,"nodeType":"692","messageId":"693","endLine":34,"endColumn":27},{"ruleId":"690","severity":1,"message":"755","line":35,"column":12,"nodeType":"692","messageId":"693","endLine":35,"endColumn":22},{"ruleId":"690","severity":1,"message":"756","line":35,"column":24,"nodeType":"692","messageId":"693","endLine":35,"endColumn":37},{"ruleId":"690","severity":1,"message":"747","line":44,"column":40,"nodeType":"692","messageId":"693","endLine":44,"endColumn":45},{"ruleId":"690","severity":1,"message":"734","line":49,"column":41,"nodeType":"692","messageId":"693","endLine":49,"endColumn":49},{"ruleId":"690","severity":1,"message":"720","line":55,"column":15,"nodeType":"692","messageId":"693","endLine":55,"endColumn":23},{"ruleId":"699","severity":1,"message":"700","line":56,"column":33,"nodeType":"701","messageId":"702","endLine":56,"endColumn":35},{"ruleId":"707","severity":1,"message":"757","line":73,"column":8,"nodeType":"709","endLine":73,"endColumn":10,"suggestions":"758"},{"ruleId":"707","severity":1,"message":"759","line":79,"column":8,"nodeType":"709","endLine":79,"endColumn":23,"suggestions":"760"},{"ruleId":"699","severity":1,"message":"700","line":195,"column":57,"nodeType":"701","messageId":"702","endLine":195,"endColumn":59},{"ruleId":"690","severity":1,"message":"761","line":19,"column":19,"nodeType":"692","messageId":"693","endLine":19,"endColumn":27},{"ruleId":"690","severity":1,"message":"762","line":25,"column":39,"nodeType":"692","messageId":"693","endLine":25,"endColumn":48},{"ruleId":"707","severity":1,"message":"763","line":55,"column":8,"nodeType":"709","endLine":55,"endColumn":35,"suggestions":"764"},{"ruleId":"707","severity":1,"message":"765","line":69,"column":8,"nodeType":"709","endLine":69,"endColumn":21,"suggestions":"766"},{"ruleId":"690","severity":1,"message":"767","line":25,"column":20,"nodeType":"692","messageId":"693","endLine":25,"endColumn":29},{"ruleId":"690","severity":1,"message":"720","line":49,"column":15,"nodeType":"692","messageId":"693","endLine":49,"endColumn":23},{"ruleId":"690","severity":1,"message":"720","line":62,"column":15,"nodeType":"692","messageId":"693","endLine":62,"endColumn":23},{"ruleId":"690","severity":1,"message":"768","line":65,"column":27,"nodeType":"692","messageId":"693","endLine":65,"endColumn":36},{"ruleId":"690","severity":1,"message":"747","line":65,"column":38,"nodeType":"692","messageId":"693","endLine":65,"endColumn":43},{"ruleId":"707","severity":1,"message":"769","line":72,"column":8,"nodeType":"709","endLine":72,"endColumn":10,"suggestions":"770"},{"ruleId":"690","severity":1,"message":"771","line":6,"column":19,"nodeType":"692","messageId":"693","endLine":6,"endColumn":22},{"ruleId":"690","severity":1,"message":"720","line":12,"column":15,"nodeType":"692","messageId":"693","endLine":12,"endColumn":23},{"ruleId":"690","severity":1,"message":"720","line":23,"column":15,"nodeType":"692","messageId":"693","endLine":23,"endColumn":23},{"ruleId":"690","severity":1,"message":"772","line":2,"column":8,"nodeType":"692","messageId":"693","endLine":2,"endColumn":11},{"ruleId":"690","severity":1,"message":"773","line":3,"column":8,"nodeType":"692","messageId":"693","endLine":3,"endColumn":11},{"ruleId":"690","severity":1,"message":"774","line":13,"column":12,"nodeType":"692","messageId":"693","endLine":13,"endColumn":27},{"ruleId":"690","severity":1,"message":"775","line":13,"column":29,"nodeType":"692","messageId":"693","endLine":13,"endColumn":47},{"ruleId":"690","severity":1,"message":"720","line":19,"column":15,"nodeType":"692","messageId":"693","endLine":19,"endColumn":23},{"ruleId":"707","severity":1,"message":"776","line":23,"column":8,"nodeType":"709","endLine":23,"endColumn":10,"suggestions":"777"},{"ruleId":"690","severity":1,"message":"778","line":25,"column":11,"nodeType":"692","messageId":"693","endLine":25,"endColumn":19},{"ruleId":"690","severity":1,"message":"739","line":38,"column":11,"nodeType":"692","messageId":"693","endLine":38,"endColumn":37},{"ruleId":"690","severity":1,"message":"720","line":53,"column":15,"nodeType":"692","messageId":"693","endLine":53,"endColumn":23},{"ruleId":"699","severity":1,"message":"700","line":54,"column":33,"nodeType":"701","messageId":"702","endLine":54,"endColumn":35},{"ruleId":"690","severity":1,"message":"740","line":1,"column":20,"nodeType":"692","messageId":"693","endLine":1,"endColumn":30},{"ruleId":"690","severity":1,"message":"742","line":2,"column":10,"nodeType":"692","messageId":"693","endLine":2,"endColumn":21},{"ruleId":"690","severity":1,"message":"741","line":3,"column":10,"nodeType":"692","messageId":"693","endLine":3,"endColumn":21},{"ruleId":"690","severity":1,"message":"779","line":30,"column":21,"nodeType":"692","messageId":"693","endLine":30,"endColumn":31},{"ruleId":"780","severity":1,"message":"781","line":30,"column":31,"nodeType":"782","messageId":"783","endLine":30,"endColumn":33},{"ruleId":"699","severity":1,"message":"729","line":36,"column":79,"nodeType":"701","messageId":"702","endLine":36,"endColumn":81},{"ruleId":"699","severity":1,"message":"700","line":15,"column":31,"nodeType":"701","messageId":"702","endLine":15,"endColumn":33},{"ruleId":"690","severity":1,"message":"741","line":2,"column":10,"nodeType":"692","messageId":"693","endLine":2,"endColumn":21},{"ruleId":"699","severity":1,"message":"700","line":63,"column":63,"nodeType":"701","messageId":"702","endLine":63,"endColumn":65},{"ruleId":"780","severity":1,"message":"784","line":36,"column":41,"nodeType":"782","messageId":"785","endLine":36,"endColumn":43},{"ruleId":"699","severity":1,"message":"700","line":40,"column":82,"nodeType":"701","messageId":"702","endLine":40,"endColumn":84},{"ruleId":"699","severity":1,"message":"700","line":41,"column":29,"nodeType":"701","messageId":"702","endLine":41,"endColumn":31},{"ruleId":"780","severity":1,"message":"784","line":46,"column":32,"nodeType":"782","messageId":"785","endLine":46,"endColumn":34},{"ruleId":"699","severity":1,"message":"700","line":50,"column":33,"nodeType":"701","messageId":"702","endLine":50,"endColumn":35},{"ruleId":"699","severity":1,"message":"700","line":50,"column":53,"nodeType":"701","messageId":"702","endLine":50,"endColumn":55},{"ruleId":"699","severity":1,"message":"700","line":51,"column":45,"nodeType":"701","messageId":"702","endLine":51,"endColumn":47},{"ruleId":"780","severity":1,"message":"784","line":68,"column":41,"nodeType":"782","messageId":"785","endLine":68,"endColumn":43},{"ruleId":"699","severity":1,"message":"700","line":72,"column":86,"nodeType":"701","messageId":"702","endLine":72,"endColumn":88},{"ruleId":"699","severity":1,"message":"700","line":73,"column":33,"nodeType":"701","messageId":"702","endLine":73,"endColumn":35},{"ruleId":"780","severity":1,"message":"784","line":79,"column":36,"nodeType":"782","messageId":"785","endLine":79,"endColumn":38},{"ruleId":"699","severity":1,"message":"700","line":83,"column":37,"nodeType":"701","messageId":"702","endLine":83,"endColumn":39},{"ruleId":"699","severity":1,"message":"700","line":83,"column":57,"nodeType":"701","messageId":"702","endLine":83,"endColumn":59},{"ruleId":"699","severity":1,"message":"700","line":84,"column":49,"nodeType":"701","messageId":"702","endLine":84,"endColumn":51},{"ruleId":"699","severity":1,"message":"700","line":90,"column":69,"nodeType":"701","messageId":"702","endLine":90,"endColumn":71},{"ruleId":"699","severity":1,"message":"700","line":141,"column":63,"nodeType":"701","messageId":"702","endLine":141,"endColumn":65},{"ruleId":"780","severity":1,"message":"784","line":34,"column":41,"nodeType":"782","messageId":"785","endLine":34,"endColumn":43},{"ruleId":"699","severity":1,"message":"700","line":38,"column":82,"nodeType":"701","messageId":"702","endLine":38,"endColumn":84},{"ruleId":"699","severity":1,"message":"700","line":39,"column":29,"nodeType":"701","messageId":"702","endLine":39,"endColumn":31},{"ruleId":"780","severity":1,"message":"784","line":44,"column":32,"nodeType":"782","messageId":"785","endLine":44,"endColumn":34},{"ruleId":"699","severity":1,"message":"700","line":48,"column":33,"nodeType":"701","messageId":"702","endLine":48,"endColumn":35},{"ruleId":"699","severity":1,"message":"700","line":48,"column":53,"nodeType":"701","messageId":"702","endLine":48,"endColumn":55},{"ruleId":"699","severity":1,"message":"700","line":49,"column":45,"nodeType":"701","messageId":"702","endLine":49,"endColumn":47},{"ruleId":"780","severity":1,"message":"784","line":66,"column":41,"nodeType":"782","messageId":"785","endLine":66,"endColumn":43},{"ruleId":"699","severity":1,"message":"700","line":70,"column":86,"nodeType":"701","messageId":"702","endLine":70,"endColumn":88},{"ruleId":"699","severity":1,"message":"700","line":71,"column":33,"nodeType":"701","messageId":"702","endLine":71,"endColumn":35},{"ruleId":"780","severity":1,"message":"784","line":77,"column":36,"nodeType":"782","messageId":"785","endLine":77,"endColumn":38},{"ruleId":"699","severity":1,"message":"700","line":81,"column":37,"nodeType":"701","messageId":"702","endLine":81,"endColumn":39},{"ruleId":"699","severity":1,"message":"700","line":81,"column":57,"nodeType":"701","messageId":"702","endLine":81,"endColumn":59},{"ruleId":"699","severity":1,"message":"700","line":82,"column":49,"nodeType":"701","messageId":"702","endLine":82,"endColumn":51},{"ruleId":"699","severity":1,"message":"700","line":88,"column":69,"nodeType":"701","messageId":"702","endLine":88,"endColumn":71},{"ruleId":"699","severity":1,"message":"700","line":138,"column":63,"nodeType":"701","messageId":"702","endLine":138,"endColumn":65},{"ruleId":"690","severity":1,"message":"786","line":20,"column":26,"nodeType":"692","messageId":"693","endLine":20,"endColumn":41},{"ruleId":"690","severity":1,"message":"787","line":36,"column":13,"nodeType":"692","messageId":"693","endLine":36,"endColumn":26},{"ruleId":"690","severity":1,"message":"720","line":52,"column":19,"nodeType":"692","messageId":"693","endLine":52,"endColumn":27},{"ruleId":"690","severity":1,"message":"720","line":57,"column":19,"nodeType":"692","messageId":"693","endLine":57,"endColumn":27},{"ruleId":"699","severity":1,"message":"729","line":100,"column":32,"nodeType":"701","messageId":"702","endLine":100,"endColumn":34},{"ruleId":"699","severity":1,"message":"729","line":105,"column":32,"nodeType":"701","messageId":"702","endLine":105,"endColumn":34},{"ruleId":"690","severity":1,"message":"711","line":4,"column":23,"nodeType":"692","messageId":"693","endLine":4,"endColumn":34},{"ruleId":"699","severity":1,"message":"729","line":37,"column":36,"nodeType":"701","messageId":"702","endLine":37,"endColumn":38},{"ruleId":"699","severity":1,"message":"729","line":42,"column":36,"nodeType":"701","messageId":"702","endLine":42,"endColumn":38},{"ruleId":"690","severity":1,"message":"694","line":1,"column":10,"nodeType":"692","messageId":"693","endLine":1,"endColumn":18},{"ruleId":"690","severity":1,"message":"740","line":1,"column":20,"nodeType":"692","messageId":"693","endLine":1,"endColumn":30},{"ruleId":"690","severity":1,"message":"788","line":1,"column":32,"nodeType":"692","messageId":"693","endLine":1,"endColumn":40},{"ruleId":"690","severity":1,"message":"741","line":2,"column":10,"nodeType":"692","messageId":"693","endLine":2,"endColumn":21},{"ruleId":"690","severity":1,"message":"789","line":3,"column":8,"nodeType":"692","messageId":"693","endLine":3,"endColumn":21},{"ruleId":"690","severity":1,"message":"790","line":4,"column":8,"nodeType":"692","messageId":"693","endLine":4,"endColumn":22},{"ruleId":"690","severity":1,"message":"703","line":5,"column":8,"nodeType":"692","messageId":"693","endLine":5,"endColumn":15},{"ruleId":"690","severity":1,"message":"791","line":6,"column":8,"nodeType":"692","messageId":"693","endLine":6,"endColumn":17},{"ruleId":"690","severity":1,"message":"792","line":7,"column":8,"nodeType":"692","messageId":"693","endLine":7,"endColumn":17},{"ruleId":"690","severity":1,"message":"793","line":8,"column":10,"nodeType":"692","messageId":"693","endLine":8,"endColumn":25},{"ruleId":"690","severity":1,"message":"794","line":8,"column":27,"nodeType":"692","messageId":"693","endLine":8,"endColumn":46},{"ruleId":"690","severity":1,"message":"795","line":9,"column":10,"nodeType":"692","messageId":"693","endLine":9,"endColumn":21},{"ruleId":"690","severity":1,"message":"796","line":10,"column":8,"nodeType":"692","messageId":"693","endLine":10,"endColumn":14},{"ruleId":"690","severity":1,"message":"797","line":16,"column":11,"nodeType":"692","messageId":"693","endLine":16,"endColumn":19},{"ruleId":"690","severity":1,"message":"694","line":1,"column":10,"nodeType":"692","messageId":"693","endLine":1,"endColumn":18},{"ruleId":"690","severity":1,"message":"740","line":1,"column":20,"nodeType":"692","messageId":"693","endLine":1,"endColumn":30},{"ruleId":"690","severity":1,"message":"711","line":7,"column":23,"nodeType":"692","messageId":"693","endLine":7,"endColumn":34},{"ruleId":"780","severity":1,"message":"798","line":17,"column":41,"nodeType":"782","messageId":"783","endLine":17,"endColumn":43},{"ruleId":"699","severity":1,"message":"700","line":32,"column":37,"nodeType":"701","messageId":"702","endLine":32,"endColumn":39},{"ruleId":"699","severity":1,"message":"700","line":39,"column":37,"nodeType":"701","messageId":"702","endLine":39,"endColumn":39},{"ruleId":"780","severity":1,"message":"798","line":49,"column":37,"nodeType":"782","messageId":"783","endLine":49,"endColumn":39},{"ruleId":"699","severity":1,"message":"700","line":54,"column":37,"nodeType":"701","messageId":"702","endLine":54,"endColumn":39},{"ruleId":"699","severity":1,"message":"700","line":56,"column":37,"nodeType":"701","messageId":"702","endLine":56,"endColumn":39},{"ruleId":"690","severity":1,"message":"694","line":1,"column":17,"nodeType":"692","messageId":"693","endLine":1,"endColumn":25},{"ruleId":"690","severity":1,"message":"740","line":1,"column":27,"nodeType":"692","messageId":"693","endLine":1,"endColumn":37},{"ruleId":"690","severity":1,"message":"788","line":1,"column":39,"nodeType":"692","messageId":"693","endLine":1,"endColumn":47},{"ruleId":"690","severity":1,"message":"691","line":1,"column":27,"nodeType":"692","messageId":"693","endLine":1,"endColumn":36},{"ruleId":"690","severity":1,"message":"799","line":21,"column":15,"nodeType":"692","messageId":"693","endLine":21,"endColumn":22},{"ruleId":"690","severity":1,"message":"799","line":32,"column":15,"nodeType":"692","messageId":"693","endLine":32,"endColumn":22},{"ruleId":"699","severity":1,"message":"700","line":7,"column":31,"nodeType":"701","messageId":"702","endLine":7,"endColumn":33},{"ruleId":"699","severity":1,"message":"700","line":25,"column":31,"nodeType":"701","messageId":"702","endLine":25,"endColumn":33},{"ruleId":"699","severity":1,"message":"729","line":20,"column":85,"nodeType":"701","messageId":"702","endLine":20,"endColumn":87},{"ruleId":"690","severity":1,"message":"741","line":2,"column":10,"nodeType":"692","messageId":"693","endLine":2,"endColumn":21},{"ruleId":"699","severity":1,"message":"700","line":70,"column":63,"nodeType":"701","messageId":"702","endLine":70,"endColumn":65},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Route' is defined but never used.","'Routes' is defined but never used.","'BrowserRouter' is defined but never used.","'api' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'classes' is defined but never used.","'useAxios' is defined but never used.","'axios' is defined but never used.","'baseURL' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'callback', 'canLoad', and 'ref'. Either include them or remove the dependency array. If 'callback' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["800"],"'useDispatch' is defined but never used.","'userOne' is assigned a value but never used.","'userTwo' is assigned a value but never used.","'register' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","'errors' is assigned a value but never used.","'reset' is assigned a value but never used.","'inputUserOneHandler' is assigned a value but never used.","'inputUserTwoHandler' is assigned a value but never used.","'response' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'columns'. Either include it or remove the dependency array. If 'setTableData' needs the current value of 'columns', you can also switch to useReducer instead of useState and read 'columns' in the reducer.",["801"],"'SeedTime' is defined but never used.","'table' is assigned a value but never used.","'setTable' is assigned a value but never used.","'Button' is defined but never used.","'Dropdown' is defined but never used.","'disabled' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'RoundRobin' is defined but never used.","'SingleEl' is defined but never used.","'DoubleEl' is defined but never used.","'Swiss' is defined but never used.","'braError' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchBrackets' and 'params.link'. Either include them or remove the dependency array.",["802"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["803"],"'inputCheckBoxChangeHandler' is assigned a value but never used.","'useContext' is defined but never used.","'useNavigate' is defined but never used.","'AuthContext' is defined but never used.","'value' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'responseBody'. Either include it or remove the dependency array. You can also do a functional update 'setResponseBody(r => ...)' if you only need 'responseBody' in the 'setResponseBody' call.",["804"],"'isLoading' is assigned a value but never used.","'error' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchTournament' and 'params.link'. Either include them or remove the dependency array.",["805"],"'logoutUser' is assigned a value but never used.","'id' is assigned a value but never used.","'setId' is assigned a value but never used.","'types' is assigned a value but never used.","'setTypes' is assigned a value but never used.","'groupStage' is assigned a value but never used.","'setGroupStage' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'api', 'dispatch', 'fetchTournament', 'params.link', and 'user'. Either include them or remove the dependency array.",["806"],"React Hook useEffect has a missing dependency: 'fetchBrackets'. Either include it or remove the dependency array.",["807"],"'setLimit' is assigned a value but never used.","'postError' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchPosts', 'filter', 'limit', 'page', and 'setSearchParams'. Either include them or remove the dependency array.",["808"],"React Hook useEffect has missing dependencies: 'fetchPosts' and 'searchParams'. Either include them or remove the dependency array.",["809"],"'setFilter' is assigned a value but never used.","'isLoadind' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchPostById' and 'params.slug'. Either include them or remove the dependency array.",["810"],"'set' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'temporaryFilter' is assigned a value but never used.","'setTemporaryFilter' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'api'. Either include it or remove the dependency array.",["811"],"'onChange' is assigned a value but never used.","'setBracket' is assigned a value but never used.","array-callback-return","Array.prototype.find() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","expectedInside","'setMatchResults' is assigned a value but never used.","'_matchResults' is assigned a value but never used.","'Fragment' is defined but never used.","'MatchInfoIcon' is defined but never used.","'MatchJudgeIcon' is defined but never used.","'InfoModal' is defined but never used.","'EditModal' is defined but never used.","'setCurrentMatch' is defined but never used.","'setCurrentBracketId' is defined but never used.","'useSelector' is defined but never used.","'moment' is defined but never used.","'dispatch' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","'reponse' is assigned a value but never used.",{"desc":"812","fix":"813"},{"desc":"814","fix":"815"},{"desc":"816","fix":"817"},{"desc":"818","fix":"819"},{"desc":"820","fix":"821"},{"desc":"822","fix":"823"},{"desc":"824","fix":"825"},{"desc":"826","fix":"827"},{"desc":"828","fix":"829"},{"desc":"830","fix":"831"},{"desc":"832","fix":"833"},{"desc":"834","fix":"835"},"Update the dependencies array to be: [callback, canLoad, isLoading, ref]",{"range":"836","text":"837"},"Update the dependencies array to be: [columns, table]",{"range":"838","text":"839"},"Update the dependencies array to be: [fetchBrackets, params.link]",{"range":"840","text":"841"},"Update the dependencies array to be: [dispatch]",{"range":"842","text":"843"},"Update the dependencies array to be: [responseBody, responseBody.bracket_type]",{"range":"844","text":"845"},"Update the dependencies array to be: [fetchTournament, params.link]",{"range":"846","text":"847"},"Update the dependencies array to be: [api, dispatch, fetchTournament, params.link, user]",{"range":"848","text":"849"},"Update the dependencies array to be: [fetchBrackets, tournament.id]",{"range":"850","text":"851"},"Update the dependencies array to be: [filter.title, filter.game, filter, fetchPosts, limit, page, setSearchParams]",{"range":"852","text":"853"},"Update the dependencies array to be: [page, limit, searchParams, fetchPosts]",{"range":"854","text":"855"},"Update the dependencies array to be: [fetchPostById, params.slug]",{"range":"856","text":"857"},"Update the dependencies array to be: [api]",{"range":"858","text":"859"},[526,537],"[callback, canLoad, isLoading, ref]",[661,668],"[columns, table]",[1303,1305],"[fetchBrackets, params.link]",[1410,1412],"[dispatch]",[4830,4857],"[responseBody, responseBody.bracket_type]",[1979,1981],"[fetchTournament, params.link]",[2939,2941],"[api, dispatch, fetchTournament, params.link, user]",[3042,3057],"[fetchBrackets, tournament.id]",[2269,2296],"[filter.title, filter.game, filter, fetchPosts, limit, page, setSearchParams]",[2712,2725],"[page, limit, searchParams, fetchPosts]",[2916,2918],"[fetchPostById, params.slug]",[863,865],"[api]"]