{"ast":null,"code":"var _jsxFileName = \"/home/indiora/ATS/frontend/src/pages/CreateTournament/TournamentInfoInput/TournamentInfoInput.jsx\";\nimport React, { useState, useContext, Fragment } from \"react\";\nimport \"../../../styles/App.css\";\nimport Form from \"react-bootstrap/Form\";\nimport Card from \"react-bootstrap/Card\";\nimport UploadButton from \"../../../components/UI/UploadButton/UploadButton\";\nimport MyFormGroupInput from \"../../../components/UI/MyFormGroupInput/MyFormGroupInput\";\nimport MyCard from \"../../../components/UI/MyCard/MyCard\";\nimport classes from \"./TournamentInfoInput.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TournamentInfoInput = _ref => {\n  let {\n    errors,\n    register,\n    inputChangeHandler,\n    setInputFile,\n    inputRadioChangeHandler,\n    tournamentType,\n    privateTournament,\n    setPrivateTournamnet\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(MyCard, {\n    children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n      className: \"card-header-text\",\n      children: \"Basic Info\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: [/*#__PURE__*/_jsxDEV(MyFormGroupInput, {\n        label: \"Title\",\n        name: \"title\",\n        type: \"text\",\n        errors: errors,\n        register: register,\n        validationSchema: {\n          required: \"⚠ This input is required.\"\n        },\n        onChange: inputChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MyFormGroupInput, {\n        label: \"Description\",\n        name: \"content\",\n        as: \"textarea\",\n        errors: errors,\n        register: register,\n        validationSchema: {},\n        onChange: inputChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MyFormGroupInput, {\n        label: \"Game\",\n        name: \"game\",\n        errors: errors,\n        register: register,\n        validationSchema: {\n          required: \"⚠ This input is required.\"\n        },\n        onChange: inputChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MyFormGroupInput, {\n        label: \"Start of the tournament\",\n        name: \"start_time\",\n        type: \"datetime-local\",\n        errors: errors,\n        register: register,\n        validationSchema: {\n          required: \"⚠ This input is required.\"\n        },\n        onChange: inputChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          className: `${classes.myFormLabel}`,\n          children: \"Poster\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(UploadButton, {\n          setInputFileValue: setInputFile\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Tournament type (private tournaments are not visible in the general list and can be accessed only via a link)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Check, {\n          inline: true,\n          label: \"public\",\n          type: \"radio\",\n          value: \"0\",\n          checked: privateTournament === false,\n          onChange: () => {\n            setPrivateTournamnet(false);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n          inline: true,\n          label: \"private\",\n          type: \"radio\",\n          value: \"1\",\n          checked: privateTournament === true,\n          onChange: () => {\n            setPrivateTournamnet(true);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n};\n_c = TournamentInfoInput;\nexport default TournamentInfoInput;\nvar _c;\n$RefreshReg$(_c, \"TournamentInfoInput\");","map":{"version":3,"names":["React","useState","useContext","Fragment","Form","Card","UploadButton","MyFormGroupInput","MyCard","classes","TournamentInfoInput","errors","register","inputChangeHandler","setInputFile","inputRadioChangeHandler","tournamentType","privateTournament","setPrivateTournamnet","required","myFormLabel"],"sources":["/home/indiora/ATS/frontend/src/pages/CreateTournament/TournamentInfoInput/TournamentInfoInput.jsx"],"sourcesContent":["import React, { useState, useContext, Fragment } from \"react\";\nimport \"../../../styles/App.css\";\nimport Form from \"react-bootstrap/Form\";\nimport Card from \"react-bootstrap/Card\";\nimport UploadButton from \"../../../components/UI/UploadButton/UploadButton\";\nimport MyFormGroupInput from \"../../../components/UI/MyFormGroupInput/MyFormGroupInput\";\nimport MyCard from \"../../../components/UI/MyCard/MyCard\";\nimport classes from \"./TournamentInfoInput.module.css\";\n\nconst TournamentInfoInput = ({\n    errors,\n    register,\n    inputChangeHandler,\n    setInputFile,\n    inputRadioChangeHandler,\n    tournamentType,\n    privateTournament,\n    setPrivateTournamnet,\n}) => {\n    return (\n        <MyCard>\n            <Card.Header className=\"card-header-text\">Basic Info</Card.Header>\n            <Card.Body>\n                <MyFormGroupInput\n                    label=\"Title\"\n                    name=\"title\"\n                    type=\"text\"\n                    errors={errors}\n                    register={register}\n                    validationSchema={{\n                        required: \"⚠ This input is required.\",\n                    }}\n                    onChange={inputChangeHandler}\n                ></MyFormGroupInput>\n                <MyFormGroupInput\n                    label=\"Description\"\n                    name=\"content\"\n                    as=\"textarea\"\n                    errors={errors}\n                    register={register}\n                    validationSchema={{}}\n                    onChange={inputChangeHandler}\n                ></MyFormGroupInput>\n                <MyFormGroupInput\n                    label=\"Game\"\n                    name=\"game\"\n                    errors={errors}\n                    register={register}\n                    validationSchema={{\n                        required: \"⚠ This input is required.\",\n                    }}\n                    onChange={inputChangeHandler}\n                ></MyFormGroupInput>\n                <MyFormGroupInput\n                    label=\"Start of the tournament\"\n                    name=\"start_time\"\n                    type=\"datetime-local\"\n                    errors={errors}\n                    register={register}\n                    validationSchema={{\n                        required: \"⚠ This input is required.\",\n                    }}\n                    onChange={inputChangeHandler}\n                ></MyFormGroupInput>\n                <Form.Group className=\"mb-3\">\n                    <Form.Label className={`${classes.myFormLabel}`}>Poster</Form.Label>\n                    <UploadButton setInputFileValue={setInputFile} />\n                </Form.Group>\n                <p>\n                    Tournament type (private tournaments are not visible in the general list and can be accessed only\n                    via a link)\n                </p>\n                <div className=\"mb-3\">\n                    <Form.Check\n                        inline\n                        label=\"public\"\n                        type=\"radio\"\n                        value=\"0\"\n                        checked={privateTournament === false}\n                        onChange={() => {\n                            setPrivateTournamnet(false);\n                        }}\n                    ></Form.Check>\n                    <Form.Check\n                        inline\n                        label=\"private\"\n                        type=\"radio\"\n                        value=\"1\"\n                        checked={privateTournament === true}\n                        onChange={() => {\n                            setPrivateTournamnet(true);\n                        }}\n                    ></Form.Check>\n                </div>\n                {/* <p>Tournament type</p>\n      <div className=\"mb-3\">\n        <Form.Check\n          inline\n          label=\"One stage\"\n          name=\"tournament_type\"\n          type=\"radio\"\n          value=\"0\"\n          checked={tournamentType === \"0\" ? true : false}\n          onChange={(event) => {\n            inputRadioChangeHandler(event);\n          }}\n        ></Form.Check>\n        <Form.Check\n          inline\n          label=\"Group two stage\"\n          name=\"tournament_type\"\n          type=\"radio\"\n          value=\"1\"\n          checked={tournamentType === \"1\" ? true : false}\n          onChange={(event) => {\n            inputRadioChangeHandler(event);\n          }}\n        ></Form.Check>\n      </div> */}\n            </Card.Body>\n        </MyCard>\n    );\n};\n\nexport default TournamentInfoInput;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAC7D,OAAO,yBAAyB;AAChC,OAAOC,IAAI,MAAM,sBAAsB;AACvC,OAAOC,IAAI,MAAM,sBAAsB;AACvC,OAAOC,YAAY,MAAM,kDAAkD;AAC3E,OAAOC,gBAAgB,MAAM,0DAA0D;AACvF,OAAOC,MAAM,MAAM,sCAAsC;AACzD,OAAOC,OAAO,MAAM,kCAAkC;AAAC;AAEvD,MAAMC,mBAAmB,GAAG,QAStB;EAAA,IATuB;IACzBC,MAAM;IACNC,QAAQ;IACRC,kBAAkB;IAClBC,YAAY;IACZC,uBAAuB;IACvBC,cAAc;IACdC,iBAAiB;IACjBC;EACJ,CAAC;EACG,oBACI,QAAC,MAAM;IAAA,wBACH,QAAC,IAAI,CAAC,MAAM;MAAC,SAAS,EAAC,kBAAkB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAyB,eAClE,QAAC,IAAI,CAAC,IAAI;MAAA,wBACN,QAAC,gBAAgB;QACb,KAAK,EAAC,OAAO;QACb,IAAI,EAAC,OAAO;QACZ,IAAI,EAAC,MAAM;QACX,MAAM,EAAEP,MAAO;QACf,QAAQ,EAAEC,QAAS;QACnB,gBAAgB,EAAE;UACdO,QAAQ,EAAE;QACd,CAAE;QACF,QAAQ,EAAEN;MAAmB;QAAA;QAAA;QAAA;MAAA,QACb,eACpB,QAAC,gBAAgB;QACb,KAAK,EAAC,aAAa;QACnB,IAAI,EAAC,SAAS;QACd,EAAE,EAAC,UAAU;QACb,MAAM,EAAEF,MAAO;QACf,QAAQ,EAAEC,QAAS;QACnB,gBAAgB,EAAE,CAAC,CAAE;QACrB,QAAQ,EAAEC;MAAmB;QAAA;QAAA;QAAA;MAAA,QACb,eACpB,QAAC,gBAAgB;QACb,KAAK,EAAC,MAAM;QACZ,IAAI,EAAC,MAAM;QACX,MAAM,EAAEF,MAAO;QACf,QAAQ,EAAEC,QAAS;QACnB,gBAAgB,EAAE;UACdO,QAAQ,EAAE;QACd,CAAE;QACF,QAAQ,EAAEN;MAAmB;QAAA;QAAA;QAAA;MAAA,QACb,eACpB,QAAC,gBAAgB;QACb,KAAK,EAAC,yBAAyB;QAC/B,IAAI,EAAC,YAAY;QACjB,IAAI,EAAC,gBAAgB;QACrB,MAAM,EAAEF,MAAO;QACf,QAAQ,EAAEC,QAAS;QACnB,gBAAgB,EAAE;UACdO,QAAQ,EAAE;QACd,CAAE;QACF,QAAQ,EAAEN;MAAmB;QAAA;QAAA;QAAA;MAAA,QACb,eACpB,QAAC,IAAI,CAAC,KAAK;QAAC,SAAS,EAAC,MAAM;QAAA,wBACxB,QAAC,IAAI,CAAC,KAAK;UAAC,SAAS,EAAG,GAAEJ,OAAO,CAACW,WAAY,EAAE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAoB,eACpE,QAAC,YAAY;UAAC,iBAAiB,EAAEN;QAAa;UAAA;UAAA;UAAA;QAAA,QAAG;MAAA;QAAA;QAAA;QAAA;MAAA,QACxC,eACb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAGI,eACJ;QAAK,SAAS,EAAC,MAAM;QAAA,wBACjB,QAAC,IAAI,CAAC,KAAK;UACP,MAAM;UACN,KAAK,EAAC,QAAQ;UACd,IAAI,EAAC,OAAO;UACZ,KAAK,EAAC,GAAG;UACT,OAAO,EAAEG,iBAAiB,KAAK,KAAM;UACrC,QAAQ,EAAE,MAAM;YACZC,oBAAoB,CAAC,KAAK,CAAC;UAC/B;QAAE;UAAA;UAAA;UAAA;QAAA,QACQ,eACd,QAAC,IAAI,CAAC,KAAK;UACP,MAAM;UACN,KAAK,EAAC,SAAS;UACf,IAAI,EAAC,OAAO;UACZ,KAAK,EAAC,GAAG;UACT,OAAO,EAAED,iBAAiB,KAAK,IAAK;UACpC,QAAQ,EAAE,MAAM;YACZC,oBAAoB,CAAC,IAAI,CAAC;UAC9B;QAAE;UAAA;UAAA;UAAA;QAAA,QACQ;MAAA;QAAA;QAAA;QAAA;MAAA,QACZ;IAAA;MAAA;MAAA;MAAA;IAAA,QA0BE;EAAA;IAAA;IAAA;IAAA;EAAA,QACP;AAEjB,CAAC;AAAC,KAjHIR,mBAAmB;AAmHzB,eAAeA,mBAAmB;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}