{"ast":null,"code":"var _jsxFileName = \"/home/indiora/ATS/frontend/src/pages/EditTournament/EditTournament.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useFetching } from \"../../hooks/useFetching\";\nimport \"../../styles/App.css\";\nimport Form from \"react-bootstrap/Form\";\nimport Card from \"react-bootstrap/Card\";\nimport PostService from \"../../API/PostService\";\nimport { useNavigate } from \"react-router-dom\";\nimport { AuthContext } from \"../../context\";\nimport useAxios from \"../../API/useAxios\";\nimport UploadButton from \"../../components/UI/UploadButton/UploadButton\";\nimport MyFormGroupInput from \"../../components/UI/MyFormGroupInput/MyFormGroupInput\";\nimport { useForm } from \"react-hook-form\";\nimport MyButton from \"../../components/UI/MyButton/MyButton\";\nimport MyCard from \"../../components/UI/MyCard/MyCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditTournament = () => {\n  _s();\n  const api = useAxios();\n  const navigate = useNavigate();\n  const params = useParams();\n  const {\n    user\n  } = useContext(AuthContext);\n  const [fetchTournament, isLoading, error] = useFetching(async slug => {\n    const response = await PostService.getTournamentBySlug(slug);\n    setResponseBody({\n      title: response.data.title,\n      content: response.data.content,\n      // participants: response.data.participants,\n      game: response.data.game,\n      prize: response.data.prize,\n      start_time: response.data.start_time,\n      // type: response.data.type,\n      creater_email: user.email\n    });\n    reset(response.data);\n  });\n  const [responseBody, setResponseBody] = useState({\n    title: \"\",\n    content: \"\",\n    start_time: \"\",\n    // participants: \"\",\n    game: \"\",\n    prize: \"\",\n    // type: \"\",\n    creater_email: user.email\n  });\n  const [inputFile, setInputFile] = useState(null);\n  useEffect(() => {\n    fetchTournament(params.slug);\n  }, []);\n  const inputChangeHandler = inputValue => {\n    const {\n      name,\n      value\n    } = inputValue;\n    setResponseBody({\n      ...responseBody,\n      [name]: value\n    });\n  };\n  const onSubmitHandler = () => {\n    const response = api.patch(`/edit_tournament/${params.slug}/`, {\n      ...responseBody,\n      poster: inputFile\n    }, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    }).then(function (response) {\n      if (response.status == 200) {\n        navigate(`/tournament/${response.data.slug}`);\n      }\n    });\n  };\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors\n    },\n    reset\n  } = useForm({\n    mode: \"onBlur\"\n  });\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"section_without_div pt-4\",\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleSubmit(onSubmitHandler),\n      children: [/*#__PURE__*/_jsxDEV(MyCard, {\n        children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n          className: \"tournament_text\",\n          children: \"Basic Info\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n          children: [/*#__PURE__*/_jsxDEV(MyFormGroupInput, {\n            label: \"Title\",\n            name: \"title\",\n            type: \"text\",\n            errors: errors,\n            register: register,\n            validationSchema: {\n              required: \"⚠ This input is required.\"\n            },\n            onChange: inputChangeHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MyFormGroupInput, {\n            label: \"Description\",\n            name: \"content\",\n            as: \"textarea\",\n            errors: errors,\n            register: register,\n            validationSchema: {\n              required: \"⚠ This input is required.\"\n            },\n            onChange: inputChangeHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MyFormGroupInput, {\n            label: \"Prize fund\",\n            name: \"prize\",\n            errors: errors,\n            register: register,\n            validationSchema: {\n              required: \"⚠ This input is required.\",\n              pattern: {\n                value: /^[+-]?\\d+(\\.\\d+)?$/,\n                message: \"⚠ Invalid data.\"\n              }\n            },\n            onChange: inputChangeHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MyFormGroupInput, {\n            label: \"Game\",\n            name: \"game\",\n            errors: errors,\n            register: register,\n            validationSchema: {\n              required: \"⚠ This input is required.\"\n            },\n            onChange: inputChangeHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MyFormGroupInput, {\n            label: \"Start of the tournament\",\n            name: \"start_time\",\n            type: \"datetime-local\",\n            errors: errors,\n            register: register,\n            validationSchema: {\n              required: \"⚠ This input is required.\"\n            },\n            onChange: inputChangeHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Poster\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(UploadButton, {\n              setInputFileValue: setInputFile\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form_button_div pb-4 pt-4\",\n        children: /*#__PURE__*/_jsxDEV(MyButton, {\n          additionalCl: \"btn-md\",\n          type: \"submit\",\n          children: \"Edit Tournament\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(EditTournament, \"2Cu2vF5RjXo83M88A/jCcYzU+wQ=\", false, function () {\n  return [useAxios, useNavigate, useParams, useFetching, useForm];\n});\n_c = EditTournament;\nexport default EditTournament;\nvar _c;\n$RefreshReg$(_c, \"EditTournament\");","map":{"version":3,"names":["React","useState","useContext","useEffect","useParams","useFetching","Form","Card","PostService","useNavigate","AuthContext","useAxios","UploadButton","MyFormGroupInput","useForm","MyButton","MyCard","EditTournament","api","navigate","params","user","fetchTournament","isLoading","error","slug","response","getTournamentBySlug","setResponseBody","title","data","content","game","prize","start_time","creater_email","email","reset","responseBody","inputFile","setInputFile","inputChangeHandler","inputValue","name","value","onSubmitHandler","patch","poster","headers","then","status","register","handleSubmit","formState","errors","mode","required","pattern","message"],"sources":["/home/indiora/ATS/frontend/src/pages/EditTournament/EditTournament.jsx"],"sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useFetching } from \"../../hooks/useFetching\";\nimport \"../../styles/App.css\";\nimport Form from \"react-bootstrap/Form\";\nimport Card from \"react-bootstrap/Card\";\nimport PostService from \"../../API/PostService\";\nimport { useNavigate } from \"react-router-dom\";\nimport { AuthContext } from \"../../context\";\nimport useAxios from \"../../API/useAxios\";\nimport UploadButton from \"../../components/UI/UploadButton/UploadButton\";\nimport MyFormGroupInput from \"../../components/UI/MyFormGroupInput/MyFormGroupInput\";\nimport { useForm } from \"react-hook-form\";\nimport MyButton from \"../../components/UI/MyButton/MyButton\";\nimport MyCard from \"../../components/UI/MyCard/MyCard\";\n\nconst EditTournament = () => {\n  const api = useAxios();\n  const navigate = useNavigate();\n  const params = useParams();\n  const { user } = useContext(AuthContext);\n  const [fetchTournament, isLoading, error] = useFetching(async (slug) => {\n    const response = await PostService.getTournamentBySlug(slug);\n    setResponseBody({\n      title: response.data.title,\n      content: response.data.content,\n      // participants: response.data.participants,\n      game: response.data.game,\n      prize: response.data.prize,\n      start_time: response.data.start_time,\n      // type: response.data.type,\n      creater_email: user.email,\n    });\n    reset(response.data);\n  });\n\n  const [responseBody, setResponseBody] = useState({\n    title: \"\",\n    content: \"\",\n    start_time: \"\",\n    // participants: \"\",\n    game: \"\",\n    prize: \"\",\n    // type: \"\",\n    creater_email: user.email,\n  });\n  const [inputFile, setInputFile] = useState(null);\n\n  useEffect(() => {\n    fetchTournament(params.slug);\n  }, []);\n\n  const inputChangeHandler = (inputValue) => {\n    const { name, value } = inputValue;\n    setResponseBody({ ...responseBody, [name]: value });\n  };\n\n  const onSubmitHandler = () => {\n    const response = api.patch(\n      `/edit_tournament/${params.slug}/`,\n      { ...responseBody, poster: inputFile },\n      {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n        },\n      }\n    ).then(function (response) {\n      if (response.status == 200) {\n        navigate(`/tournament/${response.data.slug}`)\n      }\n    });\n\n  };\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm({ mode: \"onBlur\" });\n\n  return (\n    <section className=\"section_without_div pt-4\">\n      <Form onSubmit={handleSubmit(onSubmitHandler)}>\n        <MyCard>\n          <Card.Header className=\"tournament_text\">Basic Info</Card.Header>\n          <Card.Body>\n            <MyFormGroupInput\n              label=\"Title\"\n              name=\"title\"\n              type=\"text\"\n              errors={errors}\n              register={register}\n              validationSchema={{\n                required: \"⚠ This input is required.\",\n              }}\n              onChange={inputChangeHandler}\n            ></MyFormGroupInput>\n            <MyFormGroupInput\n              label=\"Description\"\n              name=\"content\"\n              as=\"textarea\"\n              errors={errors}\n              register={register}\n              validationSchema={{\n                required: \"⚠ This input is required.\",\n              }}\n              onChange={inputChangeHandler}\n            ></MyFormGroupInput>\n            <MyFormGroupInput\n              label=\"Prize fund\"\n              name=\"prize\"\n              errors={errors}\n              register={register}\n              validationSchema={{\n                required: \"⚠ This input is required.\",\n                pattern: {\n                  value: /^[+-]?\\d+(\\.\\d+)?$/,\n                  message: \"⚠ Invalid data.\",\n                },\n              }}\n              onChange={inputChangeHandler}\n            ></MyFormGroupInput>\n            <MyFormGroupInput\n              label=\"Game\"\n              name=\"game\"\n              errors={errors}\n              register={register}\n              validationSchema={{\n                required: \"⚠ This input is required.\",\n              }}\n              onChange={inputChangeHandler}\n            ></MyFormGroupInput>\n            <MyFormGroupInput\n              label=\"Start of the tournament\"\n              name=\"start_time\"\n              type=\"datetime-local\"\n              errors={errors}\n              register={register}\n              validationSchema={{\n                required: \"⚠ This input is required.\",\n              }}\n              onChange={inputChangeHandler}\n            ></MyFormGroupInput>\n            <Form.Group className=\"mb-3\">\n              <Form.Label>Poster</Form.Label>\n              <UploadButton setInputFileValue={setInputFile} />\n            </Form.Group>\n          </Card.Body>\n        </MyCard>\n        {/* <div className=\"my-4\">\n          <MyCard>\n            <Card.Header className=\"tournament_text\">Bracket Info</Card.Header>\n            <Card.Body>\n              <MyFormGroupInput\n                label=\"Participants\"\n                name=\"participants\"\n                as=\"textarea\"\n                errors={errors}\n                register={register}\n                validationSchema={{\n                  required: \"⚠ This input is required.\",\n                  pattern: {\n                    value: /^.+\\s+./i,\n                    message: \"⚠ Minimum two participants.\",\n                  },\n                }}\n                onChange={inputChangeHandler}\n              ></MyFormGroupInput>\n              <Form.Group className=\"mb-3\">\n                <Form.Label>Bracket type</Form.Label>\n                <Form.Select\n                  className=\"shadow-none my_input\"\n                  name=\"type\"\n                  onChange={(e) => inputChangeHandler(e)}\n                >\n                  <option value=\"SE\">Single Elimination</option>\n                  <option value=\"DE\">Double Elimination</option>\n                  <option value=\"RR\">Round Robin</option>\n                </Form.Select>\n              </Form.Group>\n            </Card.Body>\n          </MyCard>\n        </div> */}\n        <div className=\"form_button_div pb-4 pt-4\">\n          <MyButton additionalCl={\"btn-md\"} type=\"submit\">\n            Edit Tournament\n          </MyButton>\n        </div>\n      </Form>\n    </section>\n  );\n};\n\nexport default EditTournament;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}