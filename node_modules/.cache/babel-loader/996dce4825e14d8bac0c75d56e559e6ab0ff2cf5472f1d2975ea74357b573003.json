{"ast":null,"code":"var _jsxFileName = \"/home/indiora/ATS/frontend/src/pages/Register/Register.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useContext } from \"react\";\nimport { AuthContext } from \"../../context\";\nimport { useForm } from \"react-hook-form\";\nimport { useNavigate } from \"react-router-dom\";\nimport Form from \"react-bootstrap/Form\";\nimport MyButton from \"../../components/UI/MyButton/MyButton\";\nimport MyFormGroupInput from \"../../components/UI/MyFormGroupInput/MyFormGroupInput\";\nimport MyModal from \"../../components/UI/MyModal/MyModal\";\nimport Modal from \"react-bootstrap/Modal\";\nimport MyCard from \"../../components/UI/MyCard/MyCard\";\nimport Card from \"react-bootstrap/Card\";\nimport classes from \"./Register.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Register = () => {\n  _s();\n  const [state, setState] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    password2: \"\"\n  });\n  const [error, setError] = useState(\"\");\n  const {\n    registerUser\n  } = useContext(AuthContext);\n  const [modalShow, setModalShow] = useState(false);\n  const handleRegisterSubmit = async () => {\n    setError(\"\");\n    registerUser(state.username, state.email, state.password, state.password2).then(response => {\n      setModalShow(true);\n    }).catch(error => {\n      var _error$response, _error$response$data, _error$response$data$;\n      console.log(\"cath\", error);\n      setError(error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : (_error$response$data$ = _error$response$data.detail) === null || _error$response$data$ === void 0 ? void 0 : _error$response$data$.error);\n    });\n  };\n  const closeModal = () => {\n    setModalShow(false);\n    navigate(\"/\");\n  };\n  const inputChangeHandler = inputValue => {\n    const {\n      name,\n      value\n    } = inputValue;\n    setState({\n      ...state,\n      [name]: value\n    });\n    setValue(name, value);\n  };\n  const {\n    register,\n    handleSubmit,\n    getValues,\n    setValue,\n    formState: {\n      errors\n    }\n  } = useForm({\n    mode: \"onBlur\"\n  });\n  const navigate = useNavigate();\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(MyModal, {\n      show: modalShow,\n      onHide: () => closeModal(),\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        className: \"center-block\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Confirm registration\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"center-block\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"We have sent you an email to confirm your registration.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${classes.reregistration_form}`,\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: handleSubmit(handleRegisterSubmit),\n        children: [/*#__PURE__*/_jsxDEV(MyCard, {\n          children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n            className: \"card-header-text\",\n            children: \"Sign up \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: [/*#__PURE__*/_jsxDEV(MyFormGroupInput, {\n              label: \"Username\",\n              name: \"username\",\n              errors: errors,\n              register: register,\n              validationSchema: {\n                required: \"⚠ This input is required.\"\n              },\n              onChange: inputChangeHandler\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(MyFormGroupInput, {\n              label: \"Email\",\n              name: \"email\",\n              errors: errors,\n              register: register,\n              validationSchema: {\n                required: \"⚠ This input is required.\",\n                pattern: {\n                  value: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n                  message: \"⚠ Invalid email.\"\n                }\n              },\n              onChange: inputChangeHandler\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(MyFormGroupInput, {\n              label: \"Password\",\n              type: \"password\",\n              name: \"password\",\n              errors: errors,\n              register: register,\n              validationSchema: {\n                required: \"⚠ This input is required.\"\n              },\n              onChange: inputChangeHandler\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(MyFormGroupInput, {\n              label: \"Repeat password\",\n              type: \"password\",\n              name: \"password2\",\n              errors: errors,\n              register: register,\n              validationSchema: {\n                required: \"⚠ This input is required.\",\n                minLength: {\n                  value: 8,\n                  message: \"Must be at least 8 characters\"\n                },\n                validate: value => {\n                  const {\n                    password\n                  } = getValues();\n                  return password === value || \"⚠ Passwords should match!\";\n                }\n              },\n              onChange: inputChangeHandler\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), error != \"\" && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${classes.error_container}`,\n          children: `⚠ ${error}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 27\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-3\",\n          children: /*#__PURE__*/_jsxDEV(MyButton, {\n            additionalCl: \"btn-md\",\n            type: \"submit\",\n            children: \"Sign up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(Register, \"Ejm52c+pqij21AMRydpNYoFWLPs=\", false, function () {\n  return [useForm, useNavigate];\n});\n_c = Register;\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["useState","useContext","AuthContext","useForm","useNavigate","Form","MyButton","MyFormGroupInput","MyModal","Modal","MyCard","Card","classes","Register","state","setState","username","email","password","password2","error","setError","registerUser","modalShow","setModalShow","handleRegisterSubmit","then","response","catch","console","log","data","detail","closeModal","navigate","inputChangeHandler","inputValue","name","value","setValue","register","handleSubmit","getValues","formState","errors","mode","reregistration_form","required","pattern","message","minLength","validate","error_container"],"sources":["/home/indiora/ATS/frontend/src/pages/Register/Register.jsx"],"sourcesContent":["import { useState, useContext } from \"react\";\nimport { AuthContext } from \"../../context\";\nimport { useForm } from \"react-hook-form\";\nimport { useNavigate } from \"react-router-dom\";\nimport Form from \"react-bootstrap/Form\";\nimport MyButton from \"../../components/UI/MyButton/MyButton\";\nimport MyFormGroupInput from \"../../components/UI/MyFormGroupInput/MyFormGroupInput\";\nimport MyModal from \"../../components/UI/MyModal/MyModal\";\nimport Modal from \"react-bootstrap/Modal\";\nimport MyCard from \"../../components/UI/MyCard/MyCard\";\nimport Card from \"react-bootstrap/Card\";\nimport classes from \"./Register.module.css\";\n\n\nconst Register = () => {\n  const [state, setState] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    password2: \"\",\n  });\n  const [error, setError] = useState(\"\")\n  const { registerUser } = useContext(AuthContext);\n  const [modalShow, setModalShow] = useState(false);\n\n  const handleRegisterSubmit = async () => {\n    setError(\"\")\n    registerUser(state.username, state.email, state.password, state.password2).then((response) => {\n        setModalShow(true);\n    }).catch((error) => {\n      console.log(\"cath\", error);\n      setError(error?.response?.data?.detail?.error)\n      \n    });\n    \n\n  };\n\n  const closeModal = () => {\n    setModalShow(false);\n    navigate(\"/\");\n  }\n\n  const inputChangeHandler = (inputValue) => {\n    const { name, value } = inputValue;\n    setState({ ...state, [name]: value });\n    setValue(name, value)\n  };\n\n  const {\n    register,\n    handleSubmit,\n    getValues,\n    setValue,\n    formState: { errors },\n  } = useForm({ mode: \"onBlur\" });\n\n  const navigate = useNavigate();\n\n  return (\n    <section>\n      <MyModal show={modalShow} onHide={() => closeModal()}>\n        <Modal.Header closeButton className=\"center-block\">\n          <h2>Confirm registration</h2>\n        </Modal.Header>\n        <Modal.Body>\n          <div className=\"center-block\">\n            <p>We have sent you an email to confirm your registration.</p>\n          </div>\n        </Modal.Body>\n      </MyModal>\n      <div className={`${classes.reregistration_form}`}>\n      <Form onSubmit={handleSubmit(handleRegisterSubmit)}>\n          <MyCard>\n            <Card.Header className=\"card-header-text\">Sign up </Card.Header>\n            <Card.Body>\n              <MyFormGroupInput\n                label=\"Username\"\n                name=\"username\"\n                errors={errors}\n                register={register}\n                validationSchema={{\n                  required: \"⚠ This input is required.\",\n                }}\n                onChange={inputChangeHandler}\n              ></MyFormGroupInput>\n              <MyFormGroupInput\n                label=\"Email\"\n                name=\"email\"\n                errors={errors}\n                register={register}\n                validationSchema={{\n                  required: \"⚠ This input is required.\",\n                  pattern: {\n                    value:\n                      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n                    message: \"⚠ Invalid email.\",\n                  },\n                }}\n                onChange={inputChangeHandler}\n              ></MyFormGroupInput>\n              <MyFormGroupInput\n                label=\"Password\"\n                type=\"password\"\n                name=\"password\"\n                errors={errors}\n                register={register}\n                validationSchema={{\n                  required: \"⚠ This input is required.\",\n                }}\n                onChange={inputChangeHandler}\n              ></MyFormGroupInput>\n              <MyFormGroupInput\n                label=\"Repeat password\"\n                type=\"password\"\n                name=\"password2\"\n                errors={errors}\n                register={register}\n                validationSchema={{\n                  required: \"⚠ This input is required.\",\n                  minLength: {\n                    value: 8,\n                    message: \"Must be at least 8 characters\",\n                  },\n                  validate: (value) => {\n                    const { password } = getValues();\n                    return password === value || \"⚠ Passwords should match!\";\n                  },\n                }}\n                onChange={inputChangeHandler}\n              ></MyFormGroupInput>\n            </Card.Body>\n          </MyCard>\n          {error != \"\" && <div className={`${classes.error_container}`}>{`⚠ ${error}`}</div>}\n        <div className='mt-3'>\n          <MyButton additionalCl={\"btn-md\"} type=\"submit\">\n            Sign up\n          </MyButton>\n        </div>\n      </Form>\n      </div>\n    </section>\n  );\n};\n\nexport default Register;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}