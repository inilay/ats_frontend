{"ast":null,"code":"var _jsxFileName = \"/home/indiora/ATS/frontend/src/pages/EditTournament/EditTournament.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useFetching } from \"../../hooks/useFetching\";\nimport \"../../styles/App.css\";\nimport Form from \"react-bootstrap/Form\";\nimport Card from \"react-bootstrap/Card\";\nimport { useNavigate } from \"react-router-dom\";\nimport { AuthContext } from \"../../context\";\nimport useAxios from \"../../API/useAxios\";\nimport UploadButton from \"../../components/UI/UploadButton/UploadButton\";\nimport MyFormGroupInput from \"../../components/UI/MyFormGroupInput/MyFormGroupInput\";\nimport { useForm } from \"react-hook-form\";\nimport MyButton from \"../../components/UI/MyButton/MyButton\";\nimport MyCard from \"../../components/UI/MyCard/MyCard\";\nimport classes from \"./EditTournament.module.css\";\nimport tournamentApi from \"../../services/api/tournamentApi\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditTournament = () => {\n  _s();\n  const api = useAxios();\n  const public_api = axios;\n  const navigate = useNavigate();\n  const params = useParams();\n  const {\n    user\n  } = useContext(AuthContext);\n  const [fetchTournament, isLoading, error] = useFetching(async link => {\n    const response = await tournamentApi.getTournamentBySlug(public_api, link);\n    setResponseBody({\n      title: response.data.title,\n      content: response.data.content,\n      // participants: response.data.participants,\n      game: response.data.game,\n      start_time: response.data.start_time,\n      // type: response.data.type,\n      creater_email: user.email\n    });\n    reset(response.data);\n  });\n  const [responseBody, setResponseBody] = useState({\n    title: \"\",\n    content: \"\",\n    start_time: \"\",\n    // participants: \"\",\n    game: \"\",\n    // type: \"\",\n    creater_email: user.email\n  });\n  const [inputFile, setInputFile] = useState(null);\n  useEffect(() => {\n    fetchTournament(params.link);\n  }, []);\n  const inputChangeHandler = inputValue => {\n    const {\n      name,\n      value\n    } = inputValue;\n    setResponseBody({\n      ...responseBody,\n      [name]: value\n    });\n    setValue(name, value);\n  };\n  const onSubmitHandler = () => {\n    const response = api.patch(`/edit_tournament/${params.link}/`, {\n      ...responseBody,\n      poster: inputFile\n    }, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    }).then(function (response) {\n      if (response.status == 200) {\n        navigate(`/tournament/${response.data.link}`);\n      }\n    });\n  };\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    formState: {\n      errors\n    },\n    reset\n  } = useForm({\n    mode: \"onBlur\"\n  });\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"section_without_div pt-4\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${classes.edit_tournament_form}`,\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: handleSubmit(onSubmitHandler),\n        children: [/*#__PURE__*/_jsxDEV(MyCard, {\n          children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n            className: \"tournament_text\",\n            children: \"Basic Info\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: [/*#__PURE__*/_jsxDEV(MyFormGroupInput, {\n              label: \"Title\",\n              name: \"title\",\n              type: \"text\",\n              errors: errors,\n              register: register,\n              validationSchema: {\n                required: \"⚠ This input is required.\"\n              },\n              onChange: inputChangeHandler\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(MyFormGroupInput, {\n              label: \"Description\",\n              name: \"content\",\n              as: \"textarea\",\n              errors: errors,\n              register: register,\n              validationSchema: {\n                required: \"⚠ This input is required.\"\n              },\n              onChange: inputChangeHandler\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(MyFormGroupInput, {\n              label: \"Game\",\n              name: \"game\",\n              errors: errors,\n              register: register,\n              validationSchema: {\n                required: \"⚠ This input is required.\"\n              },\n              onChange: inputChangeHandler\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(MyFormGroupInput, {\n              label: \"Start of the tournament\",\n              name: \"start_time\",\n              type: \"datetime-local\",\n              errors: errors,\n              register: register,\n              validationSchema: {\n                required: \"⚠ This input is required.\"\n              },\n              onChange: inputChangeHandler\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n              className: \"mb-3\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Poster\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(UploadButton, {\n                setInputFileValue: setInputFile\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pb-4 pt-4\",\n          children: /*#__PURE__*/_jsxDEV(MyButton, {\n            additionalCl: \"btn-md\",\n            type: \"submit\",\n            children: \"Edit Tournament\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(EditTournament, \"ccEshzRCO8E3dqpdIX+J5m0sGP0=\", false, function () {\n  return [useAxios, useNavigate, useParams, useFetching, useForm];\n});\n_c = EditTournament;\nexport default EditTournament;\nvar _c;\n$RefreshReg$(_c, \"EditTournament\");","map":{"version":3,"names":["React","useState","useContext","useEffect","useParams","useFetching","Form","Card","useNavigate","AuthContext","useAxios","UploadButton","MyFormGroupInput","useForm","MyButton","MyCard","classes","tournamentApi","axios","EditTournament","api","public_api","navigate","params","user","fetchTournament","isLoading","error","link","response","getTournamentBySlug","setResponseBody","title","data","content","game","start_time","creater_email","email","reset","responseBody","inputFile","setInputFile","inputChangeHandler","inputValue","name","value","setValue","onSubmitHandler","patch","poster","headers","then","status","register","handleSubmit","formState","errors","mode","edit_tournament_form","required"],"sources":["/home/indiora/ATS/frontend/src/pages/EditTournament/EditTournament.jsx"],"sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useFetching } from \"../../hooks/useFetching\";\nimport \"../../styles/App.css\";\nimport Form from \"react-bootstrap/Form\";\nimport Card from \"react-bootstrap/Card\";\nimport { useNavigate } from \"react-router-dom\";\nimport { AuthContext } from \"../../context\";\nimport useAxios from \"../../API/useAxios\";\nimport UploadButton from \"../../components/UI/UploadButton/UploadButton\";\nimport MyFormGroupInput from \"../../components/UI/MyFormGroupInput/MyFormGroupInput\";\nimport { useForm } from \"react-hook-form\";\nimport MyButton from \"../../components/UI/MyButton/MyButton\";\nimport MyCard from \"../../components/UI/MyCard/MyCard\";\nimport classes from \"./EditTournament.module.css\";\nimport tournamentApi from \"../../services/api/tournamentApi\";\nimport axios from \"axios\";\n\nconst EditTournament = () => {\n  const api = useAxios();\n  const public_api = axios\n  const navigate = useNavigate();\n  const params = useParams();\n  const { user } = useContext(AuthContext);\n  const [fetchTournament, isLoading, error] = useFetching(async (link) => {\n    const response = await tournamentApi.getTournamentBySlug(public_api, link);\n    setResponseBody({\n      title: response.data.title,\n      content: response.data.content,\n      // participants: response.data.participants,\n      game: response.data.game,\n      start_time: response.data.start_time,\n      // type: response.data.type,\n      creater_email: user.email,\n    });\n    reset(response.data);\n  });\n\n  const [responseBody, setResponseBody] = useState({\n    title: \"\",\n    content: \"\",\n    start_time: \"\",\n    // participants: \"\",\n    game: \"\",\n    // type: \"\",\n    creater_email: user.email,\n  });\n  const [inputFile, setInputFile] = useState(null);\n\n  useEffect(() => {\n    fetchTournament(params.link);\n  }, []);\n\n  const inputChangeHandler = (inputValue) => {\n    const { name, value } = inputValue;\n    setResponseBody({ ...responseBody, [name]: value });\n    setValue(name, value)\n  };\n\n  const onSubmitHandler = () => {\n    const response = api.patch(\n      `/edit_tournament/${params.link}/`,\n      { ...responseBody, poster: inputFile },\n      {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n        },\n      }\n    ).then(function (response) {\n      if (response.status == 200) {\n        navigate(`/tournament/${response.data.link}`)\n      }\n    });\n\n  };\n\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    formState: { errors },\n    reset,\n  } = useForm({ mode: \"onBlur\" });\n\n  return (\n    <section className=\"section_without_div pt-4\">\n      <div className={`${classes.edit_tournament_form}`}>\n        <Form onSubmit={handleSubmit(onSubmitHandler)}>\n          <MyCard>\n            <Card.Header className=\"tournament_text\">Basic Info</Card.Header>\n            <Card.Body>\n              <MyFormGroupInput\n                label=\"Title\"\n                name=\"title\"\n                type=\"text\"\n                errors={errors}\n                register={register}\n                validationSchema={{\n                  required: \"⚠ This input is required.\",\n                }}\n                onChange={inputChangeHandler}\n              ></MyFormGroupInput>\n              <MyFormGroupInput\n                label=\"Description\"\n                name=\"content\"\n                as=\"textarea\"\n                errors={errors}\n                register={register}\n                validationSchema={{\n                  required: \"⚠ This input is required.\",\n                }}\n                onChange={inputChangeHandler}\n              ></MyFormGroupInput>\n              \n              <MyFormGroupInput\n                label=\"Game\"\n                name=\"game\"\n                errors={errors}\n                register={register}\n                validationSchema={{\n                  required: \"⚠ This input is required.\",\n                }}\n                onChange={inputChangeHandler}\n              ></MyFormGroupInput>\n              <MyFormGroupInput\n                label=\"Start of the tournament\"\n                name=\"start_time\"\n                type=\"datetime-local\"\n                errors={errors}\n                register={register}\n                validationSchema={{\n                  required: \"⚠ This input is required.\",\n                }}\n                onChange={inputChangeHandler}\n              ></MyFormGroupInput>\n              <Form.Group className=\"mb-3\">\n                <Form.Label>Poster</Form.Label>\n                <UploadButton setInputFileValue={setInputFile} />\n              </Form.Group>\n            </Card.Body>\n          </MyCard>\n          {/* <div className=\"my-4\">\n            <MyCard>\n              <Card.Header className=\"tournament_text\">Bracket Info</Card.Header>\n              <Card.Body>\n                <MyFormGroupInput\n                  label=\"Participants\"\n                  name=\"participants\"\n                  as=\"textarea\"\n                  errors={errors}\n                  register={register}\n                  validationSchema={{\n                    required: \"⚠ This input is required.\",\n                    pattern: {\n                      value: /^.+\\s+./i,\n                      message: \"⚠ Minimum two participants.\",\n                    },\n                  }}\n                  onChange={inputChangeHandler}\n                ></MyFormGroupInput>\n                <Form.Group className=\"mb-3\">\n                  <Form.Label>Bracket type</Form.Label>\n                  <Form.Select\n                    className=\"shadow-none my_input\"\n                    name=\"type\"\n                    onChange={(e) => inputChangeHandler(e)}\n                  >\n                    <option value=\"SE\">Single Elimination</option>\n                    <option value=\"DE\">Double Elimination</option>\n                    <option value=\"RR\">Round Robin</option>\n                  </Form.Select>\n                </Form.Group>\n              </Card.Body>\n            </MyCard>\n          </div> */}\n          <div className=\"pb-4 pt-4\">\n            <MyButton additionalCl={\"btn-md\"} type=\"submit\">\n              Edit Tournament\n            </MyButton>\n          </div>\n        </Form>\n      </div>\n    </section>\n  );\n};\n\nexport default EditTournament;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}